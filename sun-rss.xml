<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="http://blogs.sun.com/roller-ui/styles/rss.xsl" media="screen"?><rss version="2.0" 
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:atom="http://www.w3.org/2005/Atom" >
<channel>
  <title>Yellow Submarine</title>
  <link>http://blogs.sun.com/rvs/</link>
    <atom:link rel="self" type="application/rss+xml" href="http://blogs.sun.com/rvs/feed/entries/rss" />
    <description>2:5030/359 Roman Shaposhnik</description>
  <language>en-us</language>
  <copyright>Copyright 2007</copyright>
  <lastBuildDate>Sun, 11 Feb 2007 14:38:51 -0800</lastBuildDate>
  <generator>Apache Roller (incubating) 3.2-dev (20070209112155:ag92114)</generator>

<item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/the_only_superhero_flick_worth</guid>
    <title>The only superhero flick worth watching this summer!</title>
    <dc:creator>rvs</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/the_only_superhero_flick_worth</link>
        <pubDate>Thu, 7 Aug 2008 08:06:38 -0700</pubDate>
    <category>/var</category>
            <description>&lt;center&gt;
&lt;object width=&quot;512&quot; height=&quot;296&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://www.hulu.com/embed/Z4kt7M5Uta51JuIDJV6HeQ&quot;&gt;&lt;/param&gt;&lt;embed src=&quot;http://www.hulu.com/embed/Z4kt7M5Uta51JuIDJV6HeQ&quot; type=&quot;application/x-shockwave-flash&quot;  width=&quot;512&quot; height=&quot;296&quot;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/center&gt;</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/mapping_cultural_references_using_subtitles</guid>
    <title>Mapping cultural references using subtitles and PAL to NTSC conversion.</title>
    <dc:creator>rvs</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/mapping_cultural_references_using_subtitles</link>
        <pubDate>Wed, 11 Jun 2008 17:46:58 -0700</pubDate>
    <category>/dev/braindump</category>
    <atom:summary type="html">I&apos;m a visual junkie. Not only that, a significant percentage
of the visual culture I grew up in is
&lt;a href=&quot;http://youtube.com/watch?v=yo-f-77zXKY&quot;&gt;completely alien&lt;/a&gt;
to my non-Russian friends. Which means, more often than
not I find myself in the middle of a conversation making
obscure references without much hope of getting through.
Although Tarkovsky is a safe bet and so is
&lt;a href=&quot;http://www.imdb.com/title/tt0493464/&quot;&gt;Bekmambetov&lt;/a&gt;
these days, the rest needs to be localized into Americana.
This means two things: subtitles and PAL to NTSC conversion.
And even though there are a couple of end-to-end applications
for acomplishing that I always end up doing bits and pieces of this
work in a variety of simple (even command-line!) tools: FFmpeg,
mjpeg_tools, dvdauthor, mkisofs and, above all, awk and sed.</atom:summary>        <description>I&apos;m a visual junkie. Not only that, a significant percentage
of the visual culture I grew up in is
&lt;a href=&quot;http://youtube.com/watch?v=yo-f-77zXKY&quot;&gt;completely alien&lt;/a&gt;
to my non-Russian friends. Which means, more often than
not I find myself in the middle of a conversation making
obscure references without much hope of getting through.
Although Tarkovsky is a safe bet and so is
&lt;a href=&quot;http://www.imdb.com/title/tt0493464/&quot;&gt;Bekmambetov&lt;/a&gt;
these days, the rest needs to be localized into Americana.
This means two things: subtitles and PAL to NTSC conversion.
And even though there are a couple of end-to-end applications
for acomplishing that I always end up doing bits and pieces of this
work in a variety of simple (even command-line!) tools: FFmpeg,
mjpeg_tools, dvdauthor, mkisofs and, above all, awk and sed.
&lt;br&gt;&lt;br&gt;
&lt;center&gt;
&lt;a href=&quot;#GTOC&quot;&gt;GTOC is your friend -- click and explore&lt;/a&gt;
&lt;/center&gt;
&lt;br&gt;&lt;br&gt;
Subtitles, are, of course, the most time consuming of the
two things on the list. Make sure you schedule at least
4 times as much as the running time of the material (which
for the typical movie means an entire working day) and
feel free to follow these simple instructions:
&lt;ol&gt;
  &lt;li&gt;Prepare a transcript for the video in the native language
  using a &lt;a href=&quot;&quot;&gt;SubRip&lt;/a&gt; format. I like it for simplicity
  it is just a text file with a very simple structure and it is also
  supported by 99% of the A/V tools. You can use any of the
  Free Software applications that are specifically designed for this purpose:
  GTK based &lt;a href=&quot;http://home.gna.org/subtitleeditor/&quot;&gt;Subtitleeditor&lt;/a&gt; and
  Java based &lt;a href=&quot;http://www.jubler.org/&quot;&gt;Jubler&lt;/a&gt; come readily
  to mind. Or you can simply start MPlayer and record timestamps
  by hand. Whatever works for you.&lt;/li&gt;

  &lt;li&gt;Now that you have your sub.srt file make sure that the timings
  in native language are reasonable. How much lag there has to be between
  something happening in the video/audio track and your subtitles is
  a matter of personal choice. Just make sure you are comfortable
  with it:
  &lt;code&gt;
    $ mplayer -sub sub.srt -font ~/.fonts/Arial.ttf video.mpeg
  &lt;/code&gt;&lt;/li&gt;

  &lt;li&gt;&lt;a name=&quot;GTOC1&quot;/&gt;
  It turns out that MPlayer is pretty liberal as far as glitches
  and bugs in subtitle file go. It is a good idea to at least check
  the file for timestamps being monotonous:
  &lt;code&gt;
  $ grep -- &quot;--&gt;&quot; sub.srt | tr -d &apos;:,&apos; | sed -e &apos;s#--&gt;#\n#&apos; |\
      awk   &apos;BEGIN { d=0; } 
                   { if ($0&amp;lt;d) { 
                       print $0 &quot;&lt;&quot; d; 
                     } else { 
                       d=$0; 
                     } }&apos;
  &lt;/code&gt;

  &lt;li&gt;Translation into English is next. Make sure that you
  don&apos;t go overboard with it though. Each subtitle should not be
  longer than 50 characters (80 characters max) and the duration
  for each of them shouldn&apos;t be smaller than 25 characters per minute.
&lt;/ol&gt;
&lt;a name=&quot;GTOC2&quot;/&gt;
Ok, you&apos;re done with subtitling. Next step is to create an NTSC DVD
from your PAL material. Now, in general video standard conversion
is a pretty complicated thing. Especially if it is done right using
motion estimated conversion algorithms. We, however, are going to
cheat a little. We won&apos;t be doing any real conversion per se, we
will just pretend that our PAL footage is progressive (if it is not
it needs to be deinterlaced) and as such is a good approximation
of a movie reel. 
&lt;br&gt;&lt;br&gt;
Movies run 24 frames per second, PAL runs at 25. All in all it is not 
that much of a strech really, although
a dreaded 
&lt;a href=&quot;http://www.mastersofcinema.org/bresson/Words/On_PALspeedup.html&quot;&gt;PAL speedup&lt;/a&gt; 
issue will crop up and it&apos;ll make us fiddle with the audio track.
Actually, in our case it&apos;ll be more appropriate to call it a &quot;PAL slowdown&quot;
issue and the only reason I&apos;m trading audio fidelity for video fidelity
here is because the audio track is in a foreign language to begin with.
Now, assuming that your original material is coming from a PAL DVD here&apos;s
what it takes to: deinterlace its VOBs, scale them to fit an NTSC
resolution and encode all that into a 2:3 pulldown flagged MPEG2:
&lt;code&gt;
$ ffmpeg -i &lt;(cat *.VOB) -f yuv4mpegpipe - |\
yuvdeinterlace  | yuvscaler -M BICUBIC -O SIZE_720x480 |\
mpeg2enc  -n n -f 8 -F 4  -a 2 -p -o /tmp/pal_slowdown.mpeg
&lt;/code&gt;
Once again -- the trick here is that we DO NOT change the framerate
by interpolating missing fields. We are encoding the NTSC DVD using
a &lt;a href=&quot;http://en.wikipedia.org/wiki/Telecine&quot;&gt;Telecine Process&lt;/a&gt; 
as though the original was a movie reel.
&lt;br&gt;&lt;br&gt;
&lt;a name=&quot;GTOC3_6&quot;/&gt;
Well, now that the movie got 25/24 (4.166%) longer we have to rescale
the audio track as well. Fortunately, the jack of all trades in
the audio kingdom -- Audacity has a special filter just for that.
It is called Change tempo and it usually works pretty well:
&lt;code&gt;
$ ffmpeg -i &lt;(cat *.VOB) /tmp/audio.wav
$ audacity /tmp/audio.wav # apply &quot;Change tempo&quot;
$ ffmpeg -i /tmp/audio.wav -ab 128000 /tmp/audio.mp2
$ rm /tmp/audio.wav
&lt;/code&gt;
&lt;a name=&quot;GTOC7&quot;/&gt;
Now all that left for you to do is to multiplex the new audio track
from the freshly minted /tmp/audio.mp2 and the newly encoded
MPEG2 from /tmp/pal_slowdown.mpeg into the, still subtitleless, MPEG2
stream /tmp/nosubs.mpeg:
&lt;code&gt;
$ mplex -f8 -o /tmp/nosubs.mpeg /tmp/pal_slowdown.mpeg /tmp/audio.mp2
&lt;/code&gt;
&lt;a name=&quot;GTOC8&quot;/&gt;
Ok, it seems like all we have left to do at this point is to multiplex
subtitles into the MPEG2 stream and enjoy an NTSC DVD in its full glory.
Well, there&apos;s a catch -- we have to stretch subtitles in the same way
we stretched audio track: all timestamps have to be multiplied by 
1.043:
&lt;code&gt;
cat sub.srt | awk &apos; \
function fwd(t) { split(t, ar, &quot;:&quot;);
                  split(ar[3], arr, &quot;,&quot;);
                  ar[3]=arr[1]; ar[4]=arr[2];
                  return ar[1]*60*60*1000+
                         ar[2]*60*1000+
                         ar[3]*1000+
                         ar[4];
                }
function rev(ts) { ts=ts/1000;
                   printf(&quot;%02d:%02d:%02d,%03d&quot;, 
                           (ts/(60*60*1000))%24, 
                              (ts/(60*1000))%60, 
                          (ts/1000)%60, ts%1000); 
                 } 
/--&gt;/ { rev(fwd($1)*1043); 
        printf &quot; --&gt; &quot; ; 
        rev(fwd($3)*1043); 
        print &quot;&quot;; 
        next;  
      } 
      { print $0; }&apos; &gt; slowed_down.srt
&lt;/code&gt;
&lt;a name=&quot;GTOC9_11&quot;/&gt;
Done. Next step -- embedding subtitles into an MPEG2 stream. We are going
to do this in style, though. We don&apos;t want to simply permanently burn
the image of subtitles onto each frame. We want them to behave like they
do on commercial DVDs: be switchable on/off from the remote control and
also be &quot;on&quot; by default. Fortunately, the tool from a dvdauthor package
called spumux is exactly the right tool for the job. Now in order for
it to work we have to give it an XML configuration file and also store
an appropriate TTF font in a ~/.spumux subdirectory (I like Bitstream&apos;s
Vera -- it looks nice and it is free):
&lt;code&gt;
$ cp ~/.fonts/Vera.ttf ~/.spumux/
$ cat spumux.xml
&amp;lt;subpictures&amp;gt;
   &amp;lt;stream&amp;gt;
      &amp;lt;textsub filename=&quot;slowed_down.srt&quot; characterset=&quot;ISO8859-1&quot;
         fontsize=&quot;25.0&quot; font=&quot;Vera.ttf&quot; 
         horizontal-alignment=&quot;center&quot;
         vertical-alignment=&quot;bottom&quot; 
         left-margin=&quot;60&quot; right-margin=&quot;60&quot;
         top-margin=&quot;20&quot; bottom-margin=&quot;30&quot; subtitle-fps=&quot;30&quot;
         movie-fps=&quot;30&quot; movie-width=&quot;720&quot; movie-height=&quot;480&quot;
      /&amp;gt;
   &amp;lt;/stream&amp;gt;
&amp;lt;/subpictures&amp;gt;
$ spumux -P  spumux.xml &lt; /tmp/nosubs.mpeg &gt; final.mpeg
&lt;/code&gt;
&lt;a name=&quot;GTOC12_14&quot;/&gt;
We&apos;re almost done. The very last step is to author a DVD content with a dvdauthor
utility and create an ISO image. Just as spumux, dvdauthor needs an XML 
configuration file and since we wanted our subtitles to be on by default
we have to instruct it to write into the register of the DVDs virtual machine
(yep, DVDs are just like Java -- they have a virtual machine). That&apos;s
what that weird looking subtitle=64; is there for:
&lt;code&gt;
$ cat dvd.xml
&amp;lt;dvdauthor&amp;gt;
    &amp;lt;vmgm /&amp;gt;
    &amp;lt;titleset&amp;gt;
        &amp;lt;titles&amp;gt;
            &amp;lt;pgc&amp;gt;
                &amp;lt;pre&amp;gt; subtitle=64; &amp;lt;/pre&amp;gt;
                &amp;lt;vob file=&quot;final.mpeg&quot; /&amp;gt;
            &amp;lt;/pgc&amp;gt;
        &amp;lt;/titles&amp;gt;
    &amp;lt;/titleset&amp;gt;
&amp;lt;/dvdauthor&amp;gt;
$ dvdauthor -o dvd -x dvd.xml
$ mkisofs -dvd-video -udf -o dvd.iso -V RomanProductions ./dvd
&lt;/code&gt;
Done! Go ahead, burn a bunch of DVD-R and start introducing your
American friends into the wonderful world of totally foreign
things.
&lt;br&gt;&lt;br&gt;
&lt;hr&gt;
&lt;pre&gt;
&lt;a name=&quot;GTOC&quot;/&gt;
&lt;a href=&quot;#GTOC1&quot;&gt;linux(1)&lt;/a&gt;&gt; grep -- &quot;--&gt;&quot; sub.srt | tr -d &apos;:,&apos; | sed -e &apos;s#--&gt;#\#&apos; |\
awk   &apos;BEGIN { d=0; } { if ($0&lt;d) { print $0 &quot;&lt;&quot; d; } else { d=$0; } }&apos;             
&lt;a href=&quot;#GTOC2&quot;&gt;linux(2)&lt;/a&gt;&gt; ffmpeg -i &lt;(cat *.VOB) -f yuv4mpegpipe - |\
yuvdeinterlace  | yuvscaler -M BICUBIC -O SIZE_720x480 |\
mpeg2enc  -n n -f 8 -F 4  -a 2 -p -o /tmp/pal_slowdown.mpeg
&lt;a href=&quot;#GTOC3_6&quot;&gt;linux(3)&lt;/a&gt;&gt; ffmpeg -i &lt;(cat *.VOB) /tmp/audio.wav
&lt;a href=&quot;#GTOC3_6&quot;&gt;linux(4)&lt;/a&gt;&gt; audacity /tmp/audio.wav # apply &quot;Change tempo&quot;
&lt;a href=&quot;#GTOC3_6&quot;&gt;linux(5)&lt;/a&gt;&gt; ffmpeg -i /tmp/audio.wav -ab 128000 /tmp/audio.mp2
&lt;a href=&quot;#GTOC3_6&quot;&gt;linux(6)&lt;/a&gt;&gt; rm /tmp/audio.wav
&lt;a href=&quot;#GTOC7&quot;&gt;linux(7)&lt;/a&gt;&gt; mplex -f 8 -o /tmp/nosubs.mpeg /tmp/pal_slowdown.mpeg /tmp/audio.mp2
&lt;a href=&quot;#GTOC8&quot;&gt;linux(8)&lt;/a&gt;&gt; cat sub.srt | awk &apos; \
function fwd(t) { split(t, ar, &quot;:&quot;);
                  split(ar[3], arr, &quot;,&quot;);
                  ar[3]=arr[1]; ar[4]=arr[2];
                  return ar[1]*60*60*1000+ar[2]*60*1000+ar[3]*1000+ar[4];
                }
function rev(ts) { ts=ts/1000;
                   printf(&quot;%02d:%02d:%02d,%03d&quot;, 
                           (ts/(60*60*1000))%24, 
                              (ts/(60*1000))%60, 
                          (ts/1000)%60, ts%1000); 
                 } 
/--&gt;/ { rev(fwd($1)*1043); 
        printf &quot; --&gt; &quot; ; 
        rev(fwd($3)*1043); 
        print &quot;&quot;; 
        next;  
      } 
      { print $0; }&apos; &gt; slowed_down.srt
&lt;a href=&quot;#GTOC9_11&quot;&gt;linux(9)&lt;/a&gt;&gt; cp ~/.fonts/Vera.ttf ~/.spumux/
&lt;a href=&quot;#GTOC9_11&quot;&gt;linux(10)&lt;/a&gt;&gt; cat spumux.xml
&amp;lt;subpictures&amp;gt;
   &amp;lt;stream&amp;gt;
      &amp;lt;textsub filename=&quot;slowed_down.srt&quot; characterset=&quot;ISO8859-1&quot;
         fontsize=&quot;25.0&quot; font=&quot;Vera.ttf&quot; horizontal-alignment=&quot;center&quot;
         vertical-alignment=&quot;bottom&quot; left-margin=&quot;60&quot; right-margin=&quot;60&quot;
         top-margin=&quot;20&quot; bottom-margin=&quot;30&quot; subtitle-fps=&quot;30&quot;
         movie-fps=&quot;30&quot; movie-width=&quot;720&quot; movie-height=&quot;480&quot;
      /&amp;gt;
   &amp;lt;/stream&amp;gt;
&amp;lt;/subpictures&amp;gt;
&lt;a href=&quot;#GTOC9_11&quot;&gt;linux(11)&lt;/a&gt;&gt; spumux -P  spumux.xml &lt; /tmp/nosubs.mpeg &gt; final.mpeg
&lt;a href=&quot;#GTOC12_14&quot;&gt;linux(12)&lt;/a&gt;&gt; cat dvd.xml
&amp;lt;dvdauthor&amp;gt;
    &amp;lt;vmgm /&amp;gt;
    &amp;lt;titleset&amp;gt;
        &amp;lt;titles&amp;gt;
            &amp;lt;pgc&amp;gt;
                &amp;lt;pre&amp;gt; subtitle=64; &amp;lt;/pre&amp;gt;
                &amp;lt;vob file=&quot;final.mpeg&quot; /&amp;gt;
            &amp;lt;/pgc&amp;gt;
        &amp;lt;/titles&amp;gt;
    &amp;lt;/titleset&amp;gt;
&amp;lt;/dvdauthor&amp;gt;
&lt;a href=&quot;#GTOC12_14&quot;&gt;linux(13)&lt;/a&gt;&gt; dvdauthor -o dvd -x dvd.xml
&lt;a href=&quot;#GTOC12_14&quot;&gt;linux(14)&lt;/a&gt;&gt; mkisofs -dvd-video -udf -o dvd.iso -V RomanProductions ./dvd
&lt;/pre&gt;</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/gridbaglayout_for_the_computer_scientists</guid>
    <title>GridBagLayout for the Computer Scientists</title>
    <dc:creator>rvs</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/gridbaglayout_for_the_computer_scientists</link>
        <pubDate>Fri, 30 May 2008 12:01:47 -0700</pubDate>
    <category>Elegant Computing</category>
            <description>I am by no means a hardcore GUI programmer. The best I&apos;ve done is a couple of quick hacks written in Tcl/Tk. And even that somehow left me with an uneasy
feeling that &quot;things could have been better&quot;. One area that&apos;s always bothered me is how monolithic GUI components tend to be. This is especially
problematic in the day and age of mobile, decentralized computing (why can&apos;t my A/V remote &quot;jump&quot; back and forth between my cell phone and my PDA?). This
is a tough problem to tackle and the best attempt at resolving this seems to be a research project from Laboratorio de Sistemas 
Universidad Rey Juan Carlos &lt;a href=&quot;http://ieeexplore.ieee.org/iel5/10682/33716/01604797.pdf?arnumber=1604797&quot;&gt;Omero: Ubiquitous User Interface&lt;/a&gt;.
&lt;br&gt;&lt;br&gt;
The next biggest issue is how difficult it tends to be when it comes to specifying the desired visual style of the GUI layout. Especially
under dynamic constraints such as changing window sized and DPIs. Regardless of toolkits and platforms, the layout managers always end up either
&lt;a href=&quot;http://java.sun.com/j2se/1.4.2/docs/api/java/awt/GridLayout.html&quot;&gt;too simplistic and dumb&lt;/a&gt; or 
&lt;a href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/layout/gridbag.html&quot;&gt;downright esoteric&lt;/a&gt;. There&apos;s got to be a better way! 
&lt;a href=&quot;https://www.se.auckland.ac.nz/uploads/trReports/UoA-SE-2007-6.pdf&quot;&gt;And there is&lt;/a&gt;. 
&lt;br&gt;&lt;br&gt;Don&apos;t mind its scary title, the idea behind
the approach is pure elegance: the layout is all about virtual grids (to which all object align) and the user defined constraints for
how the grid cells related to each other. Of course, with the typical constraint being X is supposed to be twice as large as Y these constraints
are of a nice, linear kind. Once the user is done specifying the constraints the solution actually comes from the computer (ain&apos;t it what
computers are good for?). What&apos;s even better it can be easily recalculated under changing conditions without *any* feedback from the application.
&lt;a href=&quot;http://www.cs.auckland.ac.nz/~lutteroth/projects/alm&quot;&gt;The Auckland Layout Model&lt;/a&gt; just works. Their 
&lt;a href=&quot;http://www.cs.auckland.ac.nz/~lutteroth/projects/alm/examples/index.html&quot;&gt;example page&lt;/a&gt; is pretty convincing, even if 
the syntax desperately needs sweetening. Definitely this stuff is worth keeping an eye on!</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/deconstructing_opensolaris_livecd</guid>
    <title>Deconstructing OpenSolaris LiveCD</title>
    <dc:creator>rvs</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/deconstructing_opensolaris_livecd</link>
        <pubDate>Mon, 26 May 2008 19:38:24 -0700</pubDate>
    <category>LIN(U[ni]X)</category>
    <atom:summary type="html">I still remember the coolness factor that the first fully functional and user friendly &lt;a href=&quot;http://en.wikipedia.org/wiki/Knoppix&quot;&gt;LiveCD with Linux&lt;/a&gt; had.
From a technical stand point it wasn&apos;t really that much of a novel concept (all major Linux distributors
had a capability of booting into a function Linux kernel for the installation and troubleshooting purposes)
but as everything with Linux -- it had some significant social implications. What 
&lt;a href=&quot;http://en.wikipedia.org/wiki/Klaus_Knopper&quot;&gt;Klaus Knopper&lt;/a&gt; singlehandlely changed was
not what Linux was capable of, but rather how it presented itself for the first time. All of a sudden just about anybody
could take it for a spin. It got friendlier, it got less intrusive and even if you didn&apos;t like it -- hey, at least it 
hadn&apos;t made you slave away for a day installing it (and trashing your Windows partition along the way). Fast forward
to 2008 and you can see that one of the most prevalent Linux distributions, Ubuntu, still uses ideas from Knoppix 
to advance Linux adoption. Life is good, if only... boring. Yep, that&apos;s right -- there&apos;s nothing exciting about 
a Linux LiveCD from major vendors anymore. It is polished, mature and leaves nothing to blog about. Not to worry 
though, with the Project Indiana debuting its &lt;a href=&quot;http://www.opensolaris.com/get/index.html&quot;&gt;live CD&lt;/a&gt; 
of OpenSolaris a couple of weeks ago we now have a brand new frog to dissect and marvel at.</atom:summary>        <description>I still remember the coolness factor that the first fully functional, user friendly &lt;a href=&quot;http://en.wikipedia.org/wiki/Knoppix&quot;&gt;LiveCD with Linux&lt;/a&gt; had.
From a technical stand point it wasn&apos;t really that much of a novel concept (all major Linux distributors
had a capability of booting into a function Linux kernel for the installation and troubleshooting purposes)
but as everything with Linux -- it had some significant social implications. What 
&lt;a href=&quot;http://en.wikipedia.org/wiki/Klaus_Knopper&quot;&gt;Klaus Knopper&lt;/a&gt; singlehandlely changed was
not what Linux was capable of, but rather how it presented itself for the first time. All of a sudden just about anybody
could take it for a spin. It got friendlier, it got less intrusive and even if you didn&apos;t like it -- hey, at least it 
hadn&apos;t made you slave away for a day installing it (and trashing your Windows partition along the way). Fast forward
to 2008 and you can see that one of the most prevalent Linux distributions, Ubuntu, still uses ideas from Knoppix 
to advance Linux adoption. Life is good, if only... boring. Yep, that&apos;s right -- there&apos;s nothing exciting about 
a Linux LiveCD from major vendors anymore. It is polished, mature and leaves nothing to blog about. Not to worry 
though, with the Project Indiana debuting its &lt;a href=&quot;http://www.opensolaris.com/get/index.html&quot;&gt;Live CD&lt;/a&gt; 
of OpenSolaris a couple of weeks ago we now have a brand new frog to dissect and marvel at.
&lt;br&gt;&lt;br&gt;
&lt;stomachnote&gt;
NOTE: This article is the first one on my blog using GTOC: Geek&apos;s Table Of Contents. A
concept pioneered by &lt;a href=&quot;http://www.linuxjournal.com/article/10038&quot;&gt;Mick Bauer&lt;/a&gt;.
On one hand, GTOC is nothing but a cleaned up version of my UNIX session. On the other
hand it is the quickest way to figure out whether the article has something of an interest
to you or not. Here&apos;s how I use GTOC: I follow the stream of UNIX commands until
I exclaim: &quot;I didn&apos;t know that was possible!&quot;. At that point it might be useful to follow
the article. If you don&apos;t exclaim (not once!), then perhaps the added value
of my ramblings and musings would be too small to justify wasting your time. At any rate:
the decision is yours. GTOC is small, easy to follow an best of all -- it is crosslinked 
to the actual content of the article.
&lt;/stomachnote&gt;
&lt;br&gt;&lt;br&gt;
&lt;h3&gt;0. GTOC&lt;/h3&gt;
&lt;a href=&quot;#GTOC&quot;&gt;Don&apos;t be a jock -- jump to the GTOC!&lt;/a&gt;
&lt;br&gt;&lt;br&gt;
&lt;h3&gt;&lt;a name=&quot;GTOC1_5&quot;&gt;1. First impression&lt;/a&gt;&lt;/h3&gt;
First thing one notices (right after the brand new &quot;we-are-the-bubbly-in-the-.com-bubble&quot; logo) is that Windows
sometimes has troubles reading the LiveCD. Once you look at the file layout it isn&apos;t all that difficult to see why:
OpenSoalris team has decided to really make the most out of what an ISO9660 filesystem is capable of. The CD has
files with long names containing &apos;@&apos; and &apos;:&apos; characters, it has symbolic links and all sorts of other stuff. 
In fact, the only thing missing from it are device and pipe nodes (not that ISO9660 would permit it, but you&apos;ve got the idea):
&lt;code&gt;
$ sudo mount /tmp/os200805.iso /mnt -o ro,loop
$ find /mnt \! -type d -a \! -type f -exec ls -go  {} \;
lrwxrwxrwx 1  9 Apr 26 18:43 /mnt/bin -&gt; ./usr/bin
lrwxrwxrwx 1 30 Apr 26 18:43 /mnt/boot/solaris/bin/root_archive -&gt; 
                             ../../../usr/sbin/root_archive
lrwxrwxrwx 1 11 Apr 26 19:03 /mnt/dev/nvidia0 -&gt; fbs/nvidia0
lrwxrwxrwx 1 11 Apr 26 19:03 /mnt/dev/nvidia1 -&gt; fbs/nvidia1
lrwxrwxrwx 1 11 Apr 26 19:02 /mnt/dev/nvidia2 -&gt; fbs/nvidia2
lrwxrwxrwx 1 11 Apr 26 19:02 /mnt/dev/nvidia3 -&gt; fbs/nvidia3
lrwxrwxrwx 1 11 Apr 26 19:02 /mnt/dev/nvidia4 -&gt; fbs/nvidia4
lrwxrwxrwx 1 11 Apr 26 19:02 /mnt/dev/nvidia5 -&gt; fbs/nvidia5
lrwxrwxrwx 1 11 Apr 26 19:02 /mnt/dev/nvidia6 -&gt; fbs/nvidia6
lrwxrwxrwx 1 11 Apr 26 19:02 /mnt/dev/nvidia7 -&gt; fbs/nvidia7
lrwxrwxrwx 1 38 Apr 26 19:02 /mnt/dev/nvidiactl -&gt; 
                              ../devices/pseudo/nvidia@255:nvidiactl
lrwxrwxrwx 1  6 Apr 26 18:42 /mnt/dev/stderr -&gt; ./fd/2
lrwxrwxrwx 1  6 Apr 26 18:42 /mnt/dev/stdin -&gt; ./fd/0
lrwxrwxrwx 1  6 Apr 26 18:42 /mnt/dev/stdout -&gt; ./fd/1
&lt;/code&gt;
Speaking of ISO9660 lacking device nodes, notice how all the symbolic links in /dev are dangling. They
have nothing to point to. In fact, if you look at the root of the CD you may notice that /dev and /bin are not
the only indications of it trying to be an actual FS for running Solaris. There&apos;s also:
&lt;b&gt;/.cdrom, /devices, /jack, /mnt, /proc, /system&lt;/b&gt; and my personal favorite &lt;b&gt;/tmp&lt;/b&gt;. Oh, oh,
and there&apos;s also &lt;b&gt;/root&lt;/b&gt; which I, frankly, have nothing against, but I&apos;m sure all dyed-in-the-wool
Solaris admins are going to appreciate. Immensely. ;-) But anyway, it really seems like the business with
trying to coerce ISO9660 into being a good root filesystem is flawed on two accounts:
&lt;ol&gt;
   &lt;li&gt;ISO9660 just isn&apos;t a good enough FS to be used as a UNIX root filesystem&lt;/li&gt;
   &lt;li&gt;Everybody and their uncle (that would be OpenSolaris) uses ramdisks for root FSes anyway. 
       There&apos;s one on the OpenSolaris&apos;s LiveCD: /boot/x86.microroot. And it is the one that matters&lt;/li&gt;
&lt;/ol&gt;
It seems, there&apos;s really very little need for anything but &lt;b&gt;/boot, /platform, /solaris.zlib&lt;/b&gt; and &lt;b&gt;/solarismisc.zlib&lt;/b&gt;
to be on the LiveCD. In reality, &lt;b&gt;/jack&lt;/b&gt; and &lt;b&gt;/root&lt;/b&gt; are also needed and if
you would like to install from the LiveCD you&apos;d also need &lt;b&gt;/.image_info&lt;/b&gt; and
&lt;b&gt;/.catalog&lt;/b&gt;. Oh, and to apease the mighty lawyers: you really need &lt;b&gt;/COPYRIGHT&lt;/b&gt; and &lt;b&gt;/LICENSE&lt;/b&gt;. 
Everything else can be pretty much cut out of the LiveCD without compromising its functionality.
&lt;br&gt;&lt;br&gt;
&lt;h3&gt;2. The challenge&lt;/h3&gt;
Deconstruction is cool. Just ask &lt;a href=&quot;http://en.wikipedia.org/wiki/Deconstruction&quot;&gt;Derrida&lt;/a&gt; if you don&apos;t believe me. Although
in my book creating something is even cooler. So lets see if we can construct a LiveUSB with OpenSolaris while deconstructing the Live CD.
Why? Well, mainly to show-off, to learn more about its structure and also to let me finally install OpenSolaris on the
tablet that lacks a CD drive. 
&lt;br&gt;&lt;br&gt;
&lt;h3&gt;3. The prep work&lt;/h3&gt;
We still need to do a bit of prepwork and sleuthing around the content of the LiveCD before we understand it well enough. Three files
on it seem to be of a particular interest: &lt;b&gt;/solaris.zlib, /solarismisc.zlib&lt;/b&gt; and &lt;b&gt;/boot/x86.microroot&lt;/b&gt;.They look suspicious:
they are big, they don&apos;t have a well known type (/usr/bin/file simply says &quot;data&quot;) and the last one is mentioned in /boot/grub/menu.lst
as a module.
&lt;stomachnote&gt;
&lt;b&gt;A crash course in bootstrapping:&lt;/b&gt; when you power on any modern computer the first thing that gets exectued is BIOS.
It first takes care of some really basic low-level hardware configuration. Then it tries to figure out where to get the
software that is supposed to run on the machine. Finally it loads it up and relinquished the control. Once the dust settles
we find our computer running an operating system of some sorts. Although not everybody realizes, that BIOS almost never
loads up a kernel of any operating system. What it loads up instead is a intermediary piece of code known as a bootloader.
Bootloader lets you have a higher degree of control over what particular kernel gets loaded for real and what arguments get passed to it (OS kernels are a bit like applications in that respect,
they have command line arguments as well).
Simply put: bootloader is what makes it possible for Windows, Solaris, Linux, Plan9 and any other OS to peacefully co-exist
on the same hardware. Not only that it lets the user decide what gets loaded. And how. That &quot;how&quot; question is a bit trickier 
than it appears. You see, any storage device is nothing but an array of numbered sectors filled with information. At least
at the level of BIOS there&apos;s no such concept as a filesystem -- just an endless stream of blocks. That means, if you
want to load a kernel that is stored as a file you have to teach your bootloader how to &quot;mount&quot; the filesystem that stores
it. Modern bootloaders thus become a micro operating systems, capable of some degree of file operations and running a limited shell
(I guess, it is the closest one can come to what a proto-UNIX must have felt like in 70s). GRUB is a bootloader that does
exactly that. Although it is quite far from being an elegant piece of software (to say the least) it gets the job done via
the following 3 commands: &lt;b&gt;root&amp;nbsp;([device])&lt;/b&gt; is used to &quot;mount&quot; any partition of any of your storage devices, just 
like &lt;b&gt;mount&amp;nbsp;[device]&amp;nbsp;/mnt&lt;/b&gt; would do in real UNIX; &lt;b&gt;kernel&amp;nbsp;/path/to/the/file/with/kernel&lt;/b&gt; copies the kernel into memory;
&lt;b&gt;module&amp;nbsp;/path/to/the/file/with/auxilary/kernel/data&lt;/b&gt; does what its name implies -- it copies content of a file
into memory and passes the kernel a pointer to it; and finally there&apos;s &lt;b&gt;boot&lt;/b&gt; which simply transfers control over to
the kernel and thus &quot;exits&quot; the bootloader. Once again, notice that the magic of GRUB being a micro operating systems
makes all the file names be real file names in whatever filesystem they happen to reside on. You can access anything
ranging from FAT all the way to ZFS, just the same way you would access these files once the OS is up and running. This is
quite exciting if you ask me, and if it wasn&apos;t for the GRUB being as sucky as it is life would be very, very good. 
&lt;/stomachnote&gt;
Here&apos;s a sequence of events that happen when you insert a bootable OpenSolaris LiveCD into your CD drive and power-on your desktop:
&lt;ol&gt;
  &lt;li&gt;BIOS gets executed and initializes the low-level system hardware&lt;/li&gt;
  &lt;li&gt;You select your CD drive as a boot device by hitting a well-known (for your BIOS, anyway) key&lt;/li&gt;
  &lt;li&gt;BIOS loads a a couple of sectors from the LiveCD (more on how it works 
      &lt;a href=&quot;http://en.wikipedia.org/wiki/El_Torito_%28CD-ROM_standard%29&quot;&gt;here&lt;/a&gt;) and starts executing that code&lt;/li&gt;
  &lt;li&gt;The code happens to be GRUB and the first thing it does is it loads /boot/grub/menu.lst and presents you with
      a set of options of what to boot&lt;/li&gt;
  &lt;li&gt;Each option corresponds to a section in the /boot/grub/menu.lst that looks like this:
      &lt;pre&gt;
       title OpenSolaris 2008.05
           kernel$ /platform/i86pc/kernel/$ISADIR/unix
           module /boot/x86.microroot
      &lt;/pre&gt;
      and selecting it makes GRUB execute commands: &lt;b&gt;kernel$, module&lt;/b&gt; and finally &lt;b&gt;boot&lt;/b&gt;. There&apos;s no magic. In fact,
      instead of selecting an item from the menu you can press &apos;c&apos;, get to the GRUB shell and manually enter the same
      commands&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;kernel$&lt;/b&gt; places the content of the file under /platform/... into the well-known memory location and &lt;b&gt;module&lt;/b&gt;
      does the same for /boot/x86.microroot. That&apos;s why these two files are important to us. Although the later much more
      so than the former&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;boot&lt;/b&gt; (either implicit or explicit) starts executing the kernel&lt;/li&gt;
&lt;/ol&gt;
&lt;a name=&quot;GTOC6_8&quot;/&gt;
The &lt;b&gt;/boot/x86.microroot&lt;/b&gt; is, to some extent, our gift to the kernel. It is our way of matching the kernel with
the &quot;user land&quot; counterpart thus creating an image of the Operating System. In short, &lt;b&gt;/boot/x86.microroot&lt;/b&gt; usually
holds an image of a filesystem that gets mounted as the root (/). Lets take a look at what OpenSolaris has decided
to put inside the &lt;b&gt;/boot/x86.microroot&lt;/b&gt;:
&lt;code&gt;
$ file /mnt/boot/x86.microroot
/mnt/boot/x86.microroot: gzip compressed data - deflate method
$ gzip -dc &lt; /mnt/boot/x86.microroot &gt; /tmp/image
$ file /tmp/image
/tmp/image: Unix Fast File system (little-endian), 
last mounted on /export/home/indiana/proto/boot, 
last written at Sat Apr 26 19:21:20 2008, 
clean flag 1, number of blocks 181800, 
number of data blocks 170535, 
number of cylinder groups 38, block size 8192, 
fragment size 1024, minimum percentage of free blocks 0, 
rotational delay 0ms, disk rotational speed 120rps, 
TIME optimization
&lt;/code&gt;
Nice! Not only does the output tell us what filesystem it is (UFS) but
it also suggests that the Indiana team was on a rather short schedule
(this FS was last mounted on 26 of Apr 2008 which gave them about a week for
the production cycle) and they were working night shifts (19:21:20)
on weekends (26th happens to be Saturday). Way to go! 
&lt;br&gt;
Now, the UFS filesystem is still a bit obscure (although it has been used as the 
default FS in Solaris for ages) but it seems that the latest versions
of Linux kernel have no troubles mounting it natively. This is great -- it
makes it much easier to browse through the files there and understand 
what happens once the kernel is up and running and &lt;b&gt;/boot/x86.microroot&lt;/b&gt;
is mounted as a root filesystem. As any UNIX 101 will tell you the first
process that gets created is &lt;b&gt;/sbin/init&lt;/b&gt;. It used
to be controlled by the content of &lt;b&gt;/etc/inittab&lt;/b&gt;, but these days
the real work happens elsewhere. On Linux, scripts specified under 
&lt;b&gt;/etc/rc.d/&lt;/b&gt; are the place to look. In fact, we used to have the
same mechanism on older versions of Solaris as well, but at some point
it was decided that in order for the OS to be accepted by the Web2.0 
generation it just has to have a pinch of XML here and there. The 
&lt;a href=&quot;http://opensolaris.org/os/community/smf/smf-lisa.pdf&quot;&gt;SMF&lt;/a&gt;
was born with actual scripts migrating to &lt;b&gt;/lib/svc/method/&lt;/b&gt;, 
&lt;b&gt;/lib/svc/bin/svc.startd&lt;/b&gt; being the headman for them and the
rest of the architecture intoxicated by sqllite and XML being too 
scary to be describe here. What matter for us, though, is that once
the control is passed to the Solaris kernel for the first time 
the following sequence unfolds:
&lt;ol&gt;
   &lt;li&gt;kernel mounts the content of the module as its root filesystem&lt;/li&gt;
   &lt;li&gt;kernel starts executing /sbin/init&lt;/li&gt;
   &lt;li&gt;/sbin/init consults /etc/inittab and starts executing /lib/svc/bin/svc.startd&lt;/li&gt;
   &lt;li&gt;/lib/svc/bin/svc.startd executes a bunch of scripts from /lib/svc/method&lt;/li&gt;
   &lt;li&gt;one of these scripts will mount a bunch of real filesystems&lt;/li&gt;
   &lt;li&gt;eventually one of the scripts from /lib/svc/method gives you a login promt of some sorts&lt;/li&gt;
&lt;/ol&gt;
&lt;a name=&quot;GTOC9_11&quot;/&gt;
The mounting of real stuff is important so lets see if we can understand
how LiveCD behaves in that respect.
&lt;code&gt;
$ sudo mount /tmp/image /mnt -o loop,ro,ufstype=sunx86
$ ls /mnt/etc/fs /mnt/usr/lib/fs
/mnt/etc/fs:
dev/   hsfs/  nfs/   ufs/   zfs/

/mnt/usr/lib/fs:
hsfs/  ufs/
$ cd /mnt/lib/svc/method
$ grep mount *
....
live-fs-root
live-fs-usr
live-devices-local
live-sysidtool-system
....
$ 
&lt;/code&gt;
There&apos;s good news and bad news. The good news is that &lt;b&gt;live-fs-root&lt;/b&gt; and &lt;b&gt;live-fs-usr&lt;/b&gt; seem
to be exactly the scripts we are looking for. The bad news is that the Solaris kernel on the LiveCD
only supports these filesystems: &lt;b&gt;dev, hsfs, nfs, ufs, zfs&lt;/b&gt;. Yep, that&apos;s right the common 
denominator of all, the FAT, the venerable MS DOS and Windows filesystem is missing. That
pretty much rules out a possibility of easily creating our USB memory stick image (more
on that later) and is a first huge oversight on the part of whoever created the LiveCD. They
really don&apos;t have any excuses here: pcfs module is tiny and not including it is much more
trouble than it is worth. But anyway, lets see what the live- scripts can tell us. Here&apos;s
an interesting portion of the first one:
&lt;pre&gt;
        # Determine if any of the USB devices contains a UFS filesystem.
        # For devices that do, attempt to mount them to see if the
        # compressed /usr filesystem exists

        /sbin/listusb | while read dev rdev
        do
                /usr/lib/fs/ufs/fstyp $rdev 2&gt;&amp;1 | grep &quot;^ufs$&quot;
                if [ $? -eq 0 ]
                then
                        /sbin/mount -F ufs -o nologging,noatime $dev /.cdrom
                        if [ -f /.cdrom/solaris.zlib ]
                        then
                                echo &quot;&quot; &gt; /.liveusb
                                break
                        else
                                /sbin/umount -f $dev
                                continue
                        fi
                fi
        done

        # ..Else look for CD
        [ ! -f /.liveusb ] &amp;&amp; /sbin/listcd | while read dev rdev
        do
                /usr/lib/fs/hsfs/fstyp -v $rdev 2&gt;&amp;1 | grep &quot;Volume id: $volumeid&quot;
                if [ $? -eq 0 ]
                then
                        /sbin/mount -F hsfs -o ro $dev /.cdrom || break
                fi
        done
&lt;/pre&gt;
More good news, it appears that USB is being taken into account by default. This means that
in theory we don&apos;t have to hack the x86.microroot, although in practice we will be better off
doing it anyway (more on that later). Those brave souls who want to explore the option
of formating their USB memory sticks with UFS, or, gasp! ZFS filesystems can use everything
as-is. For now, lets keep following the breadcrumb trail leading us to the mysterious 
.zlib files:
&lt;pre&gt;
        # Explictly create lofi devices for solaris.zlib and
        # solarismisc.zlib

        /usr/sbin/lofiadm -a /.cdrom/solaris.zlib /dev/lofi/1
        /sbin/mount -F hsfs -o ro /dev/lofi/1 /usr
        if [ $? -ne 0 ]
        then
                echo &quot;/usr MOUNT FAILED!&quot;
                exit $SMF_EXIT_ERR_FATAL
        fi

        /usr/sbin/lofiadm -a /.cdrom/solarismisc.zlib /dev/lofi/2

        /sbin/mount -F hsfs -o ro /dev/lofi/2 /mnt/misc
&lt;/pre&gt;
Aha! These two weird looking files are nothing but compressed images of the ISO9660 filesystems
and they get mounted under /usr and /mnt/misc. &quot;Wait a minute!&quot;, I hear you say, &quot;doesn&apos;t it
make them compressed images of CD roms?&quot;. It sure does. And when you think about it,
it sort of makes sense. Unfortunately, Solaris doesn&apos;t support the same wide array of
filesystems as Linux does, so out of the ones it supports ISO9660 is the best one for
any read-only device: it lets you optimize the layout of files and it is quite
compression friendly. Speaking of compression: it would be awfully nice to mount these
two files for ease of inspection, but we can&apos;t. Not just yet. We have to decompress them
first. It is &lt;a href=&quot;http://docs.sun.com/app/docs/doc/819-2240/lofiadm-1m?a=view&quot;&gt;relatively easy&lt;/a&gt;
to do so on Solaris, but it is NOT the true hacker&apos;s way. Lets see if we can grok the internal format
of these files and write a native decompresser. Now, with OpenSolaris being open source, there&apos;s
not much hacking that needs to be done in order to uncover what the format is. Just 
&lt;a href=&quot;http://cvs.opensolaris.org/source/xref/onnv/onnv-gate/usr/src/uts/common/io/lofi.c&quot;&gt;Use the source, Luke! Use the source!&lt;/a&gt;
&lt;a name=&quot;GTOC13_18&quot;/&gt;
Armed with the first hand knowledge it was only a matter of half an hour before the
&lt;a href=&quot;http://blogs.sun.com/rvs/resource/delofi.c&quot;&gt;delofi decompresser&lt;/a&gt; was produced and put to a good use:
&lt;code&gt;
$ cc delofi.c -o delofi -lz
$ ./delofi /mnt/solarismisc.zlib /tmp/solarismisc.image
Compression method: gzip; uncomressed block size: 0x20000; 
                    # of blocks: 1115; 
                    size of last block: 0x1e000
Can&apos;t read block 1114
$ ./delofi /mnt/solaris.zlib /tmp/solaris.image
Compression method: gzip; uncomressed block size: 0x20000; 
                    # of blocks: 14978; 
                    size of last block: 0x19000
Can&apos;t read block 14977
$ file /tmp/solarismisc.image /tmp/solaris.image
/tmp/solarismisc.image: ISO 9660 CD-ROM filesystem data &apos;compress&apos;
/tmp/solaris.image: ISO 9660 CD-ROM filesystem data &apos;compress&apos;
$ ls -log /tmp/solarismisc.image /tmp/solaris.image
-rwxrwxr-x 1 1963036809 May 21 18:19 /tmp/solaris.image
-rwxrwxr-x 1  146006016 May 21 18:13 /tmp/solarismisc.image
&lt;/code&gt;
For some reason the last block of both files appears to be corrupted. Its either that
or a bug in delofi.c. And I stand by my code! Although, despite what it may look
like the images do get mounted just fine and browsing through them reveals that
they actually hold content of /usr and /opt. Basically, they are what makes this
a LiveCD instead of just an installation media. So how does this compare with
SquashFS -- a default way of organizing a read-only optimized and compressed 
filesystem on Linux? The good news is that on the compression side we&apos;re not
too bad: just a tiny 10% worse. Where it gets a bit more problematic is
access times. Solaris&apos;s implementation compresses at a block device level, where
SquashFS is a full fledged filesystem and Linux is not shy to take advantage of
that. Linux is also capable of compressing using LZMA, where Solaris is stuck
with older LZW (LZMA is in the works, though).
&lt;br&gt;
&lt;a name=&quot;GTOC12&quot;/&gt;
Do we need to know anything else about the default root filesystem from 
x86.microroot? How about what accounts are available there -- we will
have to login into the box once the kernel is booted, after all:
&lt;code&gt;
$ cat /mnt/etc/shadow
root:wqy8hz4xKqw4o:13817::::::
jack:9Nd/cwBcNWFZg:13817::::::
&lt;/code&gt;
Its nice to see that 
&lt;a href=&quot;http://web.archive.org/web/20040709234402/http://www.sun.com/aboutsun/media/features/insidejack.html&quot;&gt;Jack&lt;/a&gt;
has made it onto the LiveCD of Solaris as a default
user, but what is a bit of a shocker is that both of the accounts: root and jack
are password protected. Password protecting anything on the LiveCD is a bit
like installing a military grade security system on one of 
&lt;a href=&quot;http://www.taiwanho.com/gallery/temples/zhinan_temple_taoist_gate&quot;&gt;these gates&lt;/a&gt;.
Although it didn&apos;t take &lt;a href=&quot;http://www.openwall.com/john/&quot;&gt;John the ripper&lt;/a&gt; too
long to find out that jack&apos;s password is jack and root&apos;s password is opensola (which
I believe was meant to be opensolaris, but the default /etc/shadow only groks the
first 8 characters anyway) it left a bit of a strange feeling. Similar oversights, like
&lt;ol&gt;
   &lt;li&gt;having a DTrace toolkit down at /opt/DTT but not having a /usr/sbin/dtrace to
       go with it&lt;/li&gt;
   &lt;li&gt;including a full-blown version of medialib in /opt/SUNWmlib&lt;/li&gt;
   &lt;li&gt;not including the very basic UNIX commands like ps and more&lt;/li&gt;
   &lt;li&gt;not inlcuding a swiss-army knife like a 
       &lt;a href=&quot;http://busybox.net/&quot;&gt;BusyBox&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt; just to name a few, suggest a semi-automatic generation of x86.microroot.
Quite unlike a lovingly handcrafted Knoppix, but for the first try -- it is ok. 
I would, however, definetly be interested in seeing a dedicated hacker tacking
a stab at making x86.microroot a bit more elegant and lean. Hopefuly
my example of adding pcfs support to it will spur some interest in that area. 
&lt;br&gt;&lt;br&gt;
&lt;h3&gt;4. The plan&lt;/h3&gt;
Ok, now that we&apos;ve amassed  all that knowledge of how OpenSolaris LiveCD is structured,
lets see if we can setup a 1Gb USB memory stick in such a way that we don&apos;t destroy any existing data on it, but still
have its Master Boot Record occupied by GRUB with a capability of booting into Open Solaris LiveCD environment.
&lt;br&gt;&lt;br&gt;
&lt;a name=&quot;GTOC33_35&quot;/&gt;
Now, we all know that the bootloaders typically occupy the first 512bytes of any storage device. They are embeded into
the 1st sector together with the root partition table. Of course, the problem here is that you can&apos;t really do much
in 512 bytes which explains why GRUB is split in two halves. The first one is usually located in /boot/grub/stage1
and is exactly 512 bytes long with a single purpose in life of being able to locate and load /boot/grub/stage2.
Stage2, in turn, is much larger and capable of mounting a variety of filesystems. GRUB jumps through quite some hoops
to be able to fit into an already partitioned space so that stage1 can remain trim and stage2 can be located pretty
much anywhere on the storage device (being just a plain regular file on a particular filesystem). This clever scheme is implemented in stage1.5 and you can think of it as a very
restricted stage2: stage1.5 is only as smart as to be able to get a real stage2 from one and only one filesystem.
Since in our case we will be using an existing partition on a USB memory stick, chances are it&apos;ll be a FAT
partition. You have two options for installing GRUB in such a configuration: if your OS can run grub shell natively
you can do the following (provided that you&apos;ve mounted your stick on /media/disk):
&lt;code&gt;
# su - root
# mkdir /media/disk/boot
# cp -r /boot/grub /media/disk/boot
# touch /media/disk/unique-file-to-be-followed
# grub

    GNU GRUB  version 0.97  (640K lower / 3072K upper memory)

 [ Minimal BASH-like line editing is supported.  For the first word,
   TAB lists possible command completions.  Anywhere else TAB lists 
   the possible completions of a device/filename. ]

grub&gt; find /unique-file-to-be-followed
   (hd1,0)
grub&gt; root (hd1,0)
   Filesystem is type fat, partition type 0xb
grub&gt; setup (hd1)
 Checking if &quot;/boot/grub/stage1&quot; exists... yes
 Checking if &quot;/boot/grub/stage2&quot; exists... yes
 Checking if &quot;/boot/grub/fat_stage1_5&quot; exists... yes
 Running &quot;embed /boot/grub/fat_stage1_5 (hd1)&quot;...  
         15 sectors are embedded. succeeded
 Running &quot;install /boot/grub/stage1 (hd1) (hd1)1+15 p 
                  (hd1,0)/boot/grub/stage2
/boot/grub/menu.lst&quot;... succeeded
Done.
grub&gt; quit

# rm /media/disk/unique-file-to-be-followed
&lt;/code&gt;
If you&apos;re confused about the funny dance around &lt;b&gt;/unique-file-to-be-followed&lt;/b&gt; well, that&apos;s
because GRUB user&apos;s interface was designed by none other than Dr. Strangelove himself. There&apos;s
not easy way to map your typical UNIX /dev/something into what GRUB considers to be a device. 
The trick we use here is that we ask GRUB to locate a unique file on *all* of the devices it
sees. Hopefully &lt;b&gt;/unique-file-to-be-followed&lt;/b&gt;
is a name unique enough so that you get exactly one device mentioned in the output of the
&lt;b&gt;find&lt;/b&gt; and that is exactly the one you have to give to &lt;b&gt;root&lt;/b&gt; and &lt;b&gt;setup&lt;/b&gt;.
Just type the name (together with parenthesis) verbatim. 
&lt;br&gt;&lt;br&gt;
&lt;a name=&quot;GTOC29_32&quot;/&gt;
If your OS can&apos;t run GRUB natively, but can access the block device of a USB memory stick,
you can use my copy of the &lt;a href=&quot;http://blogs.sun.com/rvs/resource/mbr.bin&quot;&gt;Master Boot Record&lt;/a&gt; and a &lt;a href=&quot;http://blogs.sun.com/rvs/resource/stage1.5.bin&quot;&gt;FAT stage 1.5&lt;/a&gt;
to setup everything manually. Lets assume that the block device corresponding to the USB
memory stick is /dev/sdb:
&lt;code&gt;
$ sudo dd if=/tmp/mbr.bin of=/dev/sdb bs=1
$ sudo dd if=/tmp/stage1.5.bin of=/dev/sdb bs=512 seek=1
$ mkdir /media/disk/boot
$ cp -r /boot/grub /media/disk/boot
&lt;/code&gt;
Regardless of which method you use it is extremely important to be VERY CAREFUL. Unlike
anything else in this article the commands for setting up your memory stick to be bootable
can completely mess up the rest of your system if you make a typo or don&apos;t fully 
understand what is it that you&apos;re doing. You&apos;ve been warned!
&lt;br&gt;&lt;br&gt;
Ok, at this point your memory stick can boot. Try it! Reboot, select a USB device
as a boot device and when you see a GRUB prompt: &lt;b&gt;grub&amp;gt;&lt;/b&gt; remove the stick
from your computer and reboot back into whatever OS you&apos;re using to read this. Congrats!
You&apos;re 80% there.
&lt;br&gt;&lt;br&gt;
&lt;a name=&quot;GTOC22_28&quot;/&gt;
The remaining 20% are rather trivial -- you just need to copy the bare minimum
of files from the LiveCD to the USB memory stick. The good news is that we don&apos;t
have to bother with the files that don&apos;t fit on a FAT filesystem, the bad
news is that the selection of minimum set of files is not all that obvious. It took me two
reboots to get it just right, but you have an advatange of benefiting from my
wasted time. Here&apos;s what you need to copy and how:
&lt;code&gt;
$ cd /mnt
$ sudo rsync -a boot platform solarismisc.zlib solaris.zlib \
          jack root .catalog .image_info COPYRIGHT LICENSE \
          /media/disk
$ mv /media/disk/boot/x86.microroot \ 
     /media/disk/boot/x86.microroot.old
$ cp /tmp/x86.microroot.new /media/disk/boot/x86.microroot
&lt;/code&gt;
&lt;a name=&quot;GTOC_SOL&quot;/&gt;
The only reason we need the last two commands, of course, is because
the default x86.microroot wouldn&apos;t be able to work with your USB 
FAT filesystem. I had to modify it on Solaris to include support
for the pcfs. And unless you have a Solaris system handy, the following
dump is provided for the entertainment value only, you don&apos;t have
to do any of that. You can simply download 
&lt;a href=&quot;http://mediacast.sun.com/users/rvs2/media/x86.microroot&quot;&gt;my 
copy of the x86.microroot&lt;/a&gt; and get on with your life.
But for those curious ones, here it goes:
&lt;code&gt;
$ rlogin solaris
$ gzip -dc &lt; /cdrom/boot/x86.microroot &gt; /tmp/image
$ su - root
# lofiadm -a /tmp/image
# mount -F ufs /dev/lofi/1 /mnt
# cd /mnt/
# mkdir etc/fs/pcfs
# mkdir usr/lib/fs/pcfs
# cp /usr/lib/fs/pcfs/* usr/lib/fs/pcfs
# cp /usr/lib/fs/pcfs/mount etc/fs/pcfs/
# cp /usr/kernel/fs/pcfs kernel/fs/
# cp /usr/kernel/fs/amd64/pcfs kernel/fs/amd64/
# find . -name pcfs
./kernel/fs/amd64/pcfs
./kernel/fs/pcfs
./usr/lib/fs/pcfs
./etc/fs/pcfs
# cd `dirname lib/svc/method/live-fs-root`
# patch &lt; __EOP__
--- /tmp/live-fs-root   Fri May 23 12:46:33 2008
+++ lib/svc/method/live-fs-root Fri May 23 12:54:23 2008
@@ -174,10 +174,12 @@

        /sbin/listusb | while read dev rdev
        do
-               /usr/lib/fs/ufs/fstyp $rdev 2&gt;&amp;1 | grep &quot;^ufs$&quot;
-               if [ $? -eq 0 ]
+                usb_fstype=&quot;&quot;
+               /usr/lib/fs/ufs/fstyp $rdev 2&gt;&amp;1 | grep &quot;^ufs$&quot; &amp;&amp; \
+                                                  usb_fstype=&quot;ufs&quot;
+               /usr/lib/fs/pcfs/fstyp $rdev 2&gt;&amp;1 | grep &quot;^pcfs$&quot; &amp;&amp;\
+                                                   usb_fstype=&quot;pcfs&quot;
+               if [ -n &quot;$usb_fstype&quot; ]
                then
-                       /sbin/mount -F ufs -o nologging,noatime $dev 
+                       /sbin/mount -F $usb_fstype -o \
+                                      nologging,noatime $dev /.cdrom
                        if [ -f /.cdrom/solaris.zlib ]
                        then
                                echo &quot;&quot; &gt; /.liveusb
__EOP__
# umount /mnt
# lofiadm -d /dev/lofi/1
# exit
$ gzip -c &lt; /tmp/image &gt; /tmp/x86.microroot.new
&lt;/code&gt;
That&apos;s pretty much it. You&apos;re now a proud owner of a bootable USB memory stick
that can add Solaris experience to just about any desktop/laptop in the world.
Use it wisely, though. Don&apos;t sneak up on unsuspecting relatives just yet. Even
though OpenSolaris looks remarkably like Ubuntu (and yes, these days its a 
compliment) it is not quite there yet. The major missing part is the community
of developers putting there stuff back into the IPS repositories all over the
world. But it is coming. For now, quite a lot of software you take on Linux
for granted is, well, just one recompile away.
&lt;br&gt;&lt;br&gt;
&lt;hr&gt;
&lt;pre&gt;
&lt;a name=&quot;GTOC&quot;/&gt;
&lt;a href=&quot;#GTOC1_5&quot;&gt;linux(1)&lt;/a&gt;&gt; cd /tmp
&lt;a href=&quot;#GTOC1_5&quot;&gt;linux(2)&lt;/a&gt;&gt; wget http://dlc.sun.com/osol/opensolaris/2008/05/os200805.iso
&lt;a href=&quot;#GTOC1_5&quot;&gt;linux(3)&lt;/a&gt;&gt; sudo mount /tmp/os200805.iso /mnt/1 -o ro,loop
&lt;a href=&quot;#GTOC1_5&quot;&gt;linux(4)&lt;/a&gt;&gt; find /mnt/1 # explore the layout of the LiveCD
&lt;a href=&quot;#GTOC1_5&quot;&gt;linux(5)&lt;/a&gt;&gt; find /mnt/1 \! -type d -a \! -type f -exec ls -go  {} \;
&lt;a href=&quot;#GTOC6_8&quot;&gt;linux(6)&lt;/a&gt;&gt; file /mnt/1/boot/x86.microroot
&lt;a href=&quot;#GTOC6_8&quot;&gt;linux(7)&lt;/a&gt;&gt; gzip -dc &lt; /mnt/1/boot/x86.microroot &gt; /tmp/image
&lt;a href=&quot;#GTOC6_8&quot;&gt;linux(8)&lt;/a&gt;&gt; file /tmp/image
&lt;a href=&quot;#GTOC9_11&quot;&gt;linux(9)&lt;/a&gt;&gt; sudo mount /tmp/image /mnt/2 -o loop,ro,ufstype=sunx86
&lt;a href=&quot;#GTOC9_11&quot;&gt;linux(10)&lt;/a&gt;&gt; ls /mnt/2/etc/fs* /mnt/2/usr/lib/fs* # what FSes are there?
&lt;a href=&quot;#GTOC9_11&quot;&gt;linux(11)&lt;/a&gt;&gt; grep mount /mnt/2/lib/svc/method/* # what mounts everything?
&lt;a   href=&quot;#GTOC12&quot;&gt;linux(12)&lt;/a&gt;&gt; cat /mnt/2/etc/shadow # what accounts are available?
&lt;a href=&quot;#GTOC13_18&quot;&gt;linux(13)&lt;/a&gt;&gt; wget http://blogs.sun.com/rvs/resource/delofi.c
&lt;a href=&quot;#GTOC13_18&quot;&gt;linux(14)&lt;/a&gt;&gt; cc delofi.c -o delofi -lz
&lt;a href=&quot;#GTOC13_18&quot;&gt;linux(15)&lt;/a&gt;&gt; ./delofi /mnt/1/solarismisc.zlib /tmp/solarismisc.image
&lt;a href=&quot;#GTOC13_18&quot;&gt;linux(16)&lt;/a&gt;&gt; ./delofi /mnt/1/solaris.zlib /tmp/solaris.image
&lt;a href=&quot;#GTOC13_18&quot;&gt;linux(17)&lt;/a&gt;&gt; file /tmp/solarismisc.image /tmp/solaris.image
&lt;a href=&quot;#GTOC13_18&quot;&gt;linux(18)&lt;/a&gt;&gt; ls -log /tmp/solarismisc.image /tmp/solaris.image
linux(19)&gt; sudo mount /tmp/solaris.image /mnt/3 -o ro,loop
linux(20)&gt; sudo mount /tmp/solarismisc.image /mnt/4 -o ro,loop
linux(21)&gt; rlogin solaris

&lt;a href=&quot;#GTOC_SOL&quot;&gt;solaris(1)&lt;/a&gt;&gt; su - root
&lt;a href=&quot;#GTOC_SOL&quot;&gt;solaris(2)&lt;/a&gt;# lofiadm -a /net/linux/tmp/image
&lt;a href=&quot;#GTOC_SOL&quot;&gt;solaris(3)&lt;/a&gt;# mount -F ufs /dev/lofi/1 /mnt
&lt;a href=&quot;#GTOC_SOL&quot;&gt;solaris(4)&lt;/a&gt;# cd /mnt/
&lt;a href=&quot;#GTOC_SOL&quot;&gt;solaris(5)&lt;/a&gt;# mkdir etc/fs/pcfs
&lt;a href=&quot;#GTOC_SOL&quot;&gt;solaris(6)&lt;/a&gt;# mkdir usr/lib/fs/pcfs
&lt;a href=&quot;#GTOC_SOL&quot;&gt;solaris(7)&lt;/a&gt;# cp /usr/lib/fs/pcfs/* usr/lib/fs/pcfs
&lt;a href=&quot;#GTOC_SOL&quot;&gt;solaris(8)&lt;/a&gt;# cp /usr/lib/fs/pcfs/mount etc/fs/pcfs/
&lt;a href=&quot;#GTOC_SOL&quot;&gt;solaris(9)&lt;/a&gt;# cp /usr/kernel/fs/pcfs kernel/fs/
&lt;a href=&quot;#GTOC_SOL&quot;&gt;solaris(10)&lt;/a&gt;# cp /usr/kernel/fs/amd64/pcfs kernel/fs/amd64/
&lt;a href=&quot;#GTOC_SOL&quot;&gt;solaris(11)&lt;/a&gt;# find . -name pcfs
./kernel/fs/amd64/pcfs
./kernel/fs/pcfs
./usr/lib/fs/pcfs
./etc/fs/pcfs
&lt;a href=&quot;#GTOC_SOL&quot;&gt;solaris(12)&lt;/a&gt;# cd `dirname lib/svc/method/live-fs-root`
&lt;a href=&quot;#GTOC_SOL&quot;&gt;solaris(13)&lt;/a&gt;# patch &lt; __EOP__
--- /tmp/live-fs-root   Fri May 23 12:46:33 2008
+++ lib/svc/method/live-fs-root Fri May 23 12:54:23 2008
@@ -174,10 +174,12 @@

        /sbin/listusb | while read dev rdev
        do
-               /usr/lib/fs/ufs/fstyp $rdev 2&gt;&amp;1 | grep &quot;^ufs$&quot;
-               if [ $? -eq 0 ]
+                usb_fstype=&quot;&quot;
+               /usr/lib/fs/ufs/fstyp $rdev 2&gt;&amp;1 | grep &quot;^ufs$&quot; &amp;&amp; usb_fstype=&quot;u
+                /usr/lib/fs/pcfs/fstyp $rdev 2&gt;&amp;1 | grep &quot;^pcfs$&quot; &amp;&amp; usb_fstype
+               if [ -n &quot;$usb_fstype&quot; ]
                then
-                       /sbin/mount -F ufs -o nologging,noatime $dev /.cdrom ||
+                       /sbin/mount -F $usb_fstype -o nologging,noatime $dev /.c
                        if [ -f /.cdrom/solaris.zlib ]
                        then
                                echo &quot;&quot; &gt; /.liveusb
__EOP__
&lt;a href=&quot;#GTOC_SOL&quot;&gt;solaris(14)&lt;/a&gt;# umount /mnt
&lt;a href=&quot;#GTOC_SOL&quot;&gt;solaris(15)&lt;/a&gt;# lofiadm -d /dev/lofi/1
&lt;a href=&quot;#GTOC_SOL&quot;&gt;solaris(16)&lt;/a&gt;# exit
&lt;a href=&quot;#GTOC_SOL&quot;&gt;solaris(17)&lt;/a&gt;$ gzip -c &lt; /net/linux/tmp/image &gt; /net/linux/tmp/x86.microroot.new

&lt;a href=&quot;#GTOC22_28&quot;&gt;linux(22)&lt;/a&gt;&gt; cd /mnt
&lt;a href=&quot;#GTOC22_28&quot;&gt;linux(23)&lt;/a&gt;&gt; wget http://mediacast.sun.com/users/rvs2/media/x86.microroot
&lt;a href=&quot;#GTOC22_28&quot;&gt;linux(24)&lt;/a&gt;&gt; mv x86.microroot x86.microroot.new # or we could&apos;ve used the one from Solaris
&lt;a href=&quot;#GTOC22_28&quot;&gt;linux(25)&lt;/a&gt;&gt; cd /mnt/1
&lt;a href=&quot;#GTOC22_28&quot;&gt;linux(26)&lt;/a&gt;&gt; sudo rsync -a boot platform solarismisc.zlib solaris.zlib \
                  jack root .catalog .image_info COPYRIGHT LICENSE /media/disk
&lt;a href=&quot;#GTOC22_28&quot;&gt;linux(27)&lt;/a&gt;&gt; mv /media/disk/boot/x86.microroot /media/disk/boot/x86.microroot.old
&lt;a href=&quot;#GTOC22_28&quot;&gt;linux(28)&lt;/a&gt;&gt; cp /tmp/x86.microroot.new /media/disk/boot/x86.microroot
&lt;a href=&quot;#GTOC29_32&quot;&gt;linux(29)&lt;/a&gt;&gt; wget http://blogs.sun.com/rvs/resource/stage1.5.bin
&lt;a href=&quot;#GTOC29_32&quot;&gt;linux(30)&lt;/a&gt;&gt; wget http://blogs.sun.com/rvs/resource/mbr.bin
&lt;a href=&quot;#GTOC29_32&quot;&gt;linux(31)&lt;/a&gt;&gt; sudo dd if=/tmp/mbr.bin of=/dev/sdb bs=1
&lt;a href=&quot;#GTOC29_32&quot;&gt;linux(32)&lt;/a&gt;&gt; sudo dd if=/tmp/stage1.5.bin of=/dev/sdb bs=512 seek=1

&lt;a href=&quot;#GTOC33_35&quot;&gt;linux(33)&lt;/a&gt;&gt; touch /media/disk/unique-file-to-be-followed 
&lt;a href=&quot;#GTOC33_35&quot;&gt;linux(34)&lt;/a&gt;&gt; sudo grub 
   grub&gt; find /unique-file-to-be-followed 
         (hd1,0) 
   grub&gt; root (hd1,0) 
   grub&gt; setup (hd1)
   grub&gt; quit 
&lt;a href=&quot;#GTOC33_35&quot;&gt;linux(35)&lt;/a&gt;&gt; rm /media/disk/unique-file-to-be-followed
&lt;/pre&gt;</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/how_many_kernel_engineers_does</guid>
    <title>How many kernel engineers does it take to solve one differential equation?</title>
    <dc:creator>rvs</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/how_many_kernel_engineers_does</link>
        <pubDate>Sun, 11 May 2008 21:52:13 -0700</pubDate>
    <category>/dev/braindump</category>
    <atom:summary type="html">Now, before you can answer this fundamental questions, lets take care of
some basics first. Do you really know what does &quot;load average&quot; (as reported by 
&lt;a href=&quot;http://docs.sun.com/app/docs/doc/816-5168/getloadavg-3c?l=en&amp;a=view&quot;&gt;getloadavg()&lt;/a&gt;
or by various utilities such as 
&lt;a href=&quot;http://docs.sun.com/app/docs/doc/816-5165/uptime-1?l=en&amp;a=view&quot;&gt;uptime&lt;/a&gt; and 
&lt;a href=&quot;http://docs.sun.com/app/docs/doc/816-5165/w-1?l=en&amp;a=view&quot;&gt;w&lt;/a&gt;) really tell
you? Or even what does it actually mean? Out of 10 random folks informally surveyed in 
the hallways of &lt;a href=&quot;http://www.phoons.com/sun.html&quot;&gt;Sun Quentin&lt;/a&gt;:
&lt;ol&gt;
&lt;li&gt;2 said &quot;Duh?&quot;&lt;/li&gt;
&lt;li&gt;7 said &quot;Load average measures an average number of processes over 1 minute;
5 minutes and 15 minutes respectively&quot;&lt;/li&gt;
&lt;li&gt;1 said &quot;Load average numbers represent a simple moving average of the number of process 
in a scheduler&apos;s run queue with a window of 1 minute, 5 minutes and 15 minutes
respectively&lt;/li&gt;
&lt;/ol&gt;
Now, unless your name is
&lt;a href=&quot;http://www.teamquest.com/resources/gunther/display/4/index.htm&quot;&gt;Neil Gunther&lt;/a&gt; 
something is telling me you&apos;d be among one of these folks 
yourself. I certainly used to be. That is, before I came across a 
&lt;a href=&quot;http://www.teamquest.com/resources/gunther/&quot;&gt;series of articles by Dr. Gunther&lt;/a&gt;. 
The rest chronicles my personal journey of realizing just how deep the rabbit hole goes.</atom:summary>        <description>Now, before you can answer this fundamental questions, lets take care of
some basics first. Do you really know what does &quot;load average&quot; (as reported by 
&lt;a href=&quot;http://docs.sun.com/app/docs/doc/816-5168/getloadavg-3c?l=en&amp;a=view&quot;&gt;getloadavg()&lt;/a&gt;
or by various utilities such as 
&lt;a href=&quot;http://docs.sun.com/app/docs/doc/816-5165/uptime-1?l=en&amp;a=view&quot;&gt;uptime&lt;/a&gt; and 
&lt;a href=&quot;http://docs.sun.com/app/docs/doc/816-5165/w-1?l=en&amp;a=view&quot;&gt;w&lt;/a&gt;) really tell
you? Or even what does it actually mean? Out of 10 random folks informally surveyed in 
the hallways of &lt;a href=&quot;http://www.phoons.com/sun.html&quot;&gt;Sun Quentin&lt;/a&gt;:
&lt;ol&gt;
&lt;li&gt;2 said &quot;Duh?&quot;&lt;/li&gt;
&lt;li&gt;7 said &quot;Load average measures an average number of processes over 1 minute;
5 minutes and 15 minutes respectively&quot;&lt;/li&gt;
&lt;li&gt;1 said &quot;Load average numbers represent a simple moving average of the number of process 
in a scheduler&apos;s run queue with a window of 1 minute, 5 minutes and 15 minutes
respectively&lt;/li&gt;
&lt;/ol&gt;
Now, unless your name is
&lt;a href=&quot;http://www.teamquest.com/resources/gunther/display/4/index.htm&quot;&gt;Neil Gunther&lt;/a&gt; 
something is telling me you&apos;d be among one of these folks 
yourself. I certainly used to be. That is, before I came across a 
&lt;a href=&quot;http://www.teamquest.com/resources/gunther/&quot;&gt;series of articles by Dr. Gunther&lt;/a&gt;. 
The rest chronicles my personal journey of realizing just how deep the rabbit hole goes.
&lt;br&gt;&lt;br&gt;
First things first: the last dude from the survey got pretty close to giving a correct
answer. Indeed, Load Average numbers are moving averages, but they are not simple. In fact,
they are 
&lt;a href=&quot;http://en.wikipedia.org/wiki/Exponential_moving_average#Exponential_moving_average&quot;&gt;
exponential moving averages&lt;/a&gt; (or 
&lt;a href=&quot;http://stockcharts.com/school/doku.php?id=chart_school:technical_indicators:moving_averages&quot;&gt;
EMA&lt;/a&gt; for all the financially minded folks out there). So in a nutshell, what kernel
does to gather load average (LA) statistics is rather simple: once every X seconds it samples
the size of the runqueue (which gives it the number of runnable processes at that point in 
time)
&lt;stomachnote&gt;
&lt;b&gt;A bit of digression:&lt;/b&gt; one of the primary jobs of the Operating System is to make sure 
that all of the processes can finish up as quickly as they can. The CPU is a precious toy 
that needs to be given to each process fairly, as though they were children in a large family
and a kernel was their mother. The good news is: most of the time most of the children
are sleeping and don&apos;t need any toys to begin with. The reasons of why they are asleep
are plentiful: they could be waiting for the IO to complete or waiting for somebody to
wake them up when a particular condition gets met, etc. Processes, not children, that is.
The important thing is: they do not require CPU and do not fight for it. The few that
are ready to go are called &quot;runnable&quot; and are placed on a runqueue. If your system
has fewer CPUs than the amount of processes in that queue than a kernel has to make
sure that CPU time is fairly allocated between all needy kids^H^H^H^Hprocesses (you have
more kids than toys).
&lt;/stomachnote&gt;
and updates the current values of LA numbers using this simple EMA formula:
&lt;br&gt;
&lt;center&gt;
&lt;b&gt;current_average = &amp;alpha; * previous_average + (1-&amp;alpha;) * runqueue_length&lt;/b&gt;
&lt;/center&gt;
In reality you have 3 variables like current_average to take care of. Each corresponding
to a 1, 5 and 15 minutes window. But they all do the same thing: they tell you how
many processes on average (an exponential moving one, but still) there were waiting
in the runqueue during the last 1, 5 and 15 minutes. To put it in simple terms: if your
LA numbers are constantly smaller than the total number of cores you have -- you got ripped
off when you bought your quad-core AMD cpu (there&apos;s nothing for some of the cores to do
at all, you&apos;ve got more toys than kids). If the numbers are constantly bigger -- go ahead
and get an extra quad core CPU (get some shiny toys for those kids of yours). Simple huh? 
Almost, there&apos;s one little question still to be answered: what&apos;s the ideal value for the &amp;alpha; constant?
Now, before you run to your favorite statistics handbook, here&apos;s a shocker: have you
realized that everytime you compute a formula like this:
&lt;br&gt;
&lt;center&gt;
&lt;b&gt;Y[i+1] = &amp;alpha; * Y[i] + (1-&amp;alpha;) * X[i]&lt;/b&gt;
&lt;/center&gt;
what you&apos;re really doing is numerically solving an ordinary differential equation
using
&lt;a href=&quot;http://en.wikipedia.org/wiki/Numerical_ordinary_differential_equations#The_backward_Euler_method&quot;&gt;
the backward Euler method&lt;/a&gt;? Yep, that&apos;s right. There&apos;s no escape. You can call it 
an EMA, you can call it a low-pass filter, you can call it whatever you like, but the
truth of the matter is: you&apos;re reconstructing function Y, such that:
&lt;br&gt;&lt;center&gt;&lt;b&gt;
&lt;table border=0 align=center&gt;&lt;tr&gt;&lt;td nowrap valign=&quot;bottom&quot;&gt;dY&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;1-&amp;alpha;&lt;/td&gt;&lt;/tr&gt;
                             &lt;tr&gt;&lt;td nowrap align=center&gt;--&lt;/td&gt;&lt;td&gt;= -T*Y(t) + T*X(t), where T =&lt;/td&gt;&lt;td&gt;-----&lt;/td&gt;&lt;/tr&gt;
                             &lt;tr&gt;&lt;td nowrap valign=&quot;top&quot;&gt;dt&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&amp;alpha;*h&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/b&gt;                                  
&lt;/center&gt;
and each consecutive sample Yn is h units away from a previous one. 
&lt;stomachnote&gt;
&lt;b&gt;A fundamental digression:&lt;/b&gt; if you think about what a typical ordinary differential 
equation is, you can quickly realize that, in simple terms, it is exactly the recipe 
for constructing the resulting function one step at a time. Recall a high school definition
of the derivative: f&apos;(t) ~= (f(t+h) - f(t))/h, where the weird looking ~= designates a limit.
On the other hand ~= could as well designate an approximation. And if you do read it that
way -- congratulations! You are on a brink of discovery of a 
&lt;a href=&quot;http://en.wikipedia.org/wiki/Euler_method&quot;&gt;Euler method&lt;/a&gt; of numerically solving
ordinary differential equations all by yourself. But what&apos;s more important is that
you can now see that a derivate is a very good tool for describing how neighboring 
values of the function are supposed to relate to each other:
&lt;b&gt;f[next] = f[prev]+h*f&apos;[prev]&lt;/b&gt;
If you want extra precision you can write it like this (and struggle with a bit
more complex computation, which is what we have to do for computing LAs):
&lt;b&gt;f[next] = f[prev]+h*f&apos;[next]&lt;/b&gt;
But the basic fundamental principle remains the same: derivatives describe how
neighboring values of the function relate to each other, hence every time you 
see something like: 
&lt;b&gt;x[i] = x[i-1] + EXPRESSION; &lt;/b&gt;
don&apos;t be fooled -- there&apos;s a differential equation being solved here.
&lt;/stomachnote&gt;
Now that we know how does the equation look like it would be a good time to
dust off that old calculus book you have sitting in your basement. Once you open
it, you&apos;ll get the bad news: there&apos;s no compact solution for the 
&lt;b&gt;dY/dt = -T*Y(t) + T*X(t)&lt;/b&gt;. You have to integrate X(t) and that&apos;s a downer. On
the positive side, though: as long as our X(t)==0 we have a much simpler and well
know equation to solve: &lt;b&gt;dY/dt = -T*Y(t)&lt;/b&gt;. Which, of course makes 
&lt;b&gt;Y(t) == Y(0)*exp(-T*t)&lt;/b&gt; and also hints at what the good values for T might be.
Indeed, since in our case the values of X(t) are the measurements of the runqueue&apos;s length,
everytime X(t)==0 it means that the runqueue is empty. The next logical question to
ask is: how do we want our load average numbers to behave when the size of the runque 
drops to 0. We don&apos;t have much freedom, though, since for every segment where
X(t)==0 we actually *know* how our numbers will behave: Y(t) == Y(0)*exp(-T*t). The
only knob we could turn is the value of &apos;T&apos;. Control engineering, that is also
governed by the same differential equation, has long standing
conventions for how the controlling device should react on changing in the process.
These conventions are based on a notion of a &lt;a href=&quot;http://en.wikipedia.org/wiki/Time_constant&quot;&gt;time constant&lt;/a&gt;. And the way it is
defined makes the following two statements true:
&lt;ol&gt;
   &lt;li&gt;After a period of one time constant the function reaches ~37% of its initial value&lt;/li&gt;
   &lt;li&gt;After five time constants the function reaches a value less than 1% of its initial value&lt;/li&gt;
&lt;/ol&gt;
Which seems especially fitting in our case since the second window (5 minutes) is exactly
5 time bigger than the first one. So without further ado, let me say that I would like
our time constant to be 1 minute. Given that our sampling is done in seconds that would be 
60. And it just follows that since the value of T is 1/60 (T==1/time_constant), which means
that (1-&amp;alpha;)/(&amp;alpha;*h)==1/60 and the &amp;alpha;==60/(60+h). Pretty neat huh? In fact,
that&apos;s how I would like *my* load average numbers to be calculated!
&lt;br&gt;&lt;br&gt;
But obviously, as pointed out by Dr. Gunther, that&apos;s not what the 
&lt;a href=&quot;http://lxr.linux.no/linux/kernel/timer.c#L860&quot;&gt;Linux community wants&lt;/a&gt;.
Nor is it what the
&lt;a href=&quot;http://cvs.opensolaris.org/source/xref/onnv/onnv-gate/usr/src/uts/common/os/clock.c#calcloadavg&quot;&gt;OpenSolaris community wants&lt;/a&gt;. In fact unless your 
&lt;a href=&quot;http://en.wikipedia.org/wiki/Multics&quot;&gt;operating system&lt;/a&gt; was done by 
&lt;a href=&quot;http://en.wikipedia.org/wiki/Fernando_Corbat%C3%B3&quot;&gt;Fernando Corbato&lt;/a&gt;
and co. you&apos;re out of luck. For some unknown reason all of the opensource implementations
of load average stick with defining &amp;alpha; as an exponent of some sorts:
&lt;center&gt;&lt;table border=&quot;1&quot;&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;Linux&lt;/td&gt;&lt;td&gt;Solaris&lt;/td&gt;&lt;td&gt;What makes sense&lt;/td&gt;&lt;td&gt;Difference&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;h&lt;/td&gt;&lt;td&gt;5sec&lt;/td&gt;&lt;td&gt;1sec&lt;/td&gt;&lt;td&gt;1sec&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1min &amp;alpha;&lt;/td&gt;&lt;td&gt;exp(-5/60)&lt;/td&gt;&lt;td&gt;exp(-1/60)&lt;/td&gt;&lt;td&gt;60/61&lt;/td&gt;&lt;td&gt;0.0001&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;5min &amp;alpha;&lt;/td&gt;&lt;td&gt;exp(-5/300)&lt;/td&gt;&lt;td&gt;exp(-1/300)&lt;/td&gt;&lt;td&gt;300/301&lt;/td&gt;&lt;td&gt;0.000005&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;15min &amp;alpha;&lt;/td&gt;&lt;td&gt;exp(-5/900)&lt;/td&gt;&lt;td&gt;exp(-1/900)&lt;/td&gt;&lt;td&gt;900/901&lt;/td&gt;&lt;td&gt;0.0000006&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/center&gt;
This makes very little sense (although doesn&apos;t do much harm either, since numerically
these exponent values are pretty close to the real deal) and leads to all sorts of
&lt;a href=&quot;http://lxr.linux.no/linux/include/linux/sched.h#L102&quot;&gt;complications&lt;/a&gt; 
in calculating the actual numbers. Of course, if instead of a simple &amp;alpha;==60/65==12/13
(Linux kernel has to sample the actual length of the runqueue only once per 5 seconds,
hence the h==5) you stick with exp(-5sec/1min) no wonder you get in trouble! And for what?
Well, at least I don&apos;t know. Now, don&apos;t get me wrong, it is not like different 
&amp;alpha;s are a crime. It is definitely not more of a problem than using logarithms 
of base 7 or something. On the other hand, when a Linux &amp;alpha; effectively gives me a time
constant of 59.204812 seconds and is numerically slightly different from what Solaris uses
one has to wonder what kind of a esoteric knowledge  needs to be possessed in order to appreciate something like that. Again, I don&apos;t really know. 
&lt;br&gt;
&lt;br&gt;
But after reading the excerpt from the Multics manual 
&lt;a href=&quot;http://www.teamquest.com/resources/gunther/display/8/index.htm&quot;&gt;reproduced&lt;/a&gt;
by Dr. Gunther, I do know this: it takes at least one kernel engineer from 60s to actually
	be able to solve a differential equation, the new guys seem to have flunked the calculus.</description>          
	</item>

  <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/how_to_get_the_most</guid>
    <title>How to get the most out of your CPU with Sun Studio 12</title>
    <dc:creator>rvs</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/how_to_get_the_most</link>
        <pubDate>Tue, 11 Mar 2008 17:51:21 -0700</pubDate>
    <category>Sun Studio</category>
            <description>There used to be a time when hardware (especially CPUs) had a much longer release cycle
compared to software. Not anymore. The silicon industry has joined the &quot;frenetic squirrel&quot;
squad and cranks up updates of architectures at a pretty alarming pace. Of course, for C, C++ 
and Fortran developers it means only one thing -- your compilers have to stay ahead of the
game, otherwise you might as well program that shiny new CPU in an assembly language.
&lt;br&gt;&lt;br&gt;
The good news for Sun Studio 12 users is that the only thing that separates you
from the kick ass performance on the latest contraptions from AMD and Intel is 
&lt;a href=&quot;http://developers.sun.com/sunstudio/downloads/patches/ss12_patches.jsp&quot;&gt;this set of patches&lt;/a&gt;.
So, if you are planning to deploy on Intel&apos;s Woodcrest and Clovertown or AMD&apos;s Barcelona chips,
just download the patches, install them and don&apos;t forget to tell the compiler what you want:
&lt;ol&gt;
&lt;li&gt;if your development and deployment boxes are the same:&lt;code&gt;-xtarget=native&lt;/code&gt;
&lt;li&gt;same as above, but forcing 64bit code generation:&lt;code&gt;-xtarget=native64&lt;/code&gt;
&lt;li&gt;if your target is Intel&apos;s Woodcrest and Clovertown in 32bit mode:&lt;code&gt;-xtarget=woodcrest -m32&lt;/code&gt;
&lt;li&gt;if your target is Intel&apos;s Woodcrest and Clovertown in 64bit mode:&lt;code&gt;-xtarget=woodcrest -m64&lt;/code&gt;
&lt;li&gt;if your target is AMD&apos;s Barcelona in 32bit mode:&lt;code&gt;-xtarget=barcelona -m32&lt;/code&gt;
&lt;li&gt;if your target is AMD&apos;s Barcelona in 64bit mode:&lt;code&gt;-xtarget=barcelona -m64&lt;/code&gt;
&lt;/ol&gt;
</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/mommy_where_does_money_come</guid>
    <title>Mommy, where does money come from?</title>
    <dc:creator>rvs</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/mommy_where_does_money_come</link>
        <pubDate>Fri, 15 Feb 2008 18:20:06 -0800</pubDate>
    <category>/var</category>
            <description>I don&apos;t think the following two videos answer that question, but the way they
challenge ones presumptions about economy, society and money is alone worth its 
weight in gold. Make sure you watch them in exactly the order they appear, though:
&lt;br&gt;&lt;center&gt;
Money as debt, by Paul Grignon:
&lt;br&gt;
&lt;embed style=&quot;width:400px; height:326px;&quot; id=&quot;VideoPlayback&quot; type=&quot;application/x-shockwave-flash&quot; src=&quot;http://video.google.com/googleplayer.swf?docId=-9050474362583451279&amp;hl=en&quot; flashvars=&quot;&quot;&gt; &lt;/embed&gt;
&lt;br&gt;
Zeitgeist, The Movie:
&lt;br&gt;
&lt;embed style=&quot;width:400px; height:326px;&quot; id=&quot;VideoPlayback&quot; type=&quot;application/x-shockwave-flash&quot; src=&quot;http://video.google.com/googleplayer.swf?docId=5547481422995115331&amp;hl=en&quot; flashvars=&quot;&quot;&gt; &lt;/embed&gt;
&lt;/center&gt;
&lt;br&gt;
P.S. I would be very interested in getting pointers to anything even remotely resembling
mathematical theory behind money-as-debt concept. Any suggestions?

</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/sun_studio_for_linux_on</guid>
    <title>Sun Studio for Linux on the eve of Oscars</title>
    <dc:creator>rvs</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/sun_studio_for_linux_on</link>
        <pubDate>Wed, 13 Feb 2008 10:51:01 -0800</pubDate>
    <category>Sun Studio</category>
            <description>It is no secret (in fact, at this point I probably bored everyone to death with this) that Sun Studio for Linux
was a very personal project for me. For a movie freak, this was the closest experience to subverting
a major studio into making an independent movie. Of course, seeing Sun Studio 
&lt;a href=&quot;http://www.linuxjournal.com/node/1006101&quot;&gt;nominated by Linux Journal&lt;/a&gt; for a &quot;favorite Linux software 
development tool&quot; seems like the closest I can ever get to being part of Oscars. Unlike Oscars, though,
there&apos;s no Academy Members who vote, it is you. And since today is the last day for casting your vote
my pledge is very simple -- if you like Sun Studio on Linux, don&apos;t be shy to scroll to the question #22, if
you don&apos;t like Sun Studio on Linux don&apos;t be shy to shoot me an email and above all if you haven&apos;t even
tried &lt;a href=&quot;http://developers.sun.com/sunstudio/downloads/thankyou.jsp?submit=%A0FREE+Download%A0%BB%A0&quot;&gt;Sun Studio on Linux&lt;/a&gt; now would be the best time.
</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/cuckoo_hashing_reinventing_the_wheel</guid>
    <title>Cuckoo hashing: reinventing the wheel?</title>
    <dc:creator>rvs</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/cuckoo_hashing_reinventing_the_wheel</link>
        <pubDate>Mon, 14 Jan 2008 16:37:26 -0800</pubDate>
    <category>Elegant Computing</category>
            <description>It is now a well accepted fact that not quite everything 
&lt;a href=&quot;http://www.myoutbox.net/posass.htm&quot;&gt;has yet been invented&lt;/a&gt;. But sure
some thing have: the wheel, the &lt;a href=&quot;http://www.google.com&quot;&gt;internet search&lt;/a&gt;
and &lt;a href=&quot;http://en.wikipedia.org/wiki/Hash_function&quot;&gt;hashing algorithm&lt;/a&gt; being just a few examples. 
At least I used to be of that opinion until a friend of mine 
&lt;a href=&quot;http://www.cwi.nl/themes/ins1/publications/docs/ZuHeBo:DAMON:06.pdf&quot;&gt;pointed me&lt;/a&gt; to the 
radically new hashing method called &lt;a href=&quot;http://en.wikipedia.org/wiki/Cuckoo_hashing&quot;&gt;Cuckoo hashing&lt;/a&gt;.
I guess next thing on the list to be reinvented is the wheel, the internet search -- 
I&apos;m &lt;a href=&quot;http://finance.google.com/finance?q=GOOG&quot;&gt;not so much worried about&lt;/a&gt;.</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/what_legal_things_can_be</guid>
    <title>What legal things can be done with illegal content?</title>
    <dc:creator>rvs</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/what_legal_things_can_be</link>
        <pubDate>Mon, 7 Jan 2008 19:07:37 -0800</pubDate>
    <category>/var</category>
            <description>Indirection is a wonderful thing. It is said that there is no problem in computer science that cannot be 
solved by adding an extra level of it. It is even more exciting when it gets applied to our societal
common sense.  For example, we all know that selling stolen goods is, in itself, illegal. But what about
renting property for vendors selling all sorts of goods (some stolen and some not)? Or what about 
promoting such &quot;fairs&quot;? Is it legal, is it not? I&apos;m not a lawyer but I know for a fact that when
goods themselves are virtual the situation gets even more complicated.
&lt;br&gt;&lt;br&gt;
In the business of media distribution there is probably no issue hotter than the legality of P2P
downloads, trackers and networks. I do have my own take on all of it, as I am sure do guys at
&lt;a href=&quot;http://0xdb.org/&quot;&gt;a very special Movie Database&lt;/a&gt;. But lets not get into this discussion
right now. Lets apply indirection. Pretend that all content traveling through the P2P filesharing
networks is illegal. I know that for any reasonable human being this should be as hard to imagine
as the world where all software is commercial, but we will try very hard. Ok. Now, the next question is:
to what extent secondary information derived from such a content would be legal? Well, that&apos;s a difficult
question and precisely the one that &lt;a href=&quot;http://0xdb.org/about&quot;&gt;0xdb.org&lt;/a&gt; is trying to explore.
I wish them luck!</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/silicon_valley_the_sate_of</guid>
    <title>Silicon Valley: the state of mind</title>
    <dc:creator>rvs</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/silicon_valley_the_sate_of</link>
        <pubDate>Fri, 7 Dec 2007 10:14:06 -0800</pubDate>
    <category>/var</category>
            <description>Sometimes when I have a question I go to Google, sometimes directly to wikipedia, but
sometimes the answer is on 
&lt;a href=&quot; http://blog.wired.com/underwire/2007/12/copyright-claim.html&quot;&gt;YouTube&lt;/a&gt;^H^H^H^H^H^H^H &lt;a href=&quot;http://www.dailymotion.com/us&quot;&gt;dailymotion.com&lt;/a&gt;. So for all of you who have ever asked me what
life in Silicon Valley is all about here you go (and if you&apos;re curious what all the ^H are all about dive into comments):
&lt;center&gt;
&lt;div&gt;&lt;object width=&quot;425&quot; height=&quot;335&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://www.dailymotion.com/swf/Pyq9iGo3hAbxSq9Pf&quot;&gt;&lt;/param&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot;&gt;&lt;/param&gt;&lt;param name=&quot;allowScriptAccess&quot; value=&quot;always&quot;&gt;&lt;/param&gt;&lt;embed src=&quot;http://www.dailymotion.com/swf/Pyq9iGo3hAbxSq9Pf&quot; type=&quot;application/x-shockwave-flash&quot; width=&quot;425&quot; height=&quot;335&quot; allowFullScreen=&quot;true&quot; allowScriptAccess=&quot;always&quot;&gt;&lt;/embed&gt;&lt;/object&gt;
&lt;/center&gt;</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/is_openmp_3_0_tasking</guid>
    <title>OpenMP 3.0 tasking model: as smooth as Cilk?</title>
    <dc:creator>rvs</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/is_openmp_3_0_tasking</link>
        <pubDate>Mon, 26 Nov 2007 00:29:10 -0800</pubDate>
    <category>Elegant Computing</category>
    <atom:summary type="html">There are 3 reasons behind this blog entry: first of all, the &lt;a href=&quot;http://www.openmp.org/drupal/mp-documents/spec30_draft.pdf&quot;&gt;
OpenMP 3.0 specification&lt;/a&gt; is now available for public comment. That in turn, made OpenMP ARB&apos;s CEO Larry Meadows proclaim
&lt;a href=&quot;http://www.hpcwire.com/hpc/1891593.html&quot;&gt;The Birth of OpenMP 3.0&lt;/a&gt; and introduce the most anticipate new 
feature: the tasking model. Finally, I&apos;ve just got back from Super Computing &apos;07 in Reno where 
&lt;a href=&quot;http://www.compunity.org/events/pastevents/parco07/ParCo2007Bull.pdf&quot;&gt;OpenMP BOF&lt;/a&gt; took place and clearly
showed that the OpenMP 3.0 tasking model is not well understood and, worse yet, it seems to be missing a number of important
capabilities. Before I jump to my critique, let me just point out one thing. There is no doubt in my mind, that OpenMP 3.0 represents 
a step in the right direction, yet I can&apos;t help but notice its slow pace of development. If it took us 10 years to get to
the point where explicit tasks are possible how long would it take us to make them actually useful? And in the meantime, wouldn&apos;t
programmers be better off sticking to something like &lt;a href=&quot;http://supertech.csail.mit.edu/cilk/&quot;&gt;Cilk&lt;/a&gt; or 
&lt;a href=&quot;http://www.rapidmind.net&quot;&gt;Rapid Minds&lt;/a&gt; frameworks?
</atom:summary>        <description>There are 3 reasons behind this blog entry: first of all, the &lt;a href=&quot;http://www.openmp.org/drupal/mp-documents/spec30_draft.pdf&quot;&gt;
OpenMP 3.0 specification&lt;/a&gt; is now available for public comment. That in turn, made OpenMP ARB&apos;s CEO Larry Meadows proclaim
&lt;a href=&quot;http://www.hpcwire.com/hpc/1891593.html&quot;&gt;The Birth of OpenMP 3.0&lt;/a&gt; and introduce the most anticipated new 
feature: the tasking model. Finally, I&apos;ve just got back from Super Computing &apos;07 in Reno where 
&lt;a href=&quot;http://www.compunity.org/events/pastevents/parco07/ParCo2007Bull.pdf&quot;&gt;OpenMP BOF&lt;/a&gt; took place and clearly
showed that the OpenMP 3.0 tasking model is not well understood and, worse yet, it seems to be missing a number of important
capabilities. Before I jump to my critique, let me just point out one thing. There is no doubt in my mind, that OpenMP 3.0 represents 
a step in the right direction, yet I can&apos;t help but notice its slow pace of development. If it took us 10 years to get to
the point where explicit tasks are possible how long would it take us to make them actually useful? And in the meantime, wouldn&apos;t
programmers be better off sticking to something like &lt;a href=&quot;http://supertech.csail.mit.edu/cilk/&quot;&gt;Cilk&lt;/a&gt; or 
&lt;a href=&quot;http://www.rapidmind.net&quot;&gt;Rapid Minds&lt;/a&gt; frameworks?
&lt;br&gt;&lt;br&gt;
Here&apos;s how tasks got introduced by Larry:
&lt;blockquote&gt;
A task is similar to a lambda function in C#.  The task directive is used to describe an explicit task as follows (C/C++ is used for the examples for convenience, there are analogs for Fortran):
&lt;pre&gt;
#pragma omp task [clauses]
{
 // code
}
&lt;/pre&gt;
When a thread encounters the task directive, the data environment is captured. That environment, together with the code represented by the structured block, constitutes the generated task. The task may be executed immediately or may be queued for execution.
&lt;/blockquote&gt;
Aside from the fact that referring to lambda functions as something from C# would be like introducing Dorian Gray as a fictional
character from the &lt;a href=&quot;http://imdb.com/title/tt0311429/&quot;&gt;major Hollywood movie&lt;/a&gt; the rest of the paragraph looks
remarkably similar to the concepts from the Cilk language. And this is a &quot;good thing&quot; (tm). Cilk grew out of practical needs
for coding a very diverse set of applications on shared memory systems. Pretty much every singly new keyword that Cilk introduced
has a war story of how it came about. It is not perfect (no parallel framework is) but it can be considered an important
yardstick for evaluating aspiring parallel frameworks for C-like languages. My very firm personal belief is that if Cilk semantics 
can NOT be easily expressed then a framework has serious issues. &lt;br&gt;&lt;br&gt;With that in mind, lets see how OpenMP 3.0 tasking model
stacks up. It looks like it is fair to say that &lt;b&gt;#pragma omp task&lt;/b&gt; is like a &lt;b&gt;spawn&lt;/b&gt; and
&lt;b&gt;inlet&lt;/b&gt; keywords rolled into one and &lt;b&gt;#pragma omp taskwait&lt;/b&gt; is like &lt;b&gt;sync&lt;/b&gt;, right? Not quite. 
The biggest difference is that in OpenMP 3.0 it is now possible for a procedure to spawn a bunch of tasks, exit but have the children
tasks happily running (Cilk&apos;s implicit &lt;b&gt;sync&lt;/b&gt; just before the return statement doesn&apos;t apply in OpenMP 3.0). This is bad
news for runtime (&quot;cactus stack&quot; optimizations become very hard to do) and bad news for debugging and analysis (what should
the stack of such an &quot;orphan&quot; task look like?). It also widens the gap between the syntax structure of the program and
its semantics. Is it good for anybody? Is it good for you? I&apos;m really curious to see your comments. For now, however, here&apos;s
my first bullet on &quot;what&apos;s wrong with OpenMP 3.0 tasking model&quot; list: &lt;ol&gt;&lt;li&gt;&lt;b&gt;Orphan tasks&lt;/b&gt;&lt;/li&gt;&lt;/ol&gt;
But that&apos;s semantics, on a syntax side the difference between &quot;almost a closure&quot; feeling I get from the &lt;b&gt;#pragma omp task&lt;/b&gt; 
and a more orderly division of labor between &lt;b&gt;inlet&lt;/b&gt; and &lt;b&gt;spawn&lt;/b&gt; is definitely up to each individual to [dis]like. 
You have more freedom in expressing yourself in-line without factoring out the &quot;reduction&quot; code into inlet, but you pay the price of
doing manual synchronization (as illustrated by the &lt;b&gt;#pragma omp atomic&lt;/b&gt; and &lt;b&gt;#pragma omp taskwait&lt;/b&gt; in
the following comparison of parallel Fibonacci computation routines):
&lt;table&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;&lt;b&gt;Cilk:&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;OpenMP 3.0:&lt;/b&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;pre&gt;
cilk int fib (int n)
{
    int x = 0;
    inlet void summer (int result)
    {
        x += result;
        return;
    }

    if (n&lt;2) return n;
    else {
        summer(spawn fib (n-1));
        summer(spawn fib (n-2));
        return (x);
    }
}
&lt;/pre&gt;
&lt;/td&gt;
&lt;td width=&quot;10%&quot;&gt;&lt;/td&gt;
&lt;td&gt;
&lt;pre&gt;
int fib(int n)
{
    int res = 0;
    if (n&lt;2) return n;
    else
    {
#pragma omp task
        {
             #pragma omp atomic
             res += fib(n-1);
        }
#pragma omp task
        {
             #pragma omp atomic
             res += fib(n-2);
        }
    }
#pragma omp taskwait
    return res;
}
&lt;/pre&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
It might surprise some of you, but at this point we are almost done with our comparison. Cilk is a very
nice extension of C, precisely because it is a small one. Out of 6 keywords that Cilk adds to C 
(&lt;b&gt;cilk, spawn, sync, inlet, abort, SYNCHED&lt;/b&gt;) we&apos;ve already covered 4 and so far OpenMP fairs
at least on par with Cilk. Unfortunately, the remaining two keywords spell a bit of disaster. Their
semantics does NOT seem to be supported at all by OpenMP 3.0. Frankly such a big oversight on
the OpenMP committee&apos;s part still baffles me: I don&apos;t think I know of any better way to manage
speculative execution than calling &lt;b&gt;abort&lt;/b&gt; from the inlet. What seems to be particularly
ironic is that Cilk itself didn&apos;t get &lt;b&gt;abort&lt;/b&gt; till its version 4. The evolution it went through
is well document in the Introduction to the highly enjoyable paper called:
&lt;a href=&quot;http://supertech.csail.mit.edu/papers/icca99.ps&quot;&gt;Using Cilk to Write Multiprocessor Chess Programs&lt;/a&gt;.
Can OpenMP learn from that experience? Will it have to go through its own painful and slow evolution
just to arrive to the same conclusion? I don&apos;t know, but an issue like this surely belongs to my &quot;what&apos;s wrong with OpenMP 3.0 tasking model&quot; 
list: &lt;ol&gt;&lt;li&gt;&lt;b&gt;Lack of support for speculative tasks&lt;/b&gt;&lt;/li&gt;&lt;/ol&gt;
Finally, the lack of support for &lt;b&gt;SYNCHED&lt;/b&gt; semantics in OpenMP 3.0 hints at a whole area
that is currently underserved by the draft specification: task queue management. However, before I add it
to my list as the third and final item, let me quickly explain why is it important to explicitly manage the task queue. 
You see, before OpenMP 3.0 introduced tasks the runtime had complete knowledge
of the size of any chunk of work that had to be done in parallel. We payed the price of following a very rigid
set of rules for structuring our for loops, but on a flip side we didn&apos;t have to worry about issues like thread starvation
or oversubscription. Everything was sort of static and easy to chunk up. It is not anymore. The tiniest example
of a list traversal (the very same one that Larry uses to explain why tasks are needed) already has a scheduling
problem:
&lt;pre&gt;
#pragma omp parallel
{ 
  #pragma omp single private(p)
   { 
    p = listhead ;
    while (p) { 
       #pragma omp task
               process (p)
       p=next (p) ;
     } 
   } 
}
&lt;/pre&gt;
First of all, we no longer know the size of the entire job like we used to in case of the &lt;b&gt;#pragma omp parallel for&lt;/b&gt;.
Which mens that for a list of gazillion items we will either have to create gazillion tasks at once (not likely) or
to suspend/resume tasks that are trying to create more tasks (how is runtime to know who is the real producer?).
Also, we can no longer give scheduler any hints as to how many iterations of the loop body would constitute a 
reasonable chunk to be given to one thread (scheduling clauses are not applicable to tasks). The API now got much simpler:
we can produce as many tasks as we see fit; and runtime is responsible for scheduling worker threads in order
to complete all of them.  In a sense, we find ourselves
dealing with a classical &lt;a href=&quot;http://en.wikipedia.org/wiki/Producer-consumer_problem&quot;&gt;Producer-consumer problem&lt;/a&gt;.
With a crucial complication that we have no explicit control over the size of the queue, nor do we have any
way for establishing explicit communication between the producer and the consumer. We are left to the mercy of 
a runtime (and hacks like &lt;b&gt;untied&lt;/b&gt; tasks as explained in the BOF slides). We sure deserve better, and 
with that I give you my list of what&apos;s wrong with OpenMP 3.0 tasking model:
&lt;ol&gt;
&lt;li&gt;&lt;b&gt;Lack of support for task queue management&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Lack of support for speculative tasks&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Orphan tasks&lt;/b&gt;&lt;/li&gt;
&lt;/ol&gt;
Do you see anything missing from it? Anything you would like to clarify? All of it is just one &quot;Post comment&quot;
button click away!</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/living_a_dream_in_a</guid>
    <title>Living a dream in a -fast lane</title>
    <dc:creator>rvs</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/living_a_dream_in_a</link>
        <pubDate>Tue, 13 Nov 2007 23:55:20 -0800</pubDate>
    <category>/var</category>
            <description>I guess it is time to confess: I&apos;ve recently had one of my childhood dreams granted.
Of course, as always with dreams, I&apos;ve hesitated to tell anybody but the close friends.
I had to make sure I wasn&apos;t hallucinating. Now it is time.
The cat is out of the bag:
&lt;a href=&quot;http://www.linuxjournal.com&quot;&gt;Linux Journal&lt;/a&gt; published my 
&lt;a href=&quot;http://www.linuxjournal.com/article/9857&quot;&gt;first-ever printed article&lt;/a&gt;
in their 
&lt;a href=&quot;http://www.linuxjournal.com/issue/163&quot;&gt;November issue&lt;/a&gt; (#163, dedicated to
High Performance Computing). And if that wasn&apos;t enough they are distributing
that very issue at the &lt;a href=&quot;http://sc07.supercomputing.org/&quot;&gt;Supercomputing conference&lt;/a&gt; in Reno! 
With all the attendees carrying those issues around (anybody can get one for free from the
Linux Journal booth or from the press shelf at the entrance) it almost feels like I am
on a book signing tour. It feels really great and a bit scary (what if somebody walks
up to me and points out a bug?) at the same time. But it all would have not happened 
it it wasn&apos;t for one person.  A person whom I&apos;m lucky enough to call a friend
and a teacher: Jon &quot;maddog&quot; Hall. Thank you,  Maddog, for the advice and most
of all for babysitting me through my first publishing experience. 
&lt;br&gt;&lt;br&gt;
That said, I would like to ask all the readers of the article to be gentle with me. All
the typos, errors and bloopers in it are mine and mine only and I don&apos;t have any
good excuse except for it being my first foray into printed media. I&apos;ll do better next
time. I promise. So be gentle, but please feel free to leave your comments at
the end of this blog entry, since I don&apos;t think that the comments section on the 
Linux Journal&apos;s web site is open yet. Besides, even if it was open you would
have to be a subscriber of LJ (it is really worth the money, though) to get to it.
&lt;br&gt;&lt;br&gt;
And finally: if you happen to be in Reno attending SC|07 consider dropping by              
the Sun&apos;s booth. Just remember: you can always make my day if you behave
and ask for the autograph. Easy stuff. See you!</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/transistor_overproduction_crisis</guid>
    <title>Transistor overproduction crisis</title>
    <dc:creator>rvs</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/transistor_overproduction_crisis</link>
        <pubDate>Thu, 11 Oct 2007 23:38:55 -0700</pubDate>
    <category>Elegant Computing</category>
    <atom:summary type="html">With every single IT publication now explaining the difficulty of parallelism
and multithreaded programming, one has to wonder why do we have to
go to all this trouble of managing multicore in software. Isn&apos;t it all just a
manifestation of a desperate hardware industry trying to ram surplus of
transistors down developer&apos;s throats much the same way industrial 
agriculture rams the surplus of crops? Are multicore chips going to be as
much a damage to your brain as soft drinks (AKA liquid corn) are a damage
to your stomach? And finally, is there a better way? In other words, what is
the 
&lt;a href=&quot;http://www.treehugger.com/files/2007/01/food_fight_is_c.php&quot;&gt;ethanol revolution&lt;/a&gt;
of the hardware industry?</atom:summary>        <description>It is, perhaps, a little know fact that agricultural overproduction is now considered
to be one of the  biggest contributing factors to the health problems found in most developed
nations in the world. If you don&apos;t quite believe me yet, I really 
recommend reading an eye-opening book 
&lt;a href=&quot;http://www.michaelpollan.com/omnivore.php&quot;&gt;&quot;The Omnivore&apos;s Dilemma&quot;&lt;/a&gt; by 
Michael Pollan (or at least 
&lt;a href=&quot;http://www.michaelpollan.com/article.php?id=88&quot;&gt;his short article&lt;/a&gt;
covering the same subject). For the purpose of this blog entry, however, suffice
it to say that most contraptions of the modern day supermarket are direct
products of food scientist trying to sell you more corn and soy. After all,
at the rate that the industrial agricultural complex produces those crops it would be 
foolish to try and sustain their consumption relying only on their raw form. Human
beings simply can not consume that many corn ears and soy beans. The industry
has to play tricks with us offering soft drinks (Cola, Pepsi, etc.) and chicken
nuggets. It is still the same corn and soy, just packaged differently. And judging
by the number of humans turned into &quot;...Disposall for all the unhealthful calories that the farm 
bill has encouraged American farmers to overproduce&quot; the trick works quite well.&lt;br&gt;&lt;br&gt;

It wasn&apos;t till I spoke with a good friend of mine (who goes by the name Fedor Sergeev
and happens to be one of the key people on Sun Studio Project) that I discovered
a striking similarity: perhaps, hardware industry is trying to turn all software developers into 
Disposal  for transistors that they grossly overproduce. But is there really an overproduction?
After all, Moore&apos;s Law (guaranteeing us doubling of the number of transistors available
on the same chip every 18 moths) used to be a &quot;good thing&quot;. True enough. It used to
be. Approximately till 2003. We had a nice stream of innovative CPUs coming down the
pipeline: 386, 486, Pentium, Pentium Pro, Xeon and finally Itanium. All that time Intel
and others knew pretty well how to put the transistors available to them to a good use.
That is how to build  ALUs, FPUs and conveyors of an ever increasing complexity. With a perfect
hindsight, perhaps, it is not a coincidence that putting transistors to a good use through
overengineering lead to the biggest fiasco of all -- Itanium. The idea tanked, but the
transistors kept coming. In fact they kept being produced at a rate when even implementing
additional logic needed for things like HyperThreading could only consume so much of them.&lt;br&gt;&lt;br&gt;

And lets face it, when all is said and done the hardware industry is in a business of selling 
silicone. As much as industrial agriculture these days is in a business of selling corn and soy.
Both of these industries have a problem: consumers have as little use for pure silicon as they have for raw
corn. So how do you sell 280 million metric tons of corn? SImple: just turn it  into all sorts of &quot;useful&quot;
products ranging from corn syrup all the way to ethanol. How do you sell 500+ million
of transistors? Well, here it gets complicated. On one hand, you can turn them into 
&lt;a href=&quot;http://www.anandtech.com/video/showdoc.aspx?i=2870&amp;p=1&quot;&gt;a really useful product&lt;/a&gt; or you can try
to convince customers that they are getting 
&lt;a href=&quot;http://www.anandtech.com/cpuchipsets/showdoc.aspx?i=2866&quot;&gt;4 &quot;useful&quot; products instead of one&lt;/a&gt;.&lt;br&gt;&lt;br&gt;

The problem I have with the later approach is pretty simple: I am not convinced yet. You see,
I have no qualms about articulating the value proposition of nVidia&apos;s latest video card (and who would?). But
as a software engineer I have to suffer some great pains to really make that Intel&apos;s latest quad-core CPU perform
at a promised level. Could it be that all that PR around all things parallel, multithreaded
and concurrent is no different from the latest Coca Cola commercials -- simply an industry&apos;s attempt
to sell us more stuff we have no use for? At a conceptual level I don&apos;t think it is: after all the most
powerful analytical device know to the human race 
&lt;a href=&quot;http://web.media.mit.edu/~minsky/papers/Alienable%20Rights.html&quot;&gt;happens to be mindbogglingly parallel&lt;/a&gt; so there&apos;s
definitely a need for a better understanding of how to build massively parallel computational and
analytical devices. On the other hand, I slowly start to realize that exposing to software the fact that one CPU now
looks like a dozen might be a dead end. And it doesn&apos;t matter what techniques you use to combat
that complexity (be it transactional memory or Cilk) it just doesn&apos;t seem to get us much.&lt;br&gt;&lt;br&gt;

Yet, those soon to be billion transistors have to be sold (and if they don&apos;t get sold 
&lt;a href=&quot;http://mondediplo.com/1998/02/03deflation&quot;&gt;beware!&lt;/a&gt;), so what are the reasonable choices?
In my opinion (and please, please, please don&apos;t hesitate to express your own in comments!) the
most fruitful directions that I can see are: special devices hidden behind  well defined APIs
(think GPUs and OpenGL) and &lt;a href=&quot;http://en.wikipedia.org/wiki/Fpga&quot;&gt;FPGAs&lt;/a&gt; hidden behind
yet to be invented language facilitating spatial approach to problem solving and algorithms. With
the current trends in &lt;a href=&quot;http://www.codinghorror.com/blog/archives/000732.html&quot;&gt;GPU development&lt;/a&gt;
it seems quite obvious that the first approach is a reasonable one. As for the second, FPGAs
have long been treated as a step child of both the hardware and software industries alike.
I believe that has to be challenged. In the words of Frank Vahid 
&lt;a href=&quot;http://www.cs.ucr.edu/~vahid/pubs/comp07_circuits.pdf&quot;&gt;it&apos;s time to stop calling circuits &quot;Hardware&quot;&lt;/a&gt;.
Instead he suggest, and I quote: &quot;computing departments in universities might reconsider 
how they introduce circuits to their students. We also can broaden our use of the word software beyond just microprocessors. 
In this way, circuits and other modeling approaches with a spatial emphasis can assume their proper role in the increasingly 
concurrent computation world of software development&quot;. And then, perhaps, the two approaches can
even blend together so that every time you go to your local electronic store and ask for a videocard
the sales clerk would reach into a drawer full of generic FPGAs and hand one over to you coupled with
the latest &quot;driver&quot;. Could it be the ultimate software version of the ethanol revolution? I don&apos;t know.
But it sure looks more promising than 
&lt;a href=&quot;http://cc.in2p3.fr/doc/INTEL/tbb/doc/examples/test_all/fibonacci/Fibonacci.cpp&quot;&gt;whan you have to go through&lt;/a&gt;
in order to efficiently compute Fibonacci numbers on a multicore Intel CPU.</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/why_sun_is_fun1</guid>
    <title>Why Sun is Fun</title>
    <dc:creator>rvs</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/why_sun_is_fun1</link>
        <pubDate>Tue, 9 Oct 2007 21:02:04 -0700</pubDate>
    <category>/var</category>
            <description>I&apos;ve just got back from a conference dubbed by most of my friends
as &lt;a href=&quot;http://agora.guru.ru/display.php?conf=abrau2007&quot;&gt;Russian
Super Computing&lt;/a&gt;
and I must say that it was quite an event. Lots of people
asking lots of really good technical questions on what Sun is doing about
&lt;a href=&quot;http://developers.sun.ru/hpc&quot;&gt;HPC in Russia&lt;/a&gt; and what is our
strategy in general. The most curious question, however, happened to
be non-technical at all. A guy asked me what&apos;s the best thing about Sun
and what&apos;s the worst thing about Sun. And you know what, the answer
to both parts of this question happens to be the
&lt;a href=&quot;http://blogs.sun.com/jag/date/20070830&quot;&gt;same one&lt;/a&gt;. You can&apos;t
beat the euphoria feeling you get from being able to work 
with the guys who could crank up something like that in 1992. That&apos;s the
best part. The worst one? Well, how about sales/marketing/etc who
couldn&apos;t sell something like that till iPhone happened to be announced some
15 years later. But hey -- I&apos;m an engineer and Sun is my eternal playground.
Why, I can even forgive the sales guys -- at least they didn&apos;t turn Duke
into something like &lt;a href=&quot;http://en.wikipedia.org/wiki/Microsoft_Bob&quot;&gt;Bob&lt;/a&gt;.</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/jail_time_for_ssh</guid>
    <title>Jail time for SSH</title>
    <dc:creator>rvs</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/jail_time_for_ssh</link>
        <pubDate>Fri, 24 Aug 2007 20:15:17 -0700</pubDate>
    <category>LIN(U[ni]X)</category>
    <category>security</category>
    <atom:summary type="html">Long time ago in the galaxy not so far away when you had to upload a
file to your friend you would call him up and have a ZMODEM session.
With this new fad called Internet it is all about SSH of course. 
But is the default configuration secure enough? Is creating an account
for a friend who needs to upload a file to you all you need? How do
you communicate credentials?
</atom:summary>        <description>&lt;p&gt;
Long time ago in the galaxy not so far away when you had to upload a
file to your friend you would call him up and have a ZMODEM session.
With this new fad called Internet it is all about SSH of course. 
But is the default configuration secure enough? Is creating an account
for a friend who needs to upload a file to you all you need? How do
you communicate credentials?

&lt;p&gt;
In fact, if you don&apos;t want to futz with GnuPG and send your buddy a
an encrypted email with a login name and a password to go with it, your
choice is a rather limited one: either call him up or assume that
this information could be leaked. In fact, assume that you&apos;re building
a public upload site and build your security model based on that assumption.
In particular it makes sense to build your solution so that:  
&lt;ol&gt;
   &lt;li&gt;The only subset of your filesystem visible to anybody coming from
       the outside is strictly limited
   &lt;li&gt;The only thing that a user from the outside can do is to upload a file
       to a specific location
&lt;/ol&gt;

&lt;p&gt;
How hard can it be to build a rig that would satisfy the requirements outlined
above? My initial estimate was about 15 minutes. After all, the only thing you
have to do to satisfy visibility aspect is to get creative with 
&lt;a href=&quot;http://www.bpfh.net/simes/computing/chroot-break.html&quot;&gt;chroot&lt;/a&gt; and the
second item is a simple matter of a proper shell entry in the /etc/passwd. 
Right? Wrong! It took me about 4 hours to make it all work and I blame at least
3 of those hours on 
&lt;a href=&quot;http://blogs.sun.com/rvs/entry/does_linux_really_need_to&quot;&gt;
GNU libc being a bloated complicated mess&lt;/a&gt;.

&lt;p&gt;
But I&apos;m getting a bit ahead of myself. Lets talk about user model first. What
I wanted my friend to be able to do was to issue a simple:
&lt;pre&gt;
    $ scp fileIneed publicscp@my.comcast.ip.address: 
&lt;/pre&gt;
on his end and be done. Of course, to properly support that command on a server
side with all the additional security requirements you have to know exactly what
it translates to on the receiving end. How do you figure that out? Simple, you
create a user called test and put the following into the /etc/passwd:
&lt;pre&gt;
    test:x:40000:40000::/tmp:/bin/echo
&lt;/pre&gt;
Now, you can see what sshd actually does when it establishes a connection
for the scp session by simply trying to establish that session in the first
place and looking in the log files (I guess you can also read a bit of
OpenSSH docs, but manuals are for wimps ;-)). Curious? Well, here&apos;s what
actually gets executed whenever somebody does scp:
&lt;pre&gt;
    $ scp dummy.txt test@localhost:/tmp
    Password:
    -c /usr/bin/scp -t /tmp 
&lt;/pre&gt;
See that &apos;-c&apos; option? Of course sshd expects /bin/echo to be a full fledged
shell and the way you tell shell what to execute is via the -c option. Which
means that even though we only want scp functionality to be provided sshd is still
capable of running anything that the remote user might request (provided,
of course, that what is specified in /etc/passwd is, indeed a shell). 
But what if the only thing that our pseudo-shell was capable of were to
do an scp transfer? What if, in fact, our pseudo shell was an /usr/bin/scp?  
And not just a regular /usr/bin/scp, but a statically linked one. So that
it can be run in a  
&lt;a href=&quot;http://www.unixwiz.net/techtips/chroot-practices.html&quot;&gt;chrooted&lt;/a&gt;
environment so isolated that the only file in it would be scp itself (after all, if it is
statically linked we don&apos;t even need /lib/libc.so). Would such an architecture
be pretty secure compared to the default install? I thought it would (and I would
love to hear real security experts to prove me wrong in the comments!). 

&lt;p&gt;
But how do we rig it that way? First of all our publicscp user can not really have 
/usr/bin/scp as a shell in his /etc/passwd entry. That is because of the extra 
&apos;-t /tmp&apos; option -- you can&apos;t specify options in /etc/passwd. This calls for a tiny C wrapper:
&lt;code&gt;$ cat scp-wrapper.c
#include &amp;lt;unistd.h&amp;gt;

int main()
{
    return execl(&quot;/home/publicscp/scp-static&quot;, &quot;scp&quot;, &quot;-t&quot;, 
                 &quot;/home/publicscp&quot;, NULL);
}
$ cc -static -o scp-wrapper scp-wrapper.c
&lt;/code&gt;
And speaking of scp-static, it should be nothing more than a statically built version
of the /usr/bin/scp. You can pull this trick off by downloading source code for
the OpenSSH, building it the normal way, removing scp binary, saying make once
again, capturing the link step and finally doing it manually with an extra &apos;-static&apos;
option added at the very begging of the gcc command line options. Rename scp into
scp-static to reflect its static nature and copy it along with scp-wrapper to
the /home/publicscp. The only step left is to add the following to /etc/passwd:
&lt;pre&gt;
   publicscp:x:30000:30000::/home/publicscp:/home/publicscp/scp-wrapper 
&lt;/pre&gt;

&lt;p&gt;
Now we&apos;ve got everything ready to also make /home/publicscp directory be the chrooted 
jail for publicscp. Our goal is to make /scp-static and /scp-wrapper the only visible files (note
the leading slashes -- even though we&apos;ve copied these files to /home/publicscp
after you do chroot(&quot;/home/publicscp&quot;); they become visible as though they were copied
to the root of the filesystem AND nothing outside of /home/publicscp can be ever accessed).
But wait! Look how our wrapper passes &apos;-t /home/publicscp&apos; to the scp commad; once
chrooted, that path actually has to exist. Which means we would have to create
/home/publicscp/home/publicscp. Ok, the next question is -- how do we actually do
the chroot&apos;ing on every login session of publicscp? Turns out that on Linux there is
a PAM module called &lt;a href=&quot;http://directory.fsf.org/pam_chroot.html&quot;&gt;pam_chroot&lt;/a&gt;
that does exactly what is need. The only thing that is required is to add it to 
the /etc/pam.d/sshd and specify /home/publicscp as a publicscp&apos;s chrooted jail in 
/etc/security/chroot.conf. Oh, and since it will be a chrooted environment it might
make sense to duplicate scp-wrapper and scp-static at /home/publicscp/home/publicscp
level. Just in case ;-)

&lt;p&gt;
Ready! Set! scp! Fail! What? Well, this joke is on me. I should&apos;ve known that most
non trivial applications require at least /dev/null to be created and that seems
to be exactly what scp is complaining about. mknod /home/publicscp/dev/null to the rescue!

&lt;p&gt;
Take two! Failure again! This time the message is rather cryptic: unknown user 30000.
Good news is that a quick search in the scp.c source code turns this fragment as
the culprit:
&lt;code&gt;if ((pwd = getpwuid(0)) == NULL)
    printf(&quot;unknown user %u&quot;, (u_int) userid);
&lt;/code&gt;
so that at least we can isolate it into test.c, compile statically and try to
execute in a chrooted environment:
&lt;code&gt;# cat test.c
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;pwd.h&amp;gt;

int main() {
        uid_t userid;
        struct passwd *pwd;
        if ((pwd = getpwuid(0)) == NULL)
                printf(&quot;unknown user %u&quot;, (u_int) userid);
        return 0;
}
# cc -static -o /home/publicscp/test test.c
# chroot /home/publicscp /test
unknown user 0
&lt;/code&gt;

&lt;p&gt;
At this point a more UNIX literate reader would exclaim: &quot;Of course! You forgot
to provide /home/publicscp/etc/nsswitch.conf and /home/publicscp/etc/passwd
for getpwuid to work properly&quot; and if I only could hear that voice it would
have saved me 45 minutes right there (I knew that passwd
was needed after about 3 minutes, the rest 42 of them was occupied by
not remembering nsswitch.conf). After an hour here&apos;s the environment I had:
&lt;code&gt;$ cd /home/publicscp
$ find \! -type d
./scp-wrapper
./scp-static
./dev/null
./etc/passwd
./etc/nsswitch.conf
./home/publicscp/scp-static
./home/publicscp/scp-wrapper
&lt;/code&gt;
The only problem with it was -- it still didn&apos;t work.

&lt;p&gt;
I don&apos;t know why GNU libc has to be that way, but reading its source code is
like pulling teeth. You can&apos;t understand anything! It is the worst kind
of software obfuscation that I have seen since sendmail.cf. Add to it the
fact that you can&apos;t really debug anything inside the chrooted environment because,
you know what, debugger is a dynamically linked binary and you can easily 
see how I spent next 3 hours reverse engineering nss in glibc only to uncover
the most hideous crime of all -- GNU libc dlopens itself from within the
code linked into my static scp-static! I think Ulrich Drepper has now
officially crossed the line. It is one thing to 
&lt;a href=&quot;http://people.redhat.com/drepper/no_static_linking.html&quot;&gt;spread false rumors about static linking&lt;/a&gt;.
But it is bordering on illegal behavior to actually subvert static
linking like that. That, plus he now officially owes me 3 hours of quality
time. Can a person be sued for something like that? Oh well...

&lt;p&gt;
With that final mystery solved (and yet another atrocity committed by GNU libc) I had
an environment that looked like this:
&lt;code&gt;# grep publicscp /etc/passwd 
publicscp:x:30000:30000::/home/publicscp:/home/publicscp/scp-wrapper
# cat /etc/security/chroot.conf
publicscp   /home/publicscp
# tail -1 /etc/pam.d/sshd
session    required     pam_chroot.so
# cd /home/publicscp
# find \! -type d
./lib/ld-linux.so.2
./lib/libnss_files.so.2
./lib/libc.so.6
./scp-wrapper
./scp-static
./dev/null
./etc/passwd
./etc/nsswitch.conf
./home/publicscp/scp-static
./home/publicscp/scp-wrapper
# cat etc/passwd
publicscp:x:30000:30000::/home/publicscp:/home/publicscp/scp-wrapper
# cat etc/nsswitch.conf
passwd:        files 
&lt;/code&gt;
And what&apos;s even more important overnight I had /home/publicscp/home/publicscp/fileIneed.tgz
uploaded to me. 

&lt;p&gt;
P.S. Thank you Leha! ;-)  </description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/the_problem_with_threads</guid>
    <title>The problem with threads</title>
    <dc:creator>rvs</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/the_problem_with_threads</link>
        <pubDate>Mon, 30 Jul 2007 14:50:51 -0700</pubDate>
    <category>/dev/braindump</category>
    <atom:summary type="html">With Intel and AMD introducing Quad core systems and Sun pushing the envelope even further with its first hexadeca-core CPU named Rock the question that software industry has to ask itself is: are we ready to make all these threads of execution do useful work for us? My strong opinion is that we are not ready. A new paradigm is yet to be invented and we don&apos;t really know what it should look like. We do, however, seem to know what it should NOT look like. It definitely should not look like POSIX threads.
What&apos;s wrong with POSIX threads you ask?</atom:summary>        <description>With Intel and AMD introducing 
&lt;a href=&quot;http://blogs.zdnet.com/Ou/?p=492&quot;&gt;Quad core systems&lt;/a&gt; and Sun pushing the envelope even further with
its first hexadeca-core CPU named &lt;a href=&quot;http://blogs.sun.com/jonathan/entry/rock_arrived&quot;&gt;Rock&lt;/a&gt;
the question that software industry has to ask itself is: are we ready to make all these threads of
execution do useful work for us? My strong opinion is that we are &lt;b&gt;not&lt;/b&gt; ready. A new paradigm is yet to be invented
and we don&apos;t really know what it should look like. We do, however, seem to know what it should NOT look like. It definitely
should not look like POSIX threads.
&lt;br&gt;
What&apos;s wrong with POSIX threads you ask? Well, lots and if you want to get a really good treatment of
the subject matter delve into an excellent 
&lt;a href=&quot;http://www.eecs.berkeley.edu/Pubs/TechRpts/2006/EECS-2006-1.pdf&quot;&gt;article by Prof. Edward A. Lee&lt;/a&gt;
where he rightfully postulates that:
&lt;blockquote&gt;
Threads discard the most essential and appealing properties of sequential computation: understandability, predictability, and determinism.
&lt;/blockquote&gt;
Of course, the key word here is &lt;b&gt;determinism&lt;/b&gt;. What POSIX shared memory threading model does is it turns a fundamentally determimistic
&lt;a href=&quot;http://en.wikipedia.org/wiki/Von_Neumann_architecture&quot;&gt;von Neumann architecture&lt;/a&gt; on its head by wreaking havoc
on how memory gets used during computation to store intermediate results. What you get with POSIX threads is that even the code as simple
as:
&lt;pre&gt;
a = a*2;
&lt;/pre&gt;
might be broken by a different thread accessing the same memory locations. And with modern languages like C++ knowing
when memory gets accessed could be a very complex proposition. After all, those &apos;a&apos; variables could have very well been objects
of a class with an &apos;operator*&apos; overloaded, couldn&apos;t they? And the more you think about it the deeper the rabbit hole
goes. Until you find yourself under a total paranoia spell: all of a sudden you don&apos;t trust anybody with your shared data
and you start putting locks everywhere. Which, in turn, usually makes performance of your code plummet.
&lt;blockquote&gt;
The problem is that we have chosen concurrent abstractions that do not even vaguely resemble the concurrency of the 
physical world. [...] Nondeterminism should be explicitly added to programs, and only where needed, as it is in sequential
programming. Threads take the opposite approach. They make programs absurdly nondeterministic, and rely on programming
style to constrain that nondeterminism to achieve deterministic aims.
&lt;/blockquote&gt;
True words, indeed. Especially when you start considering how much do we struggle with, what Prof. Lee calls &apos;constraining
nondeterminism&apos; even at a very basic syntactic level. You see, even though syntactic constructs such as &apos;synchronized&apos; keyword
from Java help a bit, they don&apos;t really solve a fundamental problem of expressing transactional properties. Take a look
at this code:
&lt;pre&gt;
if (buffer_size &lt; my_chunk)
    wait_for_data_to_arrive();
buffer_size -= my_chunk;
process_my_chunk_of_data(my_chunk);
&lt;/pre&gt;
If we want to make it thread-safe *and* efficient we have to make sure that the above sequence is, at the same time
atomic (perhaps all the way till the process_my_chunk_of_data() call happens) &lt;b&gt;and&lt;/b&gt; interruptible (after all,
it&apos;ll be pointless to go wait_for_data_to_arrive() if nobody can modify the buffer while we sleep). The closest
we can get in expressing that very predicate is the following code, which is as ugly as it is suboptimal:
&lt;pre&gt;
synchronized(buffer) {
   while (buffer_size &lt; my_chunk)
          wait(); 
   buffer_size -= my_chunk;
}
process_my_chunk_of_data(my_chunk);
&lt;/pre&gt;
Look how we had to change an easy to follow if-logic into a totally insane while cycle. To quote Prof. Lee once again:
&lt;blockquote&gt;
To offer a third analogy, a folk definition of insanity is to do the same thing over and over again and to expect
the results to be different. By this definition, we in fact require that programmers of multithreaded systems be
insane. Were they sane, they could not understand their programs.
&lt;/blockquote&gt;
That&apos;s right. Paranoid and insane. And also wasteful. Why? Well, at least in Java when you do notify() to wake
that thread doing the wait() call -- you don&apos;t release your lock immediately. You have to exit the synchronized()
block for that to happen. You have to remember all those nuisances in order to avoid tons of potential mistakes
such as deadlocks, race conditions, spurious wakeups and quite a few more. And that makes a successful design of a properly synchronized systems
based on POSIX threads more of an exception, than a rule. Here&apos;s a scary, yet so cassandranesque passage from 
the article:
&lt;blockquote&gt;
I conjecture that most multithreaded general-purpose applications are, in fact, so full of concurrency bugs
that as multi-core architectures become commonplace, these bugs will begin to show up as systems failures. This
scenario is bleak for computer vendors: their next generation of machines will become widely known as the ones
on which many programs crash. These same computer vendors are advocating more multi-threaded programming, so that there
is concurrency that can exploit the parallelism they would like to sell us. Intel, for example, has
embarked on an active campaign to get leading computer science academic programs to put more
emphasis on multi-threaded programming. If they are successful, and the next generation of pro-
grammers makes more intensive use of multithreading, then the next generation of computers will
become nearly unusable.
&lt;/blockquote&gt;
Scary, huh? Well, it scares me allright. And even thought, I don&apos;t really agree with the solution
proposed in the article, I must say that its key conclusion is worths to be memorized and repeated
like a mantra:
&lt;blockquote&gt;
If we expect concurrent programming to be mainstream, and if we demand reliability and pre-
dictability from programs, then we must discard threads as a programming model. Concurrent
programming models can be constructed that are much more predictable and understandable than
threads. They are based on a very simple principle: deterministic ends should be accomplished
with deterministic means. Nondeterminism should be judiciously and carefully introduced where
needed, and should be explicit in programs. This principle seems obvious, yet it is not accomplished 
by threads. Threads must be relegated to the engine room of computing, to be suffered only
by expert technology providers.
&lt;/blockquote&gt;
&lt;br&gt;
P.S. For somebody who is still not convinced that being paranoid and insane isn&apos;t all that fun, I highly recommend
jumping right into chapter 4: &quot;How Bad is it In Practice?&quot;. Follow the examples given there. Once you&apos;re done
go to your bookshelf and dust off that old copy of &lt;a href=&quot;http://www.amazon.com/Design-Patterns-Object-Oriented-Addison-Wesley-Professional/dp/0201633612&quot;&gt;&quot;Design Patterns&quot;&lt;/a&gt;. 
Open it up in a random place and apply multithreaded thinking. Repeat until you achieve enlightenment.</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/sun_studio_and_sxde_live</guid>
    <title>Sun Studio and SXDE Live Chat</title>
    <dc:creator>rvs</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/sun_studio_and_sxde_live</link>
        <pubDate>Mon, 23 Jul 2007 18:21:08 -0700</pubDate>
    <category>Sun Studio</category>
            <description>I would like to invite all of the developers out there to join a bunch of my colleagues and myself in the Live Chat event
that we&apos;re putting together to discuss anything that is related to the software development on Solaris. We would be 
answering your questions on 
&lt;a href=&quot;http://developers.sun.com/sxde&quot;&gt;Solaris Express Developer Edition&lt;/a&gt;, 
&lt;a href=&quot;http://developers.sun.com/sunstudio&quot;&gt;Sun Studio&lt;/a&gt;, &lt;a href=&quot;http://www.sun.com/hpc&quot;&gt;HPC&lt;/a&gt; and talking about
all things related to the development process starting from how come we still have /usr/sfw/bin all the way
to whether or not iPod support is part of the proper developer&apos;s desktop. The event will run from 24th of July all the way
to 27th of July every day from 9am-11am PST. All you have to do is just click on the 
&lt;a href=&quot;http://www1.avivocom.com/sun/banner.html&quot;&gt;Live Chat link&lt;/a&gt; and you should be good to go. The whole thing looks
strikingly similar to a &quot;public&quot; IM and is quite simple to use.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;P.S.&lt;/b&gt; Come on! Bring your embarrassing questions with you, &apos;cause you know what -- quoting snippets of this upcoming live chat
might just be the best way to convince PHBs around here. After all you &lt;b&gt;are&lt;/b&gt; the customers and you know what that means.</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/git_yet_another_scm_system</guid>
    <title>Git: yet another SCM system or a revolutionary model of software development?</title>
    <dc:creator>rvs</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/git_yet_another_scm_system</link>
        <pubDate>Wed, 20 Jun 2007 12:16:05 -0700</pubDate>
    <category>Sun Studio</category>
            <description>I have recently come across the video recording of Linus Torvalds himself arguing
a case for &lt;a href=&quot;http://git.or.cz/&quot;&gt;Git&lt;/a&gt; as the ultimate source code
management system. The presentation is done in the usual trademark Linus style
(which I happen to like immensely since it seems to be the only way to wake up
the audience sufficiently enough to be engaged in a conversation) but the issues
he tackles are very poignant and go far beyond the merits of a particular SCM
system into a realm of what is the best tool for automating highly decentralized
peer-reviewed software development model:
&lt;ol&gt;
  &lt;li&gt;Distributed vs. centralized development. &lt;br&gt;Bottom line: centralized SCMs
      run against the proverbial Bazaar.&lt;/li&gt;
  &lt;li&gt;Using networks of trust as the key means of conquering complexity of the
      modern software projects and dealing with compartmentalization of
      key developers/experts. &lt;br&gt;Bottom line: SCM should reflect how humans are wired.&lt;/li&gt;
  &lt;li&gt;How to keep the pace of development activity at the highest possible level
      (by making it cheap and easy to experiment and not care about breaking other stuff)
      yet allow the easiest transition path for the changes that seem to be
      beneficial for the project. &lt;br&gt;Bottom line: branch early, branch often.&lt;/li&gt;
  &lt;li&gt;Developers vs. gate keepers and why the problems they face are
      fundamentally different. &lt;br&gt;Bottom line: even the best branching is useless without
      merging&lt;/li&gt;
&lt;/ol&gt;
I find his arguments about why CVS is the most braindead SCM ever invented and
why Subversion simply denies itself the right to exist by proclaiming that they
are the CVS done right quite convincing. Especially so when they are coming from
a guy who has a project of ~22000 files to maintain and does about 25 merges
per day. His main pain points with CVS/Subversion hit very close to home:
&lt;ol&gt;
   &lt;li&gt;There is no data coherency model to write home about. Which might not
       be a problem for most projects but certainly is for something as security
       sensitive as an OS kernel. Basically with CVS (and I think even Subversion)
       the only way you know that your data got corrupted is when its too late.
   &lt;li&gt;Branching is waaay too painful because of things like global
       namespace for branches (read: constant collisions and things like
       test_12345 branches), all branches being pushed down every developer&apos;s throat, etc.
   &lt;li&gt;Subversion patches certain things as far as branches go, but fails miserably
       as far as merging is concerned.
   &lt;li&gt;The tools you use are supposed to make you more productive. Period.
&lt;/ol&gt;
Now, I must admit that as much as he was successful at positioning Git to look as the
best tool for the job I am still not convinced on two accounts:
&lt;ol&gt;
   &lt;li&gt;Does git really offer a nice way of structuring complex projects like KDE and such?
       His suggestion of Super projects (workspaced with pointers to individual
       Git repositories) might be an interesting one, but it certainly requires
       some practice and experience to be evaluated properly.
       [2008 Update: It seems that this is no longer an issue. Git got the infrastructure
        for supporting Submodules and from &lt;a href=&quot;http://git.or.cz/gitwiki/GitSubmoduleTutorial&quot;&gt;
        what it documented on their TWiki&lt;/a&gt; looks like they got it right]
   &lt;li&gt;Is the approach Git takes with making it easier to work with projects as
       a whole at an expense of treating projects as collection of files the right one?
       See the problem is -- I&apos;m much more of a lone developer
       than a gatekeeper. So Git might be optimizing for the role I rarely
       find myself in (and Linus finds all the time)
&lt;/ol&gt;
But regardless of these concerns I highly recommend you watch the presentation
yourself  -- it is well worth it. Just keep in mind one thing: just before
the BitKeeper (something Linus seems to have very fond memories of)
Lary used to develop this little project called
&lt;a href=&quot;http://en.wikipedia.org/wiki/TeamWare&quot;&gt;TeamWare&lt;/a&gt; here at Sun.
What was TeamWare? Well it was &quot;a distributed source code revision control system...
which BitKeeper seems to share a number of design concepts with&quot;.
&lt;br&gt;
&lt;center&gt;&lt;object width=&quot;425&quot; height=&quot;350&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://www.youtube.com/v/4XpnKHJAok8&quot;&gt;&lt;/param&gt;&lt;param name=&quot;wmode&quot; value=&quot;transpare
nt&quot;&gt;&lt;/param&gt;&lt;embed src=&quot;http://www.youtube.com/v/4XpnKHJAok8&quot; type=&quot;application/x-shockwave-flash&quot; wmode=&quot;transparent&quot; width=&quot;425&quot; height=&quot;350&quot;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/center&gt;
</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/if_you_think_that_xml</guid>
    <title>If you think that XML is the answer, chances are you misunderstood the question</title>
    <dc:creator>rvs</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/if_you_think_that_xml</link>
        <pubDate>Mon, 18 Jun 2007 14:24:09 -0700</pubDate>
    <category>Elegant Computing</category>
            <description>But people try to apply XML to everything they see nevertheless. Sometimes, however,
the results are not just sad, but downright spooky:
&lt;pre&gt;
Date: Wed, 23 May 2007 10:11:57 +0200
From: Lluis Batlle &lt;viriketo@gmail.com&gt;
Subject: Re: [9fans] XML
To: Fans of the OS Plan 9 from Bell Labs &lt;9fans@cse.psu.edu&gt;

Lately I&apos;ve been told at work to use a library in C. Most calls have
the signature

  ErrorType function(const char *xml);

I have to pass to them xmls of more than two levels deep, attributes,
and around ten elements.

When I asked why such interface to a library, claiming that it was
uncomfortable to me, the lib developer told me that in fact
xml-parameter-passing was one of the techniques he liked most, and
helped him solve a lot of problems easily.
&lt;/pre&gt;
</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/c_stl_still_paying_for</guid>
    <title>C++ STL: still paying for what I don&apos;t use.</title>
    <dc:creator>rvs</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/c_stl_still_paying_for</link>
        <pubDate>Sat, 16 Jun 2007 21:53:14 -0700</pubDate>
    <category>Elegant Computing</category>
            <description>One of the great tenets of C++ has always been: &quot;you don&apos;t
pay for what you don&apos;t use&quot;. Bjorn seems to use this very
line everytime he bashes Java or LISP-like languages. The later
is especially noteworthy since he is usually pretty honest
in acknowledging that functional languages do posses a number
of important qualities such as having an expressive power
of writing
&lt;a href=&quot;http://haskell.org/haskellwiki/Introduction#Quicksort_in_Haskell&quot;&gt;
qsort as a trivial two liner&lt;/a&gt;
&lt;pre&gt;
 qsort []     = []
 qsort (x:xs) = qsort (filter (&lt; x) xs) ++ [x] ++ qsort (filter (&gt;= x) xs)
&lt;/pre&gt;
at the expense of wasting quite a lot of precious resources such
as RAM and CPU cycles.
&lt;br&gt;&lt;br&gt;
Now, from time to time I see folks
&lt;a href=&quot;http://groups.google.com/group/comp.os.plan9/browse_thread/thread/757b6311b094dc25&quot;&gt;
showing examples&lt;/a&gt; of C++ code bordering on the same expressive
power. Take this little word counter ($ wc -w) for example:
&lt;pre&gt;
int main() {
   std::cout &lt;&lt; std::distance(std::istream_iterator&lt;std::string&gt;(std::cin),
                              std::istream_iterator&lt;std::string&gt;());
   return 0;
}
&lt;/pre&gt;
It looks impressive if nothing else, and since it is, after all, C++ everybody expects it to perform quite well. But does it?
&lt;br&gt;&lt;br&gt;
To answer this question without dragging the reader into the dark realms
of assembly language or black art of performance measurements I would
really love to have a
&lt;a href=&quot;http://gcc.gnu.org/ml/gcc/2003-08/msg01496.html&quot;&gt;good old Cfront&lt;/a&gt;
around. Or any other tool for that matter that would be able to retrace what
exactly all the templates and overloaded functions got expanded into. Alas, I
don&apos;t know of any such tool (if you do -- please leave a comment!). So bear
with me while I&apos;ll be using my stop watch ;-)
&lt;br&gt;&lt;br&gt;
For the speed trial lets compare it to the similar code written in C (and
to make it fair I am going to even use scanf instead of a handcrafted code):
&lt;pre&gt;
int main()
{
    int count;
    char buf[65535];
    for (count = 0; scanf(&quot;%s&quot;, buf) != EOF; count++)
         ;
    return printf(&quot;count %d\n&quot;, count);
}
&lt;/pre&gt;
Not that I am surprised, but C++ version ended up being 1.5 slower on my machine. And
if you compile the above example into .s file and look at what main() turned out
to be you can see a reason why. There is about 6 function calls there. Pretty much
nothing got inlined or computed in-place.
&lt;br&gt;&lt;br&gt;
Bad implementation of a fine idea? Perhaps (I tried two: G++ and Sun Studio). But it
makes one wonder why in 28 years the world hasn&apos;t yet seen a good implementation. It&apos;s
not that the industry hasn&apos;t tried, you know.
&lt;br&gt;&lt;br&gt;
Am I hearing the ghostly murmur of
&lt;a href=&quot;http://www.cs.utexas.edu/users/EWD/transcriptions/EWD00xx/EWD32.html&quot;&gt;Algol 68&lt;/a&gt; or is it just my imagination?
</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/a_sandbox_for_playing_with</guid>
    <title>A sandbox for playing with the coolest CPU around.</title>
    <dc:creator>rvs</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/a_sandbox_for_playing_with</link>
        <pubDate>Fri, 15 Jun 2007 18:18:34 -0700</pubDate>
    <category>Sun Studio</category>
            <description>For quite sometime now I&apos;ve been giving these presentations
on how the layman&apos;s understanding of the Moore&apos;s Law is dead
and how the world is embracing the multicore (CMT) model.
The usual question I get whenever I convince people that this is,
in fact, the case seems to be: &quot;But how can I jumpstart my
foray into this magical world of parallel computing?&quot; My usual
answer to that has been: get your hands on the only 8 core
CPU available today in the market --
&lt;a href=&quot;http://www.sun.com/processors/UltraSPARC-T1/&quot;&gt;UltraSPARC T1&lt;/a&gt;
by applying for the
&lt;a href=&quot;https://www.sun.com/tryandbuy/products.jsp&quot;&gt;Try&apos;n&apos;Buy program&lt;/a&gt;.
&lt;br&gt;&lt;br&gt;
Well, now I&apos;ve got an even better answer for all of the OpenSource developers
out there: you can ssh into one of these things: ssh.sundemo.ru!
&lt;br&gt;&lt;br&gt;
That&apos;s right. Apply for the account on the
&lt;a href=&quot;http://www.sundemo.ru/register/servlet&quot;&gt;Sun Studio Demo Server&lt;/a&gt;
and hack away!
&lt;br&gt;&lt;br&gt;
P.S. Even thought the form is in Russian, here&apos;s what the individual
fields mean:
&lt;ol&gt;
   &lt;li&gt;First name
   &lt;li&gt;Last name
   &lt;li&gt;E-Mail
   &lt;li&gt;Address
   &lt;li&gt;Phone
&lt;/ol&gt;
The last one is a pretty generic EULA check box.
&lt;br&gt;&lt;br&gt;</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/roboinvasion_linuxtag_2007</guid>
    <title>Roboinvasion @LinuxTAG 2007</title>
    <dc:creator>rvs</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/roboinvasion_linuxtag_2007</link>
        <pubDate>Sun, 10 Jun 2007 21:04:17 -0700</pubDate>
    <category>Sun Studio</category>
    <atom:summary type="html">Ever since
&lt;a href=&quot;http://forum.java.sun.com/thread.jspa?threadID=5072293&amp;tstart=240&quot;&gt;
Sun Studio compilers and tools started to support
Linux&lt;/a&gt; we&apos;ve been present at various Linux shows and LinuxTAG
in Germany has always ranked pretty high on the list. This year,
however, we had a very special reason to make it to LinuxTAG: it
just so happened that the release date for
&lt;a href=&quot;http://developers.sun.com/sunstudio&quot;&gt;Sun Studio 12&lt;/a&gt; (our first
release ever to officially support Linux at the
same level Solaris has always been supported) coincided perfectly
with the
&lt;a href=&quot;http://www.linuxtag.org/2007/en&quot;&gt;LinuxTAG 2007 in Berlin&lt;/a&gt;.
Add to it the fact that
&lt;a href=&quot;http://developers.sun.com/solaris/downloads/solexpdev/&quot;&gt;
Solaris Express Developer Edition 6/07&lt;/a&gt; was supposed to
have its release around the same timeframe and it doesn&apos;t take a
genius to figure out that we had to do something extraordinary
for all those hardworking C, C++ and Fortran developers out there.
The &lt;i&gt;real&lt;/i&gt; developers. We had a couple of ideas like having
a contest similar to the
&lt;a href=&quot;http://code.google.com/soc/&quot;&gt;Google&apos;s Summer of Code&lt;/a&gt;
or just bringing a couple of kegs of beer on site but they all
either were too heavyweight to pull off in just a couple of weeks
or downright illegal. Finally we&apos;ve asked ourselves a very basic
question: since we all &lt;i&gt;are&lt;/i&gt;, in fact developers, what would we,
personally, get excited about? I hate to say it but it turned out
that the BSD community had beaten us to a punch with the idea
that was unanimously deemed to be the
&lt;a href=&quot;http://www.fozzilinymoo.org/events/2001-LWCE-NY/images/0131/bsd-devilettes.jpg&quot;&gt;
most exciting  one&lt;/a&gt;, so we had to opt out for programmable robots.
After all, it is much easier to control a robot, you know.
&lt;br&gt;&lt;br&gt;
And that&apos;s how controlling a
&lt;a href=&quot;http://mindstorms.lego.com/&quot;&gt;LEGO Mindstorm NXT&lt;/a&gt; robot
using Solaris Express Developer Edition and Sun Studio has
become THE whole point of the contest:
&lt;br&gt;&lt;br&gt;
&lt;center&gt;&lt;img src=&quot;http://blogs.sun.com/rvs/resource/RobotContestPoster.png&quot;/&gt;&lt;/center&gt;
&lt;br&gt;
Here&apos;s a funny bit of trivia...</atom:summary>        <description>Ever since
&lt;a href=&quot;http://forum.java.sun.com/thread.jspa?threadID=5072293&amp;tstart=240&quot;&gt;
Sun Studio compilers and tools started to support
Linux&lt;/a&gt; we&apos;ve been present at various Linux shows and LinuxTAG
in Germany has always ranked pretty high on the list. This year,
however, we had a very special reason to make it to LinuxTAG: it
just so happened that the release date for
&lt;a href=&quot;http://developers.sun.com/sunstudio&quot;&gt;Sun Studio 12&lt;/a&gt; (our first
release ever to officially support Linux at the
same level Solaris has always been supported) coincided perfectly
with the
&lt;a href=&quot;http://www.linuxtag.org/2007/en&quot;&gt;LinuxTAG 2007 in Berlin&lt;/a&gt;.
Add to it the fact that
&lt;a href=&quot;http://developers.sun.com/solaris/downloads/solexpdev/&quot;&gt;
Solaris Express Developer Edition 6/07&lt;/a&gt; was supposed to
have its release around the same timeframe and it doesn&apos;t take a
genius to figure out that we had to do something extraordinary
for all those hardworking C, C++ and Fortran developers out there.
The &lt;i&gt;real&lt;/i&gt; developers. We had a couple of ideas like having
a contest similar to the
&lt;a href=&quot;http://code.google.com/soc/&quot;&gt;Google&apos;s Summer of Code&lt;/a&gt;
or just bringing a couple of kegs of beer on site but they all
either were too heavyweight to pull off in just a couple of weeks
or downright illegal. Finally we&apos;ve asked ourselves a very basic
question: since we all &lt;i&gt;are&lt;/i&gt;, in fact developers, what would we,
personally, get excited about? I hate to say it but it turned out
that the BSD community had beaten us to a punch with the idea
that was unanimously deemed to be the
&lt;a href=&quot;http://www.fozzilinymoo.org/events/2001-LWCE-NY/images/0131/bsd-devilettes.jpg&quot;&gt;
most exciting  one&lt;/a&gt;, so we had to opt out for programmable robots.
After all, it is much easier to control a robot, you know.
&lt;br&gt;&lt;br&gt;
And that&apos;s how controlling a
&lt;a href=&quot;http://mindstorms.lego.com/&quot;&gt;LEGO Mindstorm NXT&lt;/a&gt; robot
using Solaris Express Developer Edition and Sun Studio has
become THE whole point of the contest:
&lt;br&gt;&lt;br&gt;
&lt;center&gt;&lt;img src=&quot;http://blogs.sun.com/rvs/resource/RobotContestPoster.png&quot;/&gt;&lt;/center&gt;
&lt;br&gt;
Here&apos;s a funny bit of trivia about the poster we&apos;ve made: it turns
out that there&apos;s an established conference in Germany called
&lt;a href=&quot;http://www.wizards-of-os.org/index.php?id=36&amp;L=3&quot;&gt;Wizard of OS&lt;/a&gt;.
We honestly didn&apos;t know that. So you could imagine our surprise
when an angry dude (somehow associated with it) showed up and demanded
that we take our posters down. Now in my book that&apos;s irony at its
best: after all, most of the OpenSource folks feel pretty strongly
about things like &lt;a href=&quot;http://en.wikipedia.org/wiki/Fair_use&quot;&gt;
fair use&lt;/a&gt; yet when it comes to somebody fair using
their stuff some of them get stiff and proper and reach for their
phone to call a lawyer or two. We told the dude to beat it, but
somehow the net result of it all was that the organizers of the
expo had to take down one of the posters located right at the
entrance to the show.
&lt;br&gt;&lt;br&gt;
Now, as I mentioned the rules of the contest were pretty simple:
the first one to make the &lt;a href=&quot;http://mindstorms.lego.com/Overview/MTR_AlphaRex.aspx&quot;&gt;
Alpha Rex&lt;/a&gt; robot move wins it. Of course, the fact that the
robot is sold not as a robot per se, but as a box full of LEGO
pieces (Mindstorm NXT kit) made our evening right before the
conference an exiting one to say the least. Personally I was using
jetlag as a reason to dodge &lt;i&gt;real&lt;/i&gt; engineering work, but
my comrades can now rightfully add &quot;LEGO builder&quot; to their resumes...
&lt;center&gt;&lt;img src=&quot;http://blogs.sun.com/rvs/resource/BuildingRobot.jpg&quot;/&gt;&lt;/center&gt;
&lt;br&gt;
...or may be not, because you see, on the opening day of the conference
we proudly brought our robot to the booth only to discover that we
forgot to insert the batteries. Of course inserting them meant
reassembling the whole thing. Nice!
&lt;br&gt;&lt;br&gt;
Right from the first day the very presence of a robot in our
booth created a steady stream of curious folks who wanted to know
what was it all about. We didn&apos;t, however, have any serious contenders
for the prize until
&lt;a href=&quot;http://people.fruitsalad.org/adridg/&quot;&gt;Adriaan de Groot&lt;/a&gt;
showed up and asked us to install Solaris on his laptop so as to
satisfy the big rule #1 of the contest
&lt;center&gt;&lt;img src=&quot;http://blogs.sun.com/rvs/resource/AdriaanDeGroot.jpg&quot;/&gt;&lt;/center&gt;
&lt;br&gt;
He hacked around the robot a bit but then told us that more Googling
and reverseenginering of the protocol seemed to be needed and went
home.
&lt;br&gt;
&lt;br&gt;
Next morning a couple of guys came by and asked us about
the robot and our contest. They even got Solaris installed on
their laptops but just as Adriaan they seemed to need more
time for Googling. They were almost ready to call it a day,
when the most amazing thing happened -- Adriaan dropped
by, connected his laptop to the robot and made him squeal!
That was, of course, just enough of a reason to made Arne and Sebastian
unpack their bags and enter into a coding race for the amazing
squealing Robot
&lt;center&gt;&lt;img src=&quot;http://blogs.sun.com/rvs/resource/Arne.jpg&quot;/&gt;&lt;/center&gt;
&lt;br&gt;
And what a race it was! These two teams were basically hacking in
real time passing a USB cable connected to a robot back an forth
and generating quite a crowd in our booth as a byproduct. They
also were, I must say, extremely gentle and fair to each other.
And even though in every contest, like in life, there&apos;s only
one winner I felt pretty sad that we didn&apos;t have two Mindstorm
LEGO sets to give away. But I digressed. They were going head-to-head
for 5 hours. Basically reverse engineering the protocol and experimenting
with it all from within Solaris and Sun Studio
&lt;center&gt;&lt;img src=&quot;http://blogs.sun.com/rvs/resource/SunStudioRobot.jpg&quot;/&gt;&lt;/center&gt;
(to which one passerby remarked: Hmmm... this Sun Studio thing looks like
a decent IDE I didn&apos;t expect to see that). But it all came down to a climactic
stand off when they both had it almost working but Arne and Sebastian were
quicker to hack their way through by broadcasting to all the motors at once:
&lt;br&gt;
&lt;center&gt;
&lt;object width=&quot;425&quot; height=&quot;350&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://www.youtube.com/v/_7irYy0GKY4&quot;&gt;&lt;/param&gt;&lt;param name=&quot;wmode&quot; value=&quot;transparent&quot;&gt;&lt;/param&gt;&lt;embed src=&quot;http://www.youtube.com/v/_7irYy0GKY4&quot; type=&quot;application/x-shockwave-flash&quot; wmode=&quot;transparent&quot; width=&quot;425&quot; height=&quot;350&quot;&gt;&lt;/embed&gt;&lt;/object&gt;
&lt;/center&gt;
&lt;br&gt;
Now that was a fun moment to witness!
&lt;br&gt;&lt;br&gt;
It was also quite fun to analyze their code later on and see how different
styles of programming can be either helpful or hurtful under certain
circumstances. Don&apos;t believe me just yet? Well, see for yourself:
&lt;table width=&quot;100%&quot; border=&quot;1&quot;&gt;
&lt;tr&gt;&lt;td&gt;&lt;center&gt;
&lt;a href=&quot;http://blogs.sun.com/rvs/resource/RobotUSB1.c&quot;&gt;Adriaan&apos;s code&lt;/a&gt;
&lt;/center&gt;&lt;/td&gt; &lt;td&gt;&lt;center&gt;
&lt;a href=&quot;http://blogs.sun.com/rvs/resource/RobotUSB2.c&quot;&gt;Arne and Sebastian&apos;s code&lt;/a&gt;
&lt;/center&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
And not just see, but feel free to improve on the original code so that
one day we can have a compelling Mindstorm NXT programming environment
for Solaris OS!
&lt;br&gt;&lt;br&gt;

What more is there to tell? Well, of course, we had an award
ceremony for Arne and Sebastian on the last day
&lt;center&gt;&lt;img src=&quot;http://blogs.sun.com/rvs/resource/ArneWin.jpg&quot;/&gt;&lt;/center&gt;
&lt;br&gt;
and they seemed to be really happy. Adriaan, who by the way turned
out to be one of the most delightful people I met at
LinuxTAG, seemed to be happy for them as well and not
one bit sour (he now has an account of all of this written in
&lt;a href=&quot;http://people.fruitsalad.org/adridg/bobulate/index.php?/archives/425-Switch-to-Solaris-at-LinuxTag.html&quot;&gt;
his own blog&lt;/a&gt;). As for me, I&apos;m now trying to figure out
what else can we do to make C, C++ and hey! even Fortran
development with Sun Studio more fun. Perhaps one of these
days we can have an event similar to the always impressive
&lt;a href=&quot;http://www.linuxtag.org/2007/en/community/hackingcontest.html&quot;&gt;Hacking Contest&lt;/a&gt; at LinuxTAG.
Of course, ours would be in English and more developer than systems
oriented. And, by the way, if you happen to have any ideas on
how to run the cool contest for developers -- please let me know.
That&apos;s what blogs have comments sections for, right?
</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/sxde_6_07_eating_your</guid>
    <title>SXDE 5/07: eating your own dog food or sipping your own champagne?</title>
    <dc:creator>rvs</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/sxde_6_07_eating_your</link>
        <pubDate>Fri, 8 Jun 2007 22:02:34 -0700</pubDate>
    <category>LIN(U[ni]X)</category>
    <atom:summary type="html">I&apos;m a fundamental believer in scratching your own itch to be the
best kind of motivation for software development. And
&lt;a href=&quot;http://developers.sun.com/sunstudio/downloads/express.jsp&quot;&gt;
Project D-Light&lt;/a&gt;
is not an exception here: if I want it to be
useful for others I have to make it useful to myself. Of course,
given that Project D-Light tries to utilize the most cutting
edge features of the DTrace technology it just makes sense to
run it on the most recent build of Solaris. And the fact that
we are building a tool first and foremost for the developers
pretty much narrows the choice to the Solaris Express Developer
Edition (SXDE 5/07).
&lt;br&gt;&lt;br&gt;
Of course these days I do most of my development on my
laptop (good old ThinkPad T43) but the Solaris OS that I have
there is kind of clunky. It is a heavily tweaked Solaris 10,
which serves more as a proof that it is possible to run Solaris 10
on a ThinkPad after all, rather than a convenient development environment.
In short I had all the reasons to upgrade when I settled on a quest
for the ultimate development environment based on Solaris OS. The rest
is my account of this quest. You&apos;ve been warned ;-)</atom:summary>        <description>I&apos;m a fundamental believer in scratching your own itch to be the
best kind of motivation for software development. And
&lt;a href=&quot;http://developers.sun.com/sunstudio/downloads/express.jsp&quot;&gt;
Project D-Light&lt;/a&gt;
is not an exception here: if I want it to be
useful for others I have to make it useful to myself. Of course,
given that Project D-Light tries to utilize the most cutting
edge features of the DTrace technology it just makes sense to
run it on the most recent build of Solaris. And the fact that
we are building a tool first and foremost for the developers
pretty much narrows the choice to the Solaris Express Developer
Edition (SXDE 5/07).
&lt;br&gt;&lt;br&gt;
Of course these days I do most of my development on my
laptop (good old ThinkPad T43) but the Solaris OS that I have
there is kind of clunky. It is a heavily tweaked Solaris 10,
which serves more as a proof that it is possible to run Solaris 10
on a ThinkPad after all, rather than a convenient development environment.
In short I had all the reasons to upgrade when I settled on a quest
for the ultimate development environment based on Solaris OS. The rest
is my account of this quest. You&apos;ve been warned ;-)
&lt;br&gt;&lt;br&gt;
As with any OS these days the first step is quite obvious -- you go
to the 
&lt;a href=&quot;http://developers.sun.com/solaris/downloads/solexpdev/&quot;&gt;
Solaris Express Developer Edition webpage&lt;/a&gt; and dowload the
ISO image. You burn it and boot it and then the fun begins. The first
screen that you see after the booting procedure is complete happens
to be the GRUB boot menu with the multiple choices -- the first one being the one
that I need: &quot;Solaris Express, Developer Edition&quot;. So far so good.
After a while you get presented with the next text-based screen
asking whether you want to go right into installation or
to drop into a single user shell. I must admit that the purist in
me definitely wants these two menus to be combined in one, but this
is minor nitpick and besides the next instalmemnt of SXDE is
supposed to have a brand new installer anyway. Wait a second! What&apos;s
that? The previous menu had timed out but instead of going into
an interactive install I got: &quot;This installer requires a minimum
of 768MB of RAM. This system only has 511MB.&quot;. Now, I must admit, as much
as this message is useful for me to go to my boss and request an upgrade,
I could very well feel the frustration of the users out there. After
all half a megabyte is nothing to sneeze at even in 2007. Negative
brownie points for SXDE installer and a note to self: steal memory
from every single workstation that the installer team uses so that they
too can feel my pain. But back to the console: I hit Ctrl-D and
the next message I see says: &quot;You need a minimum of 768MB, either
upgrade your memory or install by choosing the &apos;Solaris Express&apos;&quot;.
Now how do I go back to choose &apos;Solaris Express&apos;? The only option
seems to be a full reboot (well, there&apos;s definitely  more work to
be done on installer, hopefully the 
&lt;a href=&quot;http://www.opensolaris.org/os/project/caiman/&quot;&gt;
Caiman guys&lt;/a&gt; will address it).
Back to square one: GRUB menu. This time I select &apos;Solaris Express&apos;
and I guess that means I&apos;m on my own. All the niceties which went
into SXDE&apos;s installer are no longer applicable. I get the old
text-based clunker of an installer -- but hey! I grew up on Slackware
so the fact that I have to press F2 to move to the next screen doesn&apos;t
really bother me that much ;-) What does bother me however is how
random the configuration questions feel. But then again, I&apos;m on
my own. I had it coming with my 512MB.
&lt;br&gt;&lt;br&gt;
Finally I got to the point
of no return -- fdisk. It is a good thing that I had my previous
installation of Solaris because there seems to be no way of resizing
a partition or doing serious modifications to the partition table.
I keep hearing that adding something like GParted to the Solaris
installation experience is unacceptable because there&apos;s a remote
chance of users destroying their data. I don&apos;t buy that. And I hope
that I can convince the rest of the SXDE team to provide this
helpful service. At least as a separate boot menu item in the
GRUB menu. But I digressed. My installation finished in about an hour,
and I got rebooted into the SuSE&apos;s lilo boot menu. Which is a good thing.
It means that Solaris just minded its own business and didn&apos;t touch 
anything in the MBR. So far so good. Now lets see if I can login as root
into a Gnome desktop and setup a proper user account for myself. Should
be easy, right? Wrong! For some reason I keep staring at a blank X screen
and nothing happens. Finally it dawns on me &quot;The network is the computer&quot;
so perhaps Solaris is waiting for something over the network and given
that my laptop is not currently plugged into an ethernet that might
take a while. I give up and reach for the ethernet cable. What a miracle!
I can log in. 
&lt;br&gt;&lt;br&gt;
These days all operating systems look like either Gnome or KDE -- no surprise there, what was surprising for me was the fact that the default Gnome theme
in Solaris is actually pretty cool looking. Kudos to the graphic design team
working on the desktop look and feel. Of course, what I&apos;m really looking for
right now is functionality and in my particular case functionality that would
let me get rid of that pesky ethernet cable I have to keep handy to make 
Solaris boot process go to completion in reasonable time. So without further 
ado I go directly into Administration-&gt;Network and get a nice looking Network
Settings window. And here&apos;s the first &lt;i&gt;very&lt;/i&gt; pleasant surprise -- there&apos;s a WiFi icon waiting for me there (Intel&apos;s ipw2200). Nice! Not only can I ditch
that ethernet cable just once but it seems I&apos;ll be able to ditch it for good.
I click enable and...nothing happens. Moreover my ethernet connection dies a sudden death. Not good. I futz around for about 10 more minutes and nothing continues to
happen.  Worse yet, I completely screw up my wired ethernet connection so that
I have to go to my other desktop to do some Googling. The thing I Google, of course,
is &lt;a href=&quot;http://opensolaris.org/os/project/nwam/&quot;&gt;Network Automagic&lt;/a&gt; my
last hope for making Net work. Now, in the ideal world I wouldn&apos;t have to
Google for it and it would have been enabled by default, but we have to be fair: the project is still very young and should be excused for making its users suffer from remembering the cryptic set of commands enabling it:
&lt;pre&gt;
  # svcadm disable svc:/network/physical:default
  # svcadm enable svc:/network/physical:nwam
  # svcs nwam
  STATE          STIME    FMRI
  online         19:57:16 svc:/network/physical:nwam
&lt;/pre&gt;
Wow! The minute I hit enter on the last command a window pops up
informing me that my ethernet cable is unplugged. A second later
another window pops up presenting a list of WiFi networks around. 
One click later I&apos;m browsing http://www.sun.com. Now &lt;i&gt;that&apos;s&lt;/i&gt;
what I call useful service and customer satisfaction! Now lets see
if the changes I&apos;ve made would last. Reboot (speaking of which
there&apos;s now a proper Shutdown button in the Gnome menu -- something
that, believe it or not, took quite a lot of convincing of some of the
most notorious Solaris gerontocrats)...
&lt;br&gt;&lt;br&gt;
Niiiceee! I&apos;m writing this very sentence from the Firefox running on Solaris
and I didn&apos;t have to do a thing for it to pick up my WiFi. But wait! There&apos;s
more! I now plug-in that pesky ethernet cable and all of a sudden I don&apos;t
have to see ads of my free WiFi service any longer. The ethernet connection
got recognized, enabled and at the same time WiFi got disabled all without
me doing anything! May be we should just replace that broken Administration-&gt;Network application with a 3 lines of sh(1) script enabling NWAM. There&apos;s a thought...
&lt;br&gt;&lt;br&gt;
Ok. What else do I have to configure on this systems to make it the ultimate
developer&apos;s box. First of all, remember how I wasn&apos;t lucky enough to go through
the SXDE setup and I had to go through the usual Solaris Express one? Well, there&apos;s an extra bit I payed on top of everything else: Sun Studio compilers and tools didn&apos;t get installed. But not to worry! Since my goal is to work on Project D-Light I might as well install 
&lt;a href=&quot;http://developers.sun.com/sunstudio/downloads/express.jsp&quot;&gt;
Sun Studio Express from the web&lt;/a&gt;:
&lt;pre&gt;
  # cd /opt
  # /usr/sfw/bin/gtar xjvf ~/Desktop/StudioExpress-sol-x86-2007-05-29.ii.tar.bz2
&lt;/pre&gt;
And I seriously have to stop running as root. So lets create an actual user
and give him proper rights to be able to run DTrace (a key component of
a setup needed for Project D-Light):
&lt;pre&gt;
  # useradd -m -K defaultpriv=basic,dtrace_user,dtrace_kernel,dtrace_proc \
    -g staff -c &apos;Roman V. Shaposhnik&apos; -d /export/roman -s /bin/bash roman
  # passwd roman
  # su - roman
  $ echo &apos;PATH=/opt/SUNWspro/bin:/usr/ccs/bin:/usr/sfw/bin:/usr/sbin:$PATH&apos; &gt;&gt; .profile
&lt;/pre&gt;
Looks like I&apos;m all set (and yes -- those pesky /usr/sfw/bin and /usr/ccs/bin are
still as important as ever :-(). 
Now I just need to re-login into Gnome as a proper
user (but first I need to save this blog entry as a draft...)
&lt;br&gt;&lt;br&gt;
Seems like I&apos;m all set. Now lets see if my setup is good enough to start
working on one of the OpenSource projects I contribute to: 
&lt;a href=&quot;http://ffmpeg.mplayerhq.hu/&quot;&gt;FFmpeg&lt;/a&gt;
&lt;pre&gt;
  $ mkdir src
  $ cd src
  $ svn checkout svn://svn.mplayerhq.hu/ffmpeg/trunk ffmpeg
  $ cd ffmpeg
  $ ./configure
  Broken shell detected.  Trying alternatives.
  Trying shell bash
  grep: illegal option -- q
  Usage: grep -hblcnsviw pattern file . . .
  grep: illegal option -- q
  Usage: grep -hblcnsviw pattern file . . .
  GNU make not found.
  If you think configure made a mistake, make sure you are using the latest
  version from SVN.  If the latest version fails, report the problem to the
  ffmpeg-devel@mplayerhq.hu mailing list or IRC #ffmpeg on irc.freenode.net.
  Include the log file &quot;config.err&quot; produced by configure as this will help
  solving the problem.
&lt;/pre&gt;
Ok. This didn&apos;t go far enough and the reason is most of the stuff in /usr/sfw/bin
has a &apos;g&apos; prefix in front of it. Which means that I have to fix FFmpeg&apos;s 
configure script to use ggrep instead of grep. Oh well...
&lt;pre&gt;
  $ mv configure /tmp/
  $ sed -e &apos;s/grep/ggrep/&apos; &lt; /tmp/configure &gt; configure
  $ chmod 755 configure
  $ export MAKE=gmake 
  $ ./configure
  $ gmake
&lt;/pre&gt;
Not bad! I have a working FFmpeg now and the only thing left is to start using
it as a guinea pig for the Project D-Light. But that&apos;ll be a subject of my
next blog entry. For now, here&apos;s how SXDE scored:
&lt;ul&gt;
  &lt;li&gt;Installer: Ugly
  &lt;li&gt;Networks configuration: Bad
  &lt;li&gt;Developer tools: Good!
  &lt;li&gt;Network Automagic: Priceless!!!
&lt;/ul&gt;
So is it like eating your own dog food or sipping your own champagne? Well, I guess
you would have to give it try to decide for yourself. Personally, I&apos;m reaching
for my beer mug.</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/what_do_sun_studio_12</guid>
    <title>What do Sun Studio 12, Project D-Light and SXDE have in common.</title>
    <dc:creator>rvs</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/what_do_sun_studio_12</link>
        <pubDate>Tue, 5 Jun 2007 11:59:04 -0700</pubDate>
    <category>Sun Studio</category>
            <description>Today feels good. In fact today feels exactly like the day after the
finals when I can finally stop running like a chicken with its head
cut off and focus on import stuff (like writing this very blog entry
for example ;-)). Because you see, today is the day when two
of the projects I consider to be my personal ones have reached
important milestones:
&lt;a href=&quot;http://developers.sun.com/sunstudio/downloads/&quot;&gt;Sun Studio 12 is now
officially released&lt;/a&gt; as a full fledged fully supported suite
of compilers and tools for Solaris and Linux. And at the same time
&lt;a href=&quot;http://sun.feedroom.com/linking/?skin=twoclip&amp;fr_story=FEEDROOM192569&quot;&gt;Project D-Light&lt;/a&gt;
has made its first public appearance as part of the
&lt;a href=&quot;http://developers.sun.com/sunstudio/downloads/express.jsp&quot;&gt;Sun Studio Express - June 2007 Build&lt;/a&gt;.
As I said, these two are very personal (which is not to say that I was the only one who worked
on them) yet very different projects. The first one (Sun Studio 12 compilers
on Linux) started out as a true skunk works and by the time we got any public
exposure we actually had a pretty decent  implementation already so the only
logical question to ask was: when should we ship it? Project D-Light on the
other hand got exposed right after the idea for it ripped through the management
chain &lt;a href=&quot;http://imdb.com/title/tt0078748/&quot;&gt;Alien-style&lt;/a&gt; at the time where we didn&apos;t
really have much functionality to write home about. So what do these two projects
and &lt;a href=&quot;http://developers.sun.com/solaris/downloads/solexpdev/&quot;&gt;Solaris Express Developer Edition&lt;/a&gt;
(which is supposed to have its next release available any minute now) have in common?
The answer is quite simple -- you. Yes -- YOU, our users, early adopters and
loyal customers. Without your support nothing of what makes me proud today would
have been possible. Not Sun Studio 12, nor Project D-Light. I wish to thank you
and once again ask for the only thing that matters: your feedback. Sun Studio 12
and compilers for Linux ended up a success in large because you clearly showed your interest
at our &lt;a href=&quot;http://forum.java.sun.com/forum.jspa?forumID=855&quot;&gt;Sun Studio for Linux Forum&lt;/a&gt;.
I truly hope that Project D-Light has a chance of following that road to success. 
The &lt;a href=&quot;http://forum.java.sun.com/forum.jspa?forumID=852&quot;&gt;Sun Studio Tools Forum&lt;/a&gt;
awaits!
&lt;br&gt;&lt;br&gt;
P.S. As for Solaris Express Developer Edition I keep entertaining the idea of
hijacking it and turning into my third personal project. Although it feels
like I might be biting off way more than I can chew ;-)
</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/dtrace_probes_assert_on_steroids</guid>
    <title>DTrace probes -- assert() on steroids?</title>
    <dc:creator>rvs</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/dtrace_probes_assert_on_steroids</link>
        <pubDate>Sun, 29 Apr 2007 12:24:46 -0700</pubDate>
    <category>Sun Studio</category>
            <description>Quite recently I&apos;ve had a conversation with a good friend of mine
who shares my interest in DTrace and compilers and it seems that
we&apos;ve come up with a pretty neat use for DTrace probes. The idea
is to start using DTrace probes for assert(3). You know how,
during the development cycle the assertions are kept in the code
and when the final build is supposed to happen most of them get
deleted by turning off a magic define? Well, with DTrace probes
used instead of assert() the beauty is -- they are all turned
off by default (no funky defines required) but the dynamic nature
of DTrace lets you turn any subset of them on when and only
when you really need them. Like at a customer site (with the
production code running) to diagnose a particular problem. Neat,
isn&apos;t it?
</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/what_does_dynamic_linking_and</guid>
    <title>What does dynamic linking and communism have got in common?</title>
    <dc:creator>rvs</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/what_does_dynamic_linking_and</link>
        <pubDate>Sat, 31 Mar 2007 23:33:27 -0700</pubDate>
    <category>Elegant Computing</category>
            <description>It is simple enough, really &amp;#8211; both were ideas that
sounded nice in theory but came crushing down during
their first serious brush with reality. And since there&apos;s
no shortage of experts trying to explain how come
communism wasn&apos;t meant to be &amp;#8211; I&apos;m going to focus
on the other one. But before I do, I want to make
it extra clear that this article is about dynamic
linking and not dynamic loading. The later one
consists of dlopen(3)/dlsym(3)/dlclose(3) and
is a fine idea. Dynamic linking on the other hand
is all about magic that makes your application
work, even though bits and pieces of it might
be in places you&apos;ve never heard of. And, of course,
as any magic it does promise a lot. Among the
biggest claims of the dynamic linking (as it is
currently implemented in UNIX and similar OSes)
are the following three:
&lt;OL&gt;
  &lt;LI&gt;all applications are capable of sharing
  common code at runtime, thus reducing total memory
  footprint of an entire system
  &lt;LI&gt;all applications can reference common code
  without actually storing it as part of their ELF (or
  similar) file image, thus reducing total storage
  footprint of an entire system
  &lt;LI&gt;you can fix problems in common code, thus
  benefiting all of the applications available
  on your systems at once
&lt;/OL&gt;
May be there are others, but these three are most commonly
cited in favor of justifying the mind boggling complexity
of the modern dynamic linkers (and if you don&apos;t believe
me how complex they are &amp;#8211; try asking
&lt;a href=&quot;http://blogs.sun.com/rie/&quot;&gt;our resident Solaris
linker guru&lt;/a&gt;) and even bigger complexity of how, what I referred
to as, &quot;common code&quot; is supposed to be 
&lt;a href=&quot;http://people.redhat.com/drepper/dsohowto.pdf&quot;&gt;packaged and
delivered&lt;/a&gt; in order for the magic to work. Of course,
given the price we pay in complexity I would expect
dividends to be quite significant. Unfortunately, they
are not.
&lt;br&gt;
The rest of this article discusses why
dynamic linking does not deliver on any of its promises
and why, just as communism, it might be an idea
that only works in an ideal world (as a curious
footnote I must add that just as communism done right
seems to be doing quite well in one particular eastern
country, dynamic linking within a binary 
compatibility guarantee of
one particular OS gets as closed to being true
to its promises as one can get). 
&lt;br&gt;
The goal of this article is not to present an alternative
model (I still don&apos;t have a 100% satisfactory one even for
dynamic linking; not to mention communism) but to merely
make the reader question whether static linking is, in fact,
&lt;a href=&quot;http://people.redhat.com/drepper/no_static_linking.html&quot;&gt;
long dead and buried&lt;/a&gt; or may be the
&lt;a href=&quot;http://people.redhat.com/drepper/&quot;&gt;people&lt;/a&gt; who try very
hard to make us think that way have just spent too much time
in an ivory tower and haven&apos;t seen the real world in a while.
&lt;br&gt;
With that, let me start with tackling the last purported benefit
of dynamic linking (an ability to fix problems in common code) not
only because it is the easiest to knock down, but also, because
once knocked it virtually eliminates the first two benefits
completely. An ability to fix problems in common code and effectively
addressing it once instead of doing it as many times as you have
applications sharing that common code sounds really nice till you
ask yourself -- what is a &quot;problem&quot;? What is a bug? And could
it be that one application&apos;s problem is something that a second
application depends upon in order to work properly? The answer to
the last question is a resounding YES and there&apos;s no better example
than a very prominent C++ compiler vendor who had to leave a 
pretty nasty C++ ABI bug unfixed for a number of years just because
any possible fix would break all previously compiled applications.
And of course, since C++ runtime library is dynamically linked
into any application written in C++ that was unacceptable. You see,
in real world programs have bugs. Worse yet -- the line between 
a bug and a feature sometimes gets quite blurry. That is especially
true for common code. Why? For two obvious reasons: first of all, since
most likely than not you didn&apos;t write the code shared by different
applications yourself you have no way of knowing whether your
usage patters of that common code do indeed trigger a bug, or 
whether they are just an example of  
&lt;a href=&quot;http://en.wikipedia.org/wiki/Garbage_in,_garbage_out&quot;&gt;GIGO principle&lt;/a&gt;.
Second and most importantly -- you are very likely not to have any
control over the common code and even if you can prove that the
problem is indeed a bug you&apos;d rather workaround it than wait
for a vendor to issue a patch. These two issues combined create
a very unpleasant situation where problems in common code now
become unfixable not because we can&apos;t fix them for good, but because
the old buggy behavior is now something that quite a few applications
depend upon. This is a classical &quot;doomed if you do, doomed if
you don&apos;t&quot; principle at work. But where does it leave us as far
as dynamic linking goes? In a mess! And a big one at that. All of
a sudden we have a system where half of the applications want
that piece of common code fixed and the other half wants it
broken.  All of a sudden we have to make sure that we CAN isolate
applications that still depend on an old buggy behavior and
the magic of dynamic linking just starts getting blacker and
blacker with abominations like LD_LIBRARY_PATH and
&lt;a href=&quot;http://blogs.sun.com/rvs/entry/why_do_i_love_multiple&quot;&gt;
DSO symbol versioning&lt;/a&gt;. What we&apos;ve got on our hands now
is a simple situation where common code becomes segmented in a
sense that it is common among just a subset of applications. And
that is the point where dynamic linking just breaks. There&apos;s no
way for my application to be sure that the same common code
I tested it with is the one that is being in use. And for any
serious software vendor that is just unacceptable. You see,
serious software vendors care about their customers and they
don&apos;t play finger pointing games saying things like: it is
all your fault you should have not upgraded that shared
library over there. What do they do instead? Well, just try
to do
&lt;pre&gt;
find . -name \.so
&lt;/pre&gt;
to see for yourself. If you do that with any commercial
piece of software (or even free large ones like Open Office)
don&apos;t be surprised to see things like private versions of glibc.so
being repackaged and redelivered. It is much safer for
them to do that instead of constantly dreading the ugly
upgrade of /lib/libc.so.
&lt;br&gt;
But wait! Haven&apos;t it just annulled the first and the second
claims that the dynamic linking had? Sure it did. There&apos;s
no sharing possible between /lib/libc.so and
/opt/bigapp/lib/glibc.so. None. The memory gets wasted
as much as the diskspace does. It might as well be static
linking at that point.
&lt;br&gt;
In fact, static linking would be quite beneficial for the
application since if done right with the smart compiler
it would enable things like: not wasting precious CPU
cycles on position independent code (if you think PIC
is free see
&lt;a href=&quot;http://frsun.downloads.edgesuite.net/sun/07C00975/&quot;&gt;Performance Analyzer in action&lt;/a&gt;),
doing interprocedural optimization, cross-file inlining
and template elimination. And a few others. And unlike
dynamic linking you can be dead certain that the very
same code you tested would be working at your customer&apos;s
site. Not only that -- but when you do need to fix it,
you fix wouldn&apos;t break anybody else.
&lt;br&gt;
Ain&apos;t this the magic?


</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/interested_in_what_s_up</guid>
    <title>Interested in what&apos;s up with Sun Studio?</title>
    <dc:creator>rvs</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/interested_in_what_s_up</link>
        <pubDate>Fri, 30 Mar 2007 23:09:10 -0700</pubDate>
    <category>Sun Studio</category>
            <description>&lt;iframe src=&quot;http://sunfeedroom.sun.com/linking/index.jsp?skin=oneclip&amp;fr_story=FEEDROOM186071&amp;rf=ev&amp;hl=true&quot; width=&quot;322&quot; height=&quot;278&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; &gt;&lt;/iframe&gt;
&lt;p&gt;
Kuldip has the latest scoop! And for even more details make sure to login &lt;br&gt;&lt;a href=&quot;http://blogs.sun.com/SDNChannel/entry/sun_studio_and_gnome&quot;&gt;
SDN Channel&lt;/a&gt; 
</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/a_bit_of_c_code</guid>
    <title>A bit of C code that costs $200 per line.</title>
    <dc:creator>rvs</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/a_bit_of_c_code</link>
        <pubDate>Wed, 21 Mar 2007 13:51:50 -0700</pubDate>
    <category>Sun Studio</category>
            <description>If you&apos;re the type of a person who played
a fair share of arcade games in the past
AND at least once the code you wrote
drove your coworkers to the brink of insanity
you should get a kick out of the thingy
a bunch of us here at Sun put together
just to show how much fun Sun Studio and
Solaris can be. So there&apos;s fun, fame
and $5000 fortune for anybody who dares
to enter
&lt;center&gt;
&lt;br&gt;
&lt;a href=&quot;http://www.sun.com/templeofthesun3&quot;&gt;Temple of the Sun!&lt;/a&gt;
&lt;/center&gt;
&lt;br&gt;
&lt;center&gt;
&lt;a href=&quot;http://www.sun.com/templeofthesun3&quot;&gt;&lt;img src=&quot;http://blogs.sun.com/rvs/resource/temple.png&quot;&gt;&lt;/a&gt;
&lt;/center&gt;</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/if_you_still_don_t</guid>
    <title>If you still don&apos;t know what Web 2.0 is...</title>
    <dc:creator>rvs</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/if_you_still_don_t</link>
        <pubDate>Thu, 1 Mar 2007 19:13:48 -0800</pubDate>
    <category>/var</category>
            <description>&lt;object width=&quot;425&quot; height=&quot;350&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://www.youtube.com/v/6gmP4nk0EOE&quot;&gt;&lt;/param&gt;&lt;param name=&quot;wmode&quot; value=&quot;transparent&quot;&gt;&lt;/param&gt;&lt;embed src=&quot;http://www.youtube.com/v/6gmP4nk0EOE&quot; type=&quot;application/x-shockwave-flash&quot; wmode=&quot;transparent&quot; width=&quot;425&quot; height=&quot;350&quot;&gt;&lt;/embed&gt;&lt;/object&gt;</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/babbage_tesla_of_computing</guid>
    <title>Babbage: Tesla of computing ?</title>
    <dc:creator>Roman Shaposhnik</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/babbage_tesla_of_computing</link>
        <pubDate>Sun, 11 Feb 2007 14:37:25 -0800</pubDate>
    <category>Elegant Computing</category>
            <description>I&apos;ve always known that &lt;a href=&quot;http://en.wikipedia.org/wiki/Babbage&quot;&gt;Charles Babbage&lt;/a&gt; had a few good
ideas on how to build computing devices. Yet, it was only after a
friend of mine had pointed me at
&lt;a href=&quot;http://home.comcast.net/~tom_forsyth/blog.wiki.html#%5B%5BBabbage%20was%20a%20true%20genius%5D%5DD&quot;&gt;
Babbage was a true genius&lt;/a&gt;
post when I realized that Babbage was the sort of a guy who could have
turned the world into a different direction had he succeded.
For anybody interested in the history of computing -- this is a must read.
</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/dv_we_do_it_better</guid>
    <title>DV -- we do it better and for FREE!</title>
    <dc:creator>Roman Shaposhnik</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/dv_we_do_it_better</link>
        <pubDate>Sun, 4 Feb 2007 23:50:49 -0800</pubDate>
    <category>/var</category>
            <description>Please forgive me this bit of a shameless self promotion, but as many
of you know in my spare time I do develop a DV codec for the
&lt;a href=&quot;http://ffmpeg.mplayerhq.hu/&quot;&gt;FFmpeg project&lt;/a&gt;.
Now, according to
&lt;a href=&quot;http://www.sfendt.de/dvstress.html&quot;&gt;Stefan Fendt&apos;s benchmark&lt;/a&gt;
 my efforts and a lot
of quality tuning by Dan Maas (of &lt;a href=&quot;http://www.maasdigital.com/&quot;&gt;Maas Digital&lt;/a&gt; fame)
really did pay off. Of course as a compiler guy by day
I should know what elusive thing any kind of benchmarking is,
but I just can&apos;t help it ;-)
</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/the_landscape_of_parallel_computing</guid>
    <title>The Landscape of Parallel Computing Research: A View From Berkeley</title>
    <dc:creator>Roman Shaposhnik</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/the_landscape_of_parallel_computing</link>
        <pubDate>Mon, 8 Jan 2007 18:59:21 -0800</pubDate>
    <category>Sun Studio</category>
            <description>As a somebody who believe in parallelism as the only way out of our dependency
on Moore&apos;s Law I was very pleased to discover this 
&lt;a href=&quot;http://view.eecs.berkeley.edu/wiki/Main_Page&quot;&gt;Wiki&lt;/a&gt;
 put together by
Berkeley research team. Now that I have this URL I don&apos;t have to
keep maintaining my collection of links on &lt;a href&quot;http://del.icio.us&quot;&gt;del.icio.us&lt;/a&gt; ;-)</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/on_software_development_methods</guid>
    <title>On software development methods</title>
    <dc:creator>Roman Shaposhnik</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/on_software_development_methods</link>
        <pubDate>Wed, 29 Nov 2006 04:54:28 -0800</pubDate>
    <category>/var</category>
            <description>A friend of mine sent me this
   &lt;a href=&quot;http://moishelettvin.blogspot.com/2006/11/windows-shutdown-crapfest.html&quot;&gt;URL&lt;/a&gt;
and since he also works for Sun we congratulated each
other on not having to suffer from something like
that. The second thought, however, was that
perhaps if only we were given that big a body count
in our organization to work on every feature
we could do anything, or could we...
</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/performers_of_the_world_--</guid>
    <title>Performers of the world -- UNITE!</title>
    <dc:creator>Roman Shaposhnik</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/performers_of_the_world_--</link>
        <pubDate>Thu, 9 Nov 2006 09:24:06 -0800</pubDate>
    <category>Elegant Computing</category>
            <description>This is perhaps a bit of old news, but since I turned out to
be forgetful enough not to blog about it when it was time
here it goes. Together with Federico Lucifredi we&apos;ve created
a mailing list on google groups dedicated to 
&lt;a href=&quot;http://groups.google.com/group/computing-performance&quot;&gt;
everything computer performance&lt;/a&gt;. Personally I don&apos;t anticipate
this list to be a high traffic one but more of meeting place
for everybody who&apos;s interested in making computers run faster
to hang around. So that when anybody has a question our
collective intelligence can be easily accessible. Also the
list seems like a perfect place for distributing information
on performance related events, papers and ideas.
&lt;br&gt;&lt;br&gt;

Long story short -- if you know anybody who fits our profile
make this person join
&lt;a href=&quot;mailto:computing-performance@googlegroups.com&quot;&gt;computing-performance@googlegroups.com&lt;/a&gt;
today!
</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/i_ve_got_a_dream</guid>
    <title>I&apos;ve got a dream job!</title>
    <dc:creator>Roman Shaposhnik</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/i_ve_got_a_dream</link>
        <pubDate>Mon, 23 Oct 2006 17:29:45 -0700</pubDate>
    <category>/var</category>
            <description>Today I got a very nice email from Don Marti over at &lt;a href=&quot;http://www.linuxworld.com&quot;&gt;LinuxWorld&lt;/a&gt;
informing me that my Blog has been &lt;a href=&quot;http://www.linuxworld.com/community/?q=aggregator&quot;&gt;syndicated there&lt;/a&gt;! &lt;a href=&quot;http://dreamjobstogo.com/titles/djtg0031.html&quot;&gt;Whoohooo!&lt;/a&gt;
I&amp;nbsp;guess I have to kick the quality and quantity of content up
a notch. An entry a day, perhaps ? We shall see.</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/is_java_still_incompatible_with</guid>
    <title>Is Java still incompatible with UNIX ?</title>
    <dc:creator>Roman Shaposhnik</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/is_java_still_incompatible_with</link>
        <pubDate>Sun, 22 Oct 2006 20:40:46 -0700</pubDate>
    <category>Elegant Computing</category>
            <description>I remember how when I first heard of Java back in &apos;96 I got pretty excited not because of the OOP language it offered (I was already sold on C++) and not because of the grandeur API it had (I simply don&apos;t believe in APIs more complex than &lt;a href=&quot;http://blogs.sun.com/rvs/entry/on_lego_bricks_and_os&quot;&gt;LEGO bricks&lt;/a&gt;) but because its JVM offered a glimpse of what at the time seemed like a potential escape from the conundrum of modern CPUs &#8211; they all are but a VM for a C language. The only reason you&apos;ve got MMUs in every decent CPU these days is because C VM has to support pointers. If only JVM could be efficiently cast in iron...
&lt;br&gt;&lt;br&gt;

&lt;a href=&quot;http://www.azulsystems.com/&quot;&gt;Unfortunately&lt;/a&gt; this particular nut proved to be quite difficult to crack. The demise of the &lt;a href=&quot;http://www.sunlabs.com/projects/barcelona/index.html&quot;&gt;Project Barcelona&lt;/a&gt; was even more frustrating, simply because its premise, requiring a single &#8220;instance&#8221;
of JVM for running all Java applications &#8211; even from different users, seemed to be an ideal compromise between the difficulty of switching all the way to JVM-based CPUs and constantly 
having to lug a pretty hefty JVM around for running even the tiniest Java application (just for fun,
try measuring how much RAM and CPU cycles would be consumed by a  &#8220;Hello World&#8221; written in on your system).

All of that, of course, means that 10 years later I find myself in a situation where when I have to implement a bunch of small GUI tools and utilities according to the UNIX tooling principle &#8211; each tool is small, convenient, does exactly one thing but does it well &#8211; Java is still not a good choice
for me. I simply can not afford spending that amount of resources every time I need an &apos;echo&apos; or &apos;ls&apos; functionality of the GUI world. Platforms (such as NetBeans) are even worse in that regard, since not only do I have to tax myself with JVM, but each instance of JVM would have to suck in a fat layer of the platform itself. Since all of the JVMs are separate it means no sharing whatsoever even if I use the very same NetBeans classes in all of my little tools. Is Java still incompatible with basic UNIX philosophy ? You decide &#8211; for me the answer is clear and my only hope is that with Sun OpenSourcing Java somebody will pick up where Project Barcelon left off. 

But for now &#8211; I guess I have to teach myself some Qt :-(</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/fun_with_libc_compile_time</guid>
    <title>Fun with libc compile-time [re]configurationb</title>
    <dc:creator>Roman Shaposhnik</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/fun_with_libc_compile_time</link>
        <pubDate>Fri, 20 Oct 2006 12:33:27 -0700</pubDate>
    <category>LIN(U[ni]X)</category>
            <description>Most of the time when you write your C or C++ code on a modern
UNIX platform you don&apos;t give much thought to the strict compliance
with various standards which used to rule the disjoint UNIX
landscape some odd number of years ago: XOPEN, POSIX, BSD, SVID, etc.
And if an application has only the very same platform you&apos;re developing
on as a deployment platform all is well. That doesn&apos;t happen all that
often though. And once you face the neccessity of making sure that
your application behavior is preserved across the variety
of UNIX-like OSs there the fun begins. The biggest problem is that
one of the cornerstone pieces of functionality every application
on UNIX depends upon has the most colorful history behind it. Of
course I&apos;m talking about libc and the number of (sometimes conflicting!)
APIs it has to offer in order to comply with various standards.
&lt;br&gt;&lt;br&gt;

Now, not a lot of folks know this, but libc is highly configurable
at an application compile time. If you have a reasonable compiler and a reasonable
libc implementation you can ask libc to behave like it used to during
the XOPEN times, BSD times or SVID times. The way you do that is
usually via specifying macros like: POSIX_SOURCE, etc. Here&apos;s a complete
list of macros you can tweak from the latest revision of Glibc:
&lt;pre&gt;
from /usr/include/features.h:

   _ISOC99_SOURCE       Extensions to ISO C89 from ISO C99.
   _POSIX_SOURCE        IEEE Std 1003.1.
   _POSIX_C_SOURCE      If ==1, like _POSIX_SOURCE; if &gt;=2 add IEEE Std 1003.2;
                        if &gt;=199309L, add IEEE Std 1003.1b-1993;
                        if &gt;=199506L, add IEEE Std 1003.1c-1995;
                        if &gt;=200112L, all of IEEE 1003.1-2004
   _XOPEN_SOURCE        Includes POSIX and XPG things.  Set to 500 if
                        Single Unix conformance is wanted, to 600 for the
                        upcoming sixth revision.
   _XOPEN_SOURCE_EXTENDED XPG things and X/Open Unix extensions.
   _LARGEFILE_SOURCE    Some more functions for correct standard I/O.
   _LARGEFILE64_SOURCE  Additional functionality from LFS for large files.
   _FILE_OFFSET_BITS=N  Select default filesystem interface.
   _BSD_SOURCE          ISO C, POSIX, and 4.3BSD things.
   _SVID_SOURCE         ISO C, POSIX, and SVID things.
   _GNU_SOURCE          All of the above, plus GNU extensions.
&lt;/pre&gt;

And it should be quite straightforward to realize that once you add something
like this to your compilation line you&apos;re essentially changing behavior of
quite a few APIs (and YES! things can break or stop working at all):

&lt;pre&gt;
    $ cc -D_XOPEN_SOURCE=500 application.c
&lt;/pre&gt;

What is much less straightforward is the fact that vendors slice and dice what
they give you by default at their pleasure. For example GCC &lt;b&gt;always&lt;/b&gt; defines
_GNU_SOURCE which means that by default you&apos;re getting much more non-standard functionality than would
otherwise be available (and yes! sometimes getting more than you&apos;ve asked
for is a portability nightmare). And when you move your application to a place
where the defaults are different you have to fish out for the interfaces you
need and how to enable them. What&apos;s even more important is that you have to constantly
be on a lookout for different standards implementing some of the interfaces a
little bit differently. Which means that if vendor A decided to give you an API
which happens to be part of the larger standard by default, there&apos;s no guarantee
that when you go to a platform where that single API is not available unless you
explicitly ask for the standard it is part of other thing won&apos;t break.
&lt;br&gt;&lt;br&gt;

Now, personally, I got bitten by it when I was porting an application from Solaris
to Linux  and got bitten by the fact that a very simple and unassuming call to
sigset(2) was, in fact, part of the larger XOPEN standard and was not available
on Linux by default unless you ask for it. On Solaris, however it is. So the
dilemma I was faced with was either to augment my compilation line with
something like: -D_XOPEN_SOURCE=600 (which I knew would break a couple of
other things) or fish for something else that would only enable the sigset.
&lt;br&gt;&lt;br&gt;
I ended up doing -D_XOPEN_SOURCE=600 and fixing the other stuff.

</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/how_to_become_a_compiler</guid>
    <title>How to become a compiler wizard in 1 hour</title>
    <dc:creator>Roman Shaposhnik</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/how_to_become_a_compiler</link>
        <pubDate>Mon, 2 Oct 2006 16:36:38 -0700</pubDate>
    <category>Sun Studio</category>
            <description>You know how when you work in a particular field long enough you slowly become
a resident guru or a go-to guy at which point you promise to yourself that
one of those days you would definitely write an FAQ if only not to repeat
the same thing over and over again ? You never do, of course.
&lt;br&gt;&lt;br&gt;
Well, all of the procrastinating gurus in the compiler field can rejoice
since from now on all it takes to enlighten your trustworthy apprentices
is to point them at the introductory article written by Abdulaziz Ghuloum
&lt;a href=&quot;http://scheme2006.cs.uchicago.edu/11-ghuloum.pdf&quot;&gt;An Incremental Approach to Compiler Construction&lt;/a&gt;
so that you can happily get back to playing Nethack.
&lt;br&gt;&lt;br&gt;
But just in case -- keep your &lt;a href=&quot;http://www.amazon.com/Advanced-Compiler-Implementation-Steven-Muchnick/dp/1558603204/sr=1-1/qid=1159832121/ref=pd_bbs_1/104-8331302-3259964?ie=UTF8&amp;s=books&quot;&gt;Muchnik&lt;/a&gt; handy for those who might come back ;-)
&lt;br&gt;&lt;br&gt;
Many thanks to Horsh for sharing this URL with me.
</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/a_tale_of_three_conferences</guid>
    <title>A tale of three conferences</title>
    <dc:creator>Roman Shaposhnik</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/a_tale_of_three_conferences</link>
        <pubDate>Tue, 12 Sep 2006 10:32:11 -0700</pubDate>
    <category>Sun Studio</category>
            <description>Perhaps some of you have noticed that I haven&apos;t blogged much lately (well,
I certainly hope you have -- otherwise what&apos;s the point of me
blogging in the first place ;-)). The reason of course is that I&apos;ve
been quite busy lately going to various software conferences talking
about
&lt;a href=&quot;http://blogs.sun.com/rvs/resource/CMT.pdf&quot;&gt;
MultiCore revolution&lt;/a&gt;
and how Software Tools such as compilers
play a key role in it. So far I&apos;ve been at 3 conferences:
&lt;a href=&quot;http://www.cluecon.com&quot;&gt;ClueCon in Chicago&lt;/a&gt;,
&lt;a href=&quot;http://www.linuxworldexpo.com/live/12/events/12SFO06A/conference/tracksessions/Kernel%20and%20System%20Development/QMONYA04RVI3&quot;&gt;
LinuxWorld in San Francisco&lt;a&gt; and
&lt;a href=&quot;http://developers.sun.com/events/techdays/2006/US_SEA.jsp&quot;&gt;Sun TechDAYs in Seattle&lt;/a&gt;
and every single one of them proved to be quite interesting and
exciting in its own right. ClueCon, for example completely shattered
my concerns about being a VoIP conference (and mind you, I don&apos;t
really have any expertise in that domain) and in fact happened
to be one the most welcoming and feel-right-at-home software conferences
I&apos;ve ever been to. I believe that if there&apos;s anybody to be
thanked for making ClueCon the way it was it would be Tony Minnesale .
The brain (and soul!) behind a &lt;a href=&quot;http://www.freeswitch.org&quot;&gt;FreeSWITCH Project&lt;/a&gt;.
I can only hope that ClueCon atendees felt as good about my presentation
as I felt about being there, but since at least one guy said
to me: &quot;Wow! Good thing we didn&apos;t leave -- we thought it would
be just another Java zealot from Sun talking about irrelevant
stuff but you actually gave us a bunch of good ideas on how
to make our telco apps faster on AMD64 and Niagara boxes.
That&apos;s useful&quot; I think it went ok.
&lt;br&gt;&lt;br&gt;
LinuxWorld, of course, was bigger louder and much more commercial.
Comparing it to ClueCon is sort of like comapring a nice
boutique to Macy&apos;s ;-) However, the fact that I met Ron Peacetree
and spent a day with Josh Abraham and the &quot;maddog&quot; definitely made it a very
memorable experience. My only concern is that I somehow misplaced
a business card that a very nice guy from O&apos;Reilly booth gave to
me and I really want to thank him for his gift and follow up
on his proposal. So if anyone who reads this happens to know
who was staffing the O&apos;Reilly booth there -- please drop me a note.
&lt;br&gt;&lt;br&gt;
Now Seattle was all about sunny and warm weather and an opportunity
to talk directly to our customers -- both things which I personally
appreciate very much.
&lt;br&gt;&lt;br&gt;
As for the presentation I&apos;ve made -- since several folks have expressed
their interest in getting a .PDF copy of it -- here it is:
&lt;a href=&quot;http://blogs.sun.com/rvs/resource/CMT.pdf&quot;&gt;Unleashing the Power of Chip multi-threading with software tools&lt;/a&gt;. Enjoy!
</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/linux_technology_preview_is_dead</guid>
    <title>Linux Technology preview is dead! Long live the Sun Studio Express!</title>
    <dc:creator>Roman Shaposhnik</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/linux_technology_preview_is_dead</link>
        <pubDate>Mon, 14 Aug 2006 13:45:48 -0700</pubDate>
    <category>Sun Studio</category>
            <description>Today is the first day of the 
&lt;a href=&quot;http://www.linuxworldexpo.com/live/12/events/12SFO06A&quot;&gt;LinuxWorld in San Francisco&lt;/a&gt; 

(and actually
I&apos;m writing this waiting for a speaker to arrive and give us
a lecture on what&apos;s new in the field of buffer overflow exploits
and related fields of fine hacking ;-))  which is quite exciting
especially if you take into account that it&apos;ll be my first
LinuxWorld where I participate as a 
&lt;a href=&quot;http://www.linuxworldexpo.com/live/12/events/12SFO06A/conference/bio//CMONYA00BGQC&quot;&gt;speaker&lt;/a&gt;
, giving a presentation
on 
&lt;a href=&quot;http://www.linuxworldexpo.com/live/12/events/12SFO06A/conference/tracksessions/Kernel%20and%20System%20Development/QMONYA04RVI3&quot;&gt;&apos;Unleashing the Power of Chip multi-threading with software tools&apos;&lt;/a&gt;.
On top of which our our team has just released 
&lt;a href=&quot;http://developers.sun.com/prodtech/cc/downloads/express.jsp&quot;&gt;Sun Studio Express 2&lt;/a&gt;,
which signifies the end of the Linux Technology Preview phase
and makes Linux just another platform Sun Studio supports. We should
all be grateful to the Sun Studio Linux Technology Preview Program
since it actually made it possible to break the physiological ice
and create the real deal -- Sun Studio Express. Which is
basically our way of making the development as transparent to
you as possible. It is also your opportunity to tell us what&apos;s
wrong with our software before its too late for us to fix.&lt;br&gt;&lt;br&gt;

Anyway -- it is a great time to 
&lt;a href=&quot;http://developers.sun.com/prodtech/cc/downloads/express.jsp&quot;&gt;subscribe to Sun Studio Express&lt;/a&gt;,
start using it on regular occasion and 
&lt;a href=&quot;http://developers.sun.com/prodtech/cc/community/index.jsp&quot;&gt;give us your feedback&lt;/a&gt;.
&lt;br&gt;&lt;br&gt;

As I said -- this particular one is totally focused on Linux
and comes with the 
&lt;a href=&quot;http://developers.sun.com/prodtech/cc/downloads/express_readme.html&quot;&gt;boatload of features and bug fixes&lt;/a&gt; so that
even the pickiest ones shouldn&apos;t be disappointed ;-) And we&apos;ve
got Solaris developers covered as well! Its all
there. Sun Studio Express gives you exact same bits we use
internally.

For those of you in close proximity to San Francisco it is also
a great time to drop by our booth in Moscone Center (we&apos;re
actually located in the AMD&apos;s pavilion -- so don&apos;t be fooled)
talk to us and for the really curious ones may be even
attend my presentation on Wed 08/16/2006, 10:15 AM - 11:15 AM.

Hope to see you there!</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/sdn_channel_on_linux_deleted1</guid>
    <title>SDN Channel on Linux: deleted unrated scenes</title>
    <dc:creator>Roman Shaposhnik</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/sdn_channel_on_linux_deleted1</link>
        <pubDate>Sat, 29 Jul 2006 22:32:10 -0700</pubDate>
    <category>Sun Studio</category>
            <description>As you might have noticed in my previous
&lt;a href=&quot;http://blogs.sun.com/roller/page/rvs?entry=sdn_channel_on_linux_deleted&quot;&gt;blog entry&lt;/a&gt;
I really wanted to get your opinion on
&lt;a href=&quot;http://developers.sun.com/channel/07_06/&quot;&gt;my interview&lt;/a&gt;.
But aside from the usual curiosity I had a practical reason to
beg for it to be reflected in the comments section of my blog.
Because you see, the other part I had to do for
the Linux episode of the &lt;a href=&quot;http://developers.sun.com/channel&quot;&gt;
SDN Channel&lt;/a&gt; resulted in the most bizarre and troubling
interaction I have ever had while working for Sun.&lt;br&gt;&lt;br&gt;

And that other part I am talking about is making of
&lt;a href=&quot;http://developers.sun.com/prodtech/cc/product_tour.jsp&quot;&gt;flash demos&lt;/a&gt;.&lt;br&gt;&lt;br&gt;

As a producer of these demos I really wanted them to do
one thing -- transport every viewer into the office(s)
of the guys who actually wrote the software in question
(one way or the other). I wanted them to be as geeky and
as similar to the usual hallway conversations we all have as possible.
One thing I didn&apos;t want them to be was flashy and marketing
looking. I&apos;m a developer myself and I consider it to be
a bait&apos;n&apos;switch when somebody is trying to feed me a marketing
presentation calling it a developer demo.&lt;br&gt;&lt;br&gt;

Two demos were produced under these assumptions
and they were shown to a bunch of colleagues of
ours. Both native and non-native English speakers.
The response we got was almost unanimous -- audio
might use some fixin&apos; but otherwise they are nice.
The coast was clear and the demos were on their
way to &lt;a href=&quot;http://developers.sun.com&quot;&gt;http://developers.sun.com&lt;/a&gt; when all of a
sudden we had a really strong pushback from
a new person responsible for ok&apos;ing everything that
goes on our site. What that person demanded
was a total removal of *both* demos (which
wasn&apos;t half as bad as the actual reason given
to us). Now, don&apos;t get me wrong here I would
be the first one to agree that the technical
merits of these demos are probably not quite
at the level where I would feel comfortable
submitting them for an Oscan nomination. That
I was prepared to hear and discuss. But I was
completely unprepared for an actual reason
that was given to me: I was told that the
&lt;b&gt;only&lt;/b&gt; reason they wouldn&apos;t be published
is because having demos narrated by
non-native English speakers or even by
somebody who doesn&apos;t happen to be a professional
voice talent is below the quality bar that
is acceptable for a successful image of
Sun microsystems.&lt;br&gt;&lt;br&gt;

Just like that&lt;br&gt;&lt;br&gt;

I tried to argue my case. First by trying to
convince my opponent that it is always better
to hear an unscripted developer chatting about
things which are near and dear to him than
to have a voice talent doing a lip syncing job.
I even referred to the governor of the state
of California elected to his position regardless
of the thickest middle-European accent since
Kissinger. All to no avail. I think somewhere
along the way it actually got personal (after
all when it comes to accents I&apos;m as touchy
as the next [Slavic] guy)&lt;br&gt;&lt;br&gt;

At that point I stopped arguing and figured that as long
as one of the demos did survive and as long as
&lt;a href=&quot;http://blogs.sun.com/jonathan&quot;&gt;Jonathan&lt;/a&gt;
has a soft spot in his heart for &lt;a href=&quot;http://blogs.sun.com&quot;&gt;http://blogs.sun.com&lt;/a&gt; I
can safely use this place instead of the official
one (&lt;a href=&quot;http://developers.sun.com&quot;&gt;http://developers.sun.com&lt;/a&gt;) to talk
to the sort of guys and gals I want to talk to -- you.&lt;br&gt;&lt;br&gt;

And so without further ado, here&apos;s a portion of the SDN portal
which you were not supposed to see. And as with my previous
plea I hope that you would find it possible to spend a couple
of minutes adding a comment or two on what you saw and heard.
I can not stress enough how important it is for me to
find out whether all of the allegations made against this
demo (and even the first one!) are true or false. And who&apos;s
the better force to set this record straight than you --
viewers and listeners we created this demo for. Just
keep in mind one thing -- I don&apos;t want to assert that quality
of the audio here is good enough for a broadcast
all I&apos;m trying to say is that it is comprehensible.
Should we do better next time? Absolutely! Was
it necessary to remove this demo ? NO! &lt;br&gt;
&lt;hr&gt;
&lt;B&gt;Sun Studio Next Generation IDE Tour&lt;/B&gt;&lt;br&gt;
&lt;table&gt;&lt;tr&gt;
&lt;td&gt;
&lt;a href=&quot;http://blogs.sun.com/roller/page/rvs/IDEdemo0806.html&quot;&gt;
&lt;img src=http://blogs.sun.com/roller/resources/rvs/painter.jpg&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;b&gt;Watch the Sun Studio Next Generation IDE Tour&lt;/b&gt;&lt;br&gt;
See what kind of the IDE experience you should be preparing
yourself for once we made it available for early adopters
some time later this year. This demo was created by (in alphabetical
order): Andrew Krasny, Maria Tishkova, Anton Vysotsky and
Anton Youdkevitch. Editing and postproduction -- Roman Shaposhnik.
The team would like to
thank &lt;a href=&quot;http://photos.sun.com/asset/5627?returnPage=/page/988&quot;&gt;
Anya Barsky&lt;/a&gt; for feedback and support and &lt;a href=&quot;http://blogs.sun.com/jonathan&quot;&gt;Jonathan Schwartz&lt;/a&gt;
for being a Patron Saint of &lt;a href=&quot;http://blogs.sun.com&quot;&gt;http://blogs.sun.com&lt;/a&gt;.&lt;br&gt;&lt;br&gt;
&amp;raquo;&lt;a href=&quot;http://blogs.sun.com/roller/page/rvs/IDEdemo0806.html&quot;&gt;
Take the IDE tour (flash)&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;hr&gt;

P.S. And especially if you happen to be a non-native English speaker
please let me know whether you had major difficulties understanding
the demo. One of the allegations against it was exactly that it would
be practically impossible for non-native speakers to understand it.
However, as a non-native speaker myself I find it particularly hard to
believe.</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/sdn_channel_on_linux_deleted</guid>
    <title>SDN Channel on Linux: deleted scenes and commentary</title>
    <dc:creator>Roman Shaposhnik</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/sdn_channel_on_linux_deleted</link>
        <pubDate>Sat, 29 Jul 2006 20:19:56 -0700</pubDate>
    <category>Sun Studio</category>
            <description>Last week I had my first ever
&lt;a href=&quot;http://developers.sun.com/channel/07_06/&quot;&gt;
public exposure&lt;/a&gt; of a major kind and now that
I can finally sit back and relax somewhat I guess
it&apos;s time to put my first impressions in writing
(before I forget them altogether) and also set the
record straight on things which turned out to be
not quite the way I expected them to.&lt;br&gt;&lt;br&gt;

As you could very well imagine for a non-native
English speaker like myself the toughest part
was the interview itself. And even though I have
some experience in lecturing and giving presentations
at various technical and scientific conferences
I don&apos;t have a habit of augmenting my slides with
exact words I want to say or otherwise script my speeches.
I usually just give myself a framework of slides and then
I try to improvise within it. Sometimes it works great,
sometimes not, but the crucial difference is -- once
I&apos;m done with my live presentation the only thing I
have to fear is an occasional rotten tomato, in case
of an interview (which is supposed to be available
on-line for at least a couple of weeks) the stakes
are much higher. That said, the pressure wasn&apos;t
really severe enough to make me repeat the
&lt;a href=&quot;http://en.wikipedia.org/wiki/Demosthenes#Speech_training&quot;&gt;
Demosthenes&apos;s routine&lt;/a&gt; but it surely was enough of
a motivation to make me do the proverbial homework at least
a couple of times before the shooting date. I think
it helped a great deal because when I did arrive to
the set on Monday I really knew what I wanted to talk
about and how I wanted to phrase it. I spoke for
about 10-12 minutes and when I was done I actually expected
our producer to call it a wrap. After all, at least
in my opinion, it was the best dozen or so minutes I could
possibly muster anyway. Instead they told me -- too long
and too geeky. We need more entertainment. And thus the
battle for entertainment has begun. We did 5 takes total
and by the end of it I was talking a mile-a-minute and
was really delivering a bunch of sound-bites instead
of talking about things I felt like talking. Luckily
when it was all over they told me that the end result
is going to be a composite of the best segments from all
of the outtakes not just the last one. Now, frankly,
looking at the final product I don&apos;t think I have
anything to complain about in a big way. It looks
professional and I have only myself to blame if
there&apos;s anything wrong with the presentation or
material, except may be the final speech where they
cut to the host way too early while I still talk
which in my opinion looks a bit silly. That said,
I still feel a bit sad about a couple of points I was
trying to make which didn&apos;t make it into the final video.
It would be nice to have an opportunity of making a sort
of &quot;director&apos;s cut&quot; based of the raw outtakes and
be able to show it for anybody with an attention span
larger than what producers of the show are used to.
Micheline (my host) is now doing her best trying to
talk our producer into releasing these tapes. But before
that actually happens, here&apos;s what I remember from
my favorite part that didn&apos;t make it. Enjoy and please
leave your comments on whether you liked the interview
or not. It is really important to me. And I&apos;m going
to explain why in my next post.&lt;br&gt;&lt;br&gt;

&lt;I&gt;
Believe it or not, but it all began almost 8 years ago when
I was hired to work for Sun doing C++ compiler. Of course,
given that I had started to tinker with Linux even
earlier -- one of the first things I suggested to my manager
was to port the excellent software which at the time was
known as Sun&apos;s Workshop to Linux. I think at the time Linux
kernel was around 1.0 and if my memory serves me right the
answer I got from my manager was : &quot;Linux who?&quot;.
Fast forward 5 years and you can find me in Sunny California
doing all sorts of compiler related projects for Sun. What is
different though is Sun&apos;s attitude towards Linux. There&apos;s an
embracement of it on the deployment side -- there&apos;s even some
embracement on the development side because of Sun Studio 9
which had tools available on Linux, but still no compilers.
There&apos;s a general interest in Linux, but nobody is ready to
stand up in one of those PowerPoint meetings and claim that
we MUST port compilers to Linux NOW! That said, the approach
I took almost a year and a half ago was a different one.
Together with the two friends of mine (and you know,
three crazy dudes from Russia -- Horsh, Fidor and Vusya --
are a pretty  powerful combination when it comes to
skunkworks) we started this porting project pretty much
in our spare time.  We had to battle Linux we had to battle
glibc we had to battle gcc but it was great fun and we were
doing something really useful. On top of that in two months
we actually had a C compiler not only capable of bootstrapping
itself but also passing about 80% of the most rigorous
testsuite you could subject a piece of code to. At that point
I just showed up in from of my boss and told him -- its time
to ship it.  Much to his credit he was very supportive and
helped me a lot with everything. If it weren&apos;t for him
our coming out of the closet during LinuxWorld in
San Francisco probably should have never ever happened.
&lt;/I&gt;</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/why_plan9_is_relevant_today</guid>
    <title>Why Plan9 is relevant today</title>
    <dc:creator>Roman Shaposhnik</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/why_plan9_is_relevant_today</link>
        <pubDate>Fri, 28 Jul 2006 15:14:15 -0700</pubDate>
    <category>Elegant Computing</category>
            <description>I just can&apos;t resist to publish the following two writeups on why 
&lt;a href=&quot;http://cm.bell-labs.com/plan9/&quot;&gt;Plan 9&lt;/a&gt; 
is as relevant
today as ever. It comes from Skip Tavakkolian and 
it was originally posted to 9fans@cse.psu.edu. For those
who are still not convinced here&apos;s a link to the project
of &lt;a href=&quot;http://blog.seattlepi.nwsource.com/microsoft/archives/105004.asp&quot;&gt;
Microsoft + Whirlpool&lt;/a&gt; where they connect two most
unlikely gadgets together. I&apos;m sure it is painful 
to do under Windows. And I know how easy it is under
Plan 9.
Enjoy!&lt;br&gt;&lt;br&gt;

Skip says:
&lt;pre&gt;
The future is now.  how many digital gizmos does a person 
have? mobile phone, ipod, digital camera, pots phone. throw 
in a pda, a laptop and a desktop and there it is.

what&apos;s the killer app for plan9?  the vector is toward 
distributed access to resources.  9grid is extending the 
sharing to process space. we&apos;re betting on our shared name 
space system.  apps for collaboration are another area of 
possibility; checkout VN&apos;s solutions based on inferno.  
plan9 doesn&apos;t need to be &quot;in your face&quot; to be useful.  the
way we&apos;re using plan9, it is transparent to the end user.

the amount of success is directly related to the amount 
of money behind the os or platform. linux offered real 
savings on acquisition and maintenance over windows; 
windows&apos; success was in providing a common platform for 
&quot;productivity&quot; applications, that had positive returns 
on investment to the user and revenue to the app developer 
- the largest being ms itself.

once a killer app is created that shows a clear advantage 
for using plan9 over other os, it will be adopted.  
availability of p9p means that app developers can take 
advantage of the model, while still satisfying any dictated 
requirements for a more known os; this is likely to be the 
case early in the adoption curve, despite the fact that 
plan9 is much easier to learn and maintain than other os
&lt;/pre&gt;</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/if_it_walks_like_a</guid>
    <title>If it walks like a duck, talks like a duck, but isn&apos;t covered by POSIX it probably is a penguin.</title>
    <dc:creator>Roman Shaposhnik</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/if_it_walks_like_a</link>
        <pubDate>Wed, 26 Jul 2006 19:35:19 -0700</pubDate>
    <category>LIN(U[ni]X)</category>
            <description>Time and again I tell all my friends who happen to develop
for UNIX-like OSes to ditch the man pages and always read
&lt;a href=&quot;http://www.opengroup.org/onlinepubs/000095399/toc.htm&quot;&gt;POSIX standard
&lt;/a&gt;
instead.&lt;br&gt;&lt;br&gt;

Case in point -- just a couple of days ago I had to make an internal
library behave on Linux. The reason it did misbehave was because
of the following code snippet:

&lt;pre&gt;
   pthread_create(&amp;id, NULL, do_stuff, NULL);
   workers[id].started = 1;
&lt;/pre&gt;

Of course, on sensible systems even the manpage for pthread_create(3)
tells you that you shouldn&apos;t be expecting anything from &lt;B&gt;id&lt;/B&gt;.
It is, after all, an opaque datatype &apos;pthread_t&apos;.&lt;br&gt;&lt;br&gt;

However, on Solaris it also has an additional property of being
akin to PID. IOW -- an ever increasing integer counting your threads.&lt;br&gt;&lt;br&gt;

Now, don&apos;t get me wrong -- as the title suggests if it ain&apos;t covered
by POSIX don&apos;t expect anything from it. However, the more I think about
it the more I like the way Solaris does it. And here&apos;s why:&lt;br&gt;&lt;br&gt;

I believe its to be a good programming practice to always make it
easier for consumer to enumerate objects coming out of producers
like pthred_create. It is easy enough for me to do on Solaris, but
on Linux I have to resort to keeping track of these objects
myself -- I need a global counter, locks around it and so forth.
On Solaris -- it&apos;s just an index.&lt;br&gt;&lt;br&gt;

Now, the reason they did it the other way on Linux (or better yet in glibc)
seems to be that they wanted to simply return the memory address of
the actual datastructure representing one particular thread. Nothing
wrong with that except that small ever-increasing integers are kind
of like addresses anyway, but they have an additional advantage
of being limited to an &quot;address space&quot; of an array which
lets them cross the border of different address spaces much easier.
Without increasing a complexity on the consumer side. And that&apos;s
a biggie in my opinion.
&lt;br&gt;&lt;br&gt;

I guess I have to chalk one up for Solaris this time around.
</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/why_do_i_love_multiple</guid>
    <title>Why do I love multiple versioned symbols with the same name.</title>
    <dc:creator>Roman Shaposhnik</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/why_do_i_love_multiple</link>
        <pubDate>Sat, 22 Jul 2006 22:39:32 -0700</pubDate>
    <category>LIN(U[ni]X)</category>
            <description>When I was a postgraduate student at St.Petersburg State University
I had come across the writeup from the Tom Duff (yes! of the
&lt;a href=&quot;http://en.wikipedia.org/wiki/Duff&apos;s_device&quot;&gt;Duff&apos;s device&lt;/a&gt; fame)
where he stated that shared libraries are pure evil one true
sign that apocalypse is at hand. At the time I didn&apos;t gave it
much thought, but now that I&apos;ve worked for Sun for some odd number
of years I think I tend to agree with him.&lt;br&gt;&lt;br&gt;

I believe that the main gripe I now have with shared libraries (AKA
Dynamic Shared Objects -- DSOs) is the fact that they truly aim
at solving two mutually exclusive problems: give vendors a flexibility
to patch systems &quot;live&quot; and also protect end-users from experiencing
failures of the unsuspecting applications which don&apos;t want to be
patched.&lt;br&gt;&lt;br&gt;

One of the tools for protecting the endusers is, of course, versioning
of the symbols in DSOs
&lt;a href=&quot;http://docs.sun.com/app/docs/doc/817-1984&quot;&gt;introduced by Sun&lt;/a&gt; more than 10 years ago. And even what Sun did was somewhat of an overkill,
but the GNU crowd decided to go the whole nine yard as far as complexity
is concerned when they decided to &quot;augment&quot; Sun&apos;s versioning strategy
with a couple of
&lt;a href=&quot;http://www.gnu.org/software/binutils/manual/ld-2.9.1/html_node/ld_25.html&quot;&gt;
things of their own&lt;/a&gt;.&lt;br&gt;&lt;br&gt;

Of course the best of it is: &quot;The second GNU extension is to allow multiple versions of the same function to appear in a given shared library.&quot;&lt;br&gt;&lt;br&gt;

Why do I care? Well, primarily because the following doesn&apos;t really work
as expected on Linux:
&lt;pre&gt;
int pthread_cond_signal(pthread_cond_t *cond)
{
   /* Snitch on pthread_cond_signal */
   sym = dlsym(RTLD_NEXT, &quot;pthread_cond_signal&quot;);
   return sym(cond);
};
&lt;/pre&gt;

In fact it breaks. Horribly! Why ? Well, because pthread_cond_signal
happens to be a versioned symbol with the previous version still
available in glibc (and in libpthread.so, but that&apos;s a different story):

&lt;pre&gt;
$ nm /lib/libc.so.6 | grep pthread_cond_signal
000cb780 t __pthread_cond_signal
000cb780 t __pthread_cond_signal_2_0
000cb780 T pthread_cond_signal@GLIBC_2.0
000cb780 T pthread_cond_signal@@GLIBC_2.3.2
&lt;/pre&gt;

And regardless of the fact that the default one is supposed
to be the GLIBC_2.3.2 one when I call dlsym() I get the older
guy. Of course the older guys now has problems working with
a cond. variable initialized by the unitercepted (2.3.2)
pthread_cond_init and the whole thing goes kaboom.&lt;br&gt;&lt;br&gt;

Which means that in order for my code to work not only do I have
to now version my symbols in order to intercept only what&apos;s
needed but I also have to do a funny dance around dl[v]sym.&lt;br&gt;&lt;br&gt;

Versioning my own symbols was a bit of a challenge as well. Don&apos;t
get me wrong -- the Sun way of writing linker map files worked
quite nicely, but I really wanted to experience some of that
magical world of GNU asm: 
&lt;pre&gt;
__asm__(&quot;.symver old_foo,foo@@VERS_2.0&quot;);
&lt;/pre&gt;

Suffice it to say, that the following example broke:

&lt;pre&gt;
$ cat test.c
void old_foo() {}
__asm__(&quot;.symver old_foo,foo@@VERS_2.0&quot;);
$ gcc -shared -fPIC -o test.so test.c
/usr/lib/gcc/i586-suse-linux/bin/ld:
      test.so: undefined versioned symbol name foo@@VERS_2.0
/usr/lib/gcc/i586-suse-linux/bin/ld: failed to set dynamic 
                                     section sizes: Bad value
collect2: ld returned 1 exit status
&lt;/pre&gt;

and it took me a while to realize that the claim they make:
&quot;This was done mainly to reduce the burden on the library maintainer.&quot;
is a bit further from realiaty than I expected -- you still need
the mapfile!&lt;br&gt;&lt;br&gt;

Oh well, yet another day, taming glibc.</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/history_in_pictures_the_best</guid>
    <title>History in pictures -- the best kind</title>
    <dc:creator>Roman Shaposhnik</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/history_in_pictures_the_best</link>
        <pubDate>Wed, 12 Jul 2006 16:11:00 -0700</pubDate>
    <category>/var</category>
            <description>I truly believe that the only meaningful way of experiencing history and culture
is by looking at the everyday objects of that time and place. In fact a decorated
household pot that my grandma used to have tells me more about her childhood
than all of the history books combined. And it becomes especially important
if the &lt;a href=&quot;http://www.imdb.com/title/tt0299977/&quot;&gt;period or place&lt;/a&gt; you study is know to be a controversial one.&lt;br&gt;&lt;br&gt;

One such period I find fascinating, controversial and oh! so
powerful artistically is the period of the late czarist Russia and early Soviet Union.&lt;br&gt;&lt;br&gt;

At that time (since there were no radio or television around and since the majority of the
population was illiterate) the biggest means of communication
used to be posters. They were everything to everyone -- news, entertainment and advertisement.
To some extent they were Zeitgeist at its purest form.&lt;br&gt;&lt;br&gt;

To my sincerest delight this online &lt;a href=&quot;http://davno.ru/posters/1910/&quot;&gt;Museum of Soviet posters&lt;/a&gt; offers
a vast collection supplemented by an excellent timeline of events.&lt;br&gt;&lt;br&gt;

The site is in Cyrillic -- but for an art form aimed at an audience of late 1920s it really
doesn&apos;t matter -- so lay back, get a cup of tea (with Lemon!) and flip through the pages.
And if at the end of it you still feel hungry for a controversial rendition
of the same subject go to the &lt;a href=&quot;http://davno.ru/soviet-posters/&quot;&gt;English version&lt;/a&gt; of the same site.</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/does_linux_really_need_to</guid>
    <title>Does Linux really need to have a bloated libc ?</title>
    <dc:creator>Roman Shaposhnik</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/does_linux_really_need_to</link>
        <pubDate>Tue, 11 Jul 2006 23:36:58 -0700</pubDate>
    <category>LIN(U[ni]X)</category>
            <description>Once upon a time there was a small project called GNU, and they wanted to build a system
which wouldn&apos;t be UNIX but rather a free ad lib giving every human being a power to tinker
with a capable computing environment. Their goal was a noble one and they started off
with building one cornerstone tool for building everything else &#8211; the C environment. And
thus Gcc and Glibc were created. Of course, because of the evil spell of a particular 
committee Glibc had to suffer a multiple personality disorder from the day it was born. Because
you see, every libc has to serve two masters at the same time by being a pure language
library (just like, say, C++ standard library) but also by being an interface to the underlying
OS take care of the system calls. Of course, since the GNU project didn&apos;t really want to 
have a UNIX kernel at their core GNU libc had to work with HURD. And so it did. Faithfully.
And it was a nice piece of software (that is to the extent anybody can call GNU coding
style nice).&lt;br&gt;&lt;br&gt;

Then 1991 came a long and Linux was in, that is &#8211; shopping for a suitable C library to suit
its kernel needs. GNU libc, of course, was an obvious choice not only because it was GNU
software, but because it was paired up with gcc &#8211; a compiler of choice for early Linux developers.
Of course, nobody wanted to deal with triple personality disorder (Glibc would have to
support two kernels at the same time) so they forked. And both pieces of software remained
to be pretty good. The only problem was &#8211; Linux kernel developers were not really interested
in developing the language personality of libc: after all they &#8220;don&apos;t do userspace&#8221;. So it wasn&apos;t 
really a surprise when around 1997 they determined that it was easier to add support of Linux
kernel into the vanilla GNU libc  (and chage the version from 5.X to 2) than to add all those
features of GNU libc back into their fork.&lt;br&gt;&lt;br&gt;

And thus a monster of complexity was born. Because by that time Glibc was really going out
of its way to support everything and the kitchen sink. All of the UNIX standards fashionable
at the time and on top of that a bunch of dubious extensions. The reasoning was simple: &#8220;because we can&#8221;.&lt;br&gt;&lt;br&gt;

At that time I still felt for GNU libc (even though personally I do believe in &#8220;small is beautiful&#8221;)
at least they had their excuse for being as bloated and complicated (does declaring a function
really need to require 32 lines of code and 4 different macros?) as they were. But it all came
crumbling down when I read this post from a raving^H^H^H^H^Hoppinionated GNU libc
project lead &lt;a href=&quot;http://udrepper.livejournal.com/7326.html&quot;&gt;Dictatorship of the Minorities&lt;/a&gt;.&lt;br&gt;&lt;br&gt;


So, I figured, if GNU libc is now officially a Linux only project may be its time to clean it
up or just throw it away and replace it with the proper C99 compliant libc which wouldn&apos;t 
be rated &#8220;M&#8221; for the purposes of reading the code ? Like a 
&lt;a href=&quot;http://cvs.opensolaris.org/source/xref/on/usr/src/lib/libc/&quot;&gt;Solaris libc&lt;/a&gt; or a 
&lt;a href=&quot;http://cm.bell-labs.com/sources/plan9/sys/src/libc/&quot;&gt;Plan9 libc&lt;/a&gt; or an 
&lt;a href=&quot;http://www.mplayerhq.hu/cgi-bin/viewcvs.cgi/libc/trunk/&quot;&gt;Mplayer libc&lt;/a&gt; or a 
&lt;a href=&quot;http://www.freebsd.org/cgi/cvsweb.cgi/src/lib/libc/&quot;&gt;BSD libc&lt;/a&gt; &#8211; anything but the stuff that has incorrect C99 code in its headers.&lt;br&gt;&lt;br&gt;

&lt;a href=&quot;http://www.kernel-traffic.org/kernel-traffic/kt20010416_114.html&quot;&gt;I know Linus would agree&lt;/a&gt;. Any takers ?&lt;br&gt;&lt;br&gt;

P.S. In the ideal world, of course, libc would be also purged from a split personality disorder
and made into two libraries &#8211; one for supporting system calls and system aspects of POSIX
and the other one for supporting C language. The later will have to be shipped with a compiler
and made as fast as possible using things like IR inlining. Oh well, a topic for a different
post I suppose.  </description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/sun_studio_compilers_on_linux</guid>
    <title>Sun Studio Compilers on Linux are [almost] 1 year old</title>
    <dc:creator>Roman Shaposhnik</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/sun_studio_compilers_on_linux</link>
        <pubDate>Fri, 30 Jun 2006 16:28:24 -0700</pubDate>
    <category>Sun Studio</category>
            <description>It looks like summer is Sun&apos;s time for doing the right thing. Last summer a year ago we &lt;b&gt;&lt;a href=&quot;http://www.opensolaris.org&quot;&gt;opened&lt;/a&gt;&lt;/b&gt; Solaris to the community and a bit later what had started as a skunworks project of just a couple of guys trying to bring some &lt;b&gt;&lt;a href=&quot;http://developers.sun.com/sunstudio&quot;&gt;software&lt;/a&gt;&lt;/b&gt; they like to the &lt;b&gt;&lt;a href=&quot;http://www.kernel.org&quot;&gt;platform&lt;/a&gt;&lt;/b&gt; they
cherish was finally approved by the management (thanks Don!) to be released to the outside world as well.&lt;br&gt;&lt;br&gt;
And thus what is now known as &lt;b&gt;&lt;a href=&quot;http://developers.sun.com/sunstudio/linux&quot;&gt;Sun Studio Compilers for Linux Technology Preview Program&lt;/a&gt;&lt;/b&gt; was born.&lt;br&gt;&lt;br&gt;
At the time it was a small project fueled mainly by the enthusiasm of good folks around me (thanks Lisa, Kuldip and &lt;b&gt;&lt;a href=&quot;http://blogs.sun.com/roller/page/rchrd&quot;&gt;Richard&lt;/a&gt;&lt;/b&gt;) but it was because of you guys reading this that this project
was allowed to morph into a much more respected and supported one called &lt;b&gt;&lt;a href=&quot;http://developers.sun.com/prodtech/cc/downloads/express.jsp&quot;&gt;Sun Studio Express&lt;/a&gt;&lt;/b&gt;. Now its not just about making Sun Studio compilers on Linux available but about changing the way our
organization produces software. And that&apos;s a biggie.&lt;br&gt;&lt;br&gt;
I guess in this last paragraph I just want to thank everybody who supported us by downloading our stuff, trying it out and &lt;a href=&quot;http://developers.sun.com/prodtech/cc/community/index.html&quot;&gt;discussing&lt;/a&gt;&lt;/b&gt;
it on forums -- keep doing it! The only reason it all goes out is because of you!&lt;br&gt;&lt;br&gt;
&lt;center&gt;&lt;H1&gt;Thank YOU!&lt;/H1&gt;&lt;center&gt;</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/on_lego_bricks_and_os</guid>
    <title>On LEGO bricks and OS design</title>
    <dc:creator>Roman Shaposhnik</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/on_lego_bricks_and_os</link>
        <pubDate>Fri, 30 Jun 2006 15:51:52 -0700</pubDate>
    <category>Elegant Computing</category>
            <description>It is not always that we can explain our deep attraction to particular patterns be they real or imaginary. 
To some extent that is exactly what makes art so subjective. But even in the realms of programming these
matters hardly become any clearer. Why does the majority of computer scientists and programmers 
find recursion particularly exciting ?  Well, I guess we can speculate all we want but it won&apos;t get
us any closer to really answering this question. &lt;br&gt;&lt;br&gt;

Now, as I&apos;ve told everybody time and again -- I love &lt;b&gt;&lt;a href=&quot;http://cm.bell-labs.com/plan9/&quot;&gt;Plan9&lt;/a&gt;&lt;/b&gt;. I think its the most elegantly designed
and implemented OS since the dawn of UNIX. And anything else (be it Linux or Solaris) just pales in comparison
not only in the pure artistic sense, but also in a number of very practical areas. I truly believe that Plan9
and its ideas were somewhat ahead of their time and anybody seriously considering a fully networked world
of devices ranging from one bit sensors to full fledged humans must study Plan9. Its like that old LISP
saying: &quot;If you don&apos;t know LISP you&apos;re bound to reinvent it. Poorly&quot;.&lt;br&gt;&lt;br&gt;

An excellent &lt;b&gt;&lt;a href=&quot;http://cm.bell-labs.com/sys/doc/9.html&quot;&gt;introduction&lt;/a&gt;&lt;/b&gt; into Plan9 philosophy does
a nice job of explaining the 3 key ideas on which Plan9 is built:
&lt;ul&gt;
&quot;The view of the system is built upon three principles. First, resources are named and accessed like files in a hierarchical file system. Second, there is a standard protocol, called 9P, for accessing these resources. Third, the disjoint hierarchies provided by different services are joined together into a single private hierarchical file name space. The unusual properties of Plan 9 stem from the consistent, aggressive application of these principles.&quot;
&lt;/ul&gt;
but it does nothing to help understand why so many smart people find them (and especially the first
one) particularly exciting and somehow very powerful.
&lt;br&gt;&lt;br&gt;
It took me a number of years of thinking about it, one trip to Madrid and a conversation with the brilliant
computer scientist named &lt;b&gt;&lt;a href=&quot;http://plan9.escet.urjc.es/who/nemo/index.html&quot;&gt;Nemo&lt;/a&gt;&lt;/b&gt; to finally
come as close to a conscious explanation as one can get.
&lt;br&gt;&lt;br&gt;
Its rather simple, really, as an application developer my ideal world
would be the one where I can reuse useful components/services literally
in a manner of LEGO bricks. The world where a component that gives
me a &quot;binary editor&quot; capability would be equally easily accessible
from my debugger, my editor, the application I use to edit fonts, etc.
Ideally I shouldn&apos;t even care about where component resides or what
language/infrastructure it is implemented in. A SOA of sorts.
&lt;br&gt;&lt;br&gt;
Do we live in an ideal world ? Not really, but before I state why
Plan 9 comes as close to it as one would hope to get, lets look at
some of the &quot;proposed&quot; solutions to this universal reusability
problem.
&lt;br&gt;&lt;br&gt;
Java comes to mind right away. Its widespread and it abstracts you
sufficiently enough from the outside world, so that you don&apos;t have
to care how to create threads or windows -- its all part of the
grandure API. It also provides the level of reusability I&apos;ve mentioned
via [Net]Beans and such. However, the unbelievably high price
you have to pay for this is that you absolutely have to remain in
Java&apos;s world. Both from an VM and from an API standpoint. Suppose
I even have that binary editor module coded as a [Net]Bean and
it works fine in that framework, but can I get to it from my favorite
editor ? From my favorite debugger ? From a command line prompt ?
No! I have to use Java and Java alone to &quot;glue&quot; this piece of
functionality to the rest of my working environment.
&lt;br&gt;&lt;br&gt;
It is sort of like having LEGO bricks which not only do not stick
to each other if you put &apos;em together, but require a particular brand
of glue to form any sort of complex structure. The glue called Java
in my previous example, or the glue called C language, or what not...
&lt;br&gt;&lt;br&gt;
Now, the question becomes is it even possible to have anything at all
which would let my LEGO bricks just stick together ?
&lt;br&gt;&lt;br&gt;
&lt;center&gt;&lt;b&gt;My answer is -- yes and it is called files!&lt;/b&gt;&lt;/center&gt;
&lt;br&gt;
Files are my true universal glue, the lowest common denominator
of sorts, the one and only API present in absolutely *all* common
programming languages and systems.
&lt;br&gt;&lt;br&gt;
It takes a bit of time to realize just how far the lack of files
as a universal glues pushed various developers. Do you know
that when you do &quot;getline a &lt; /inet/tcp/lport/rhost/rport&quot; in (g)awk
the right thing happens ? Do you realize how much extra code was
duplicated and how many bugs were reintroduced ? Same question
about all these jolly Java APIs -- sure its fun to reinvent the
wheel, but you should at least start from wood, not from carbon
molecules...</description>          </item>
    <item>
    <guid isPermaLink="true">http://blogs.sun.com/rvs/entry/readme_1st</guid>
    <title>README.1ST</title>
    <dc:creator>Roman Shaposhnik</dc:creator>
    <link>http://blogs.sun.com/rvs/entry/readme_1st</link>
        <pubDate>Wed, 28 Jun 2006 21:20:27 -0700</pubDate>
    <category>/var</category>
            <description>My name is Roman Shaposhnik and I have a confession to make -- I used to be a latent blogger
who had to come out of the closet because of the burnt out therapist.&lt;br&gt;&lt;br&gt;

Apart from that, I work for Sun microsystems doing Sun Studio compilers and tools
and I also tinker with the Universe using Math, Software and Physics.&lt;br&gt;&lt;br&gt;

I have a nasty habit of keeping lots of files in ~rvs/notes and my hope is that this
blog will replace a need for that collection of things I want to keep track
of or otherwise salvage from sudden onsets of forgetfulness.&lt;br&gt;&lt;br&gt;

Finally one last thing I have to explain before moving on: when I first heard
of blogging a couple of years ago we had a conversation with &lt;B&gt;&lt;a href=&quot;http://zavr.livejournal.com/profile?mode=full&quot;&gt;a friend of mine&lt;/a&gt;&lt;/B&gt;
about how much blogging reminded us of the good old &lt;B&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Fidonet&quot;&gt;FidoNet&lt;/a&gt;&lt;/B&gt; days. In fact, it is
quite amazing to realize how similar blogs and semi-restricted echo conferences
(the best kind!) really are. And its not just the technical aspect of it, but the
social one that gives me goose bumps. I guess there&apos;s a very basic human need here
that has to be addressed and each age of computing offers its own take on how to do
that. Of course, given that my latent condition goes as far back as IBM PC XT
and 2400 BAUD days it was absolutely necessary for me to operate a BBS and
a FidoNET node back in the &apos;90.&lt;br&gt;&lt;br&gt;

Today the legacy of 2:5030/359: Yellow Submarine BBS lives on this blog!</description>          </item>
  </channel>
</rss>
